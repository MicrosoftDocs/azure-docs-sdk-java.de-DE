### YamlMime:ManagedReference
items:
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager
    id: _in_memory_checkpoint_manager
    parent: com.microsoft.azure.eventprocessorhost
    children:
      - com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.checkpointStoreExists()
      - com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.createCheckpointIfNotExists(String)
      - com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.createCheckpointStoreIfNotExists()
      - com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.deleteCheckpoint(String)
      - com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.deleteCheckpointStore()
      - com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.getCheckpoint(String)
      - com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.initialize(EventProcessorHost)
      - com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.InMemoryCheckpointManager()
      - com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.updateCheckpoint(Checkpoint)
      - 'com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.updateCheckpoint(Lease,Checkpoint)'
    href: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.yml
    langs:
      - java
    name: InMemoryCheckpointManager
    nameWithType: InMemoryCheckpointManager
    fullName: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager
    type: Class
    source:
      remote: &ref_0
        path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryCheckpointManager.java
        branch: master
        repo: 'https://github.com/Azure/azure-event-hubs-java'
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryCheckpointManager.java
      startLine: 35
    package: com.microsoft.azure.eventprocessorhost
    syntax:
      content: public class InMemoryCheckpointManager implements ICheckpointManager
    inheritance:
      - java.lang.Object
      - com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.checkpointStoreExists()
    id: checkpointStoreExists()
    parent: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.yml
    langs:
      - java
    name: checkpointStoreExists()
    nameWithType: InMemoryCheckpointManager.checkpointStoreExists()
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.checkpointStoreExists()
    overload: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.checkpointStoreExists*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryCheckpointManager.java
      startLine: 55
    package: com.microsoft.azure.eventprocessorhost
    syntax:
      content: public Future<Boolean> checkpointStoreExists()
      return:
        type: ec0e250a
    overridden: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.checkpointStoreExists()
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.createCheckpointIfNotExists(String)
    id: createCheckpointIfNotExists(String)
    parent: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.yml
    langs:
      - java
    name: createCheckpointIfNotExists(String partitionId)
    nameWithType: InMemoryCheckpointManager.createCheckpointIfNotExists(String partitionId)
    fullName: Future<Checkpoint> com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.createCheckpointIfNotExists(String partitionId)
    overload: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.createCheckpointIfNotExists*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryCheckpointManager.java
      startLine: 118
    package: com.microsoft.azure.eventprocessorhost
    syntax:
      content: public Future<Checkpoint> createCheckpointIfNotExists(String partitionId)
      parameters:
        - id: partitionId
          type: '26831127'
      return:
        type: 9b3030f6com.microsoft.azure.eventprocessorhost._checkpointa08ddfce
    overridden: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.createCheckpointIfNotExists(String)
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.createCheckpointStoreIfNotExists()
    id: createCheckpointStoreIfNotExists()
    parent: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.yml
    langs:
      - java
    name: createCheckpointStoreIfNotExists()
    nameWithType: InMemoryCheckpointManager.createCheckpointStoreIfNotExists()
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.createCheckpointStoreIfNotExists()
    overload: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.createCheckpointStoreIfNotExists*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryCheckpointManager.java
      startLine: 66
    package: com.microsoft.azure.eventprocessorhost
    syntax:
      content: public Future<Boolean> createCheckpointStoreIfNotExists()
      return:
        type: ec0e250a
    overridden: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.createCheckpointStoreIfNotExists()
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.deleteCheckpoint(String)
    id: deleteCheckpoint(String)
    parent: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.yml
    langs:
      - java
    name: deleteCheckpoint(String partitionId)
    nameWithType: InMemoryCheckpointManager.deleteCheckpoint(String partitionId)
    fullName: Future<Void> com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.deleteCheckpoint(String partitionId)
    overload: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.deleteCheckpoint*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryCheckpointManager.java
      startLine: 188
    package: com.microsoft.azure.eventprocessorhost
    syntax:
      content: public Future<Void> deleteCheckpoint(String partitionId)
      parameters:
        - id: partitionId
          type: '26831127'
      return:
        type: 075d0a89
    overridden: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.deleteCheckpoint(String)
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.deleteCheckpointStore()
    id: deleteCheckpointStore()
    parent: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.yml
    langs:
      - java
    name: deleteCheckpointStore()
    nameWithType: InMemoryCheckpointManager.deleteCheckpointStore()
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.deleteCheckpointStore()
    overload: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.deleteCheckpointStore*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryCheckpointManager.java
      startLine: 78
    package: com.microsoft.azure.eventprocessorhost
    summary: |-
      <p><span data-ttu-id="fefaa-101">Nicht verwendet werden, indem <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>, aber eine einfache Funktion, für die Tests verwenden.</span><span class="sxs-lookup"><span data-stu-id="fefaa-101">Not used by <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>, but a convenient function to have for testing.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Boolean> deleteCheckpointStore()
      return:
        type: ec0e250a
        description: '<p><span data-ttu-id="fefaa-102">True, wenn der Prüfpunkt Speicher erfolgreich, "false" ist dies nicht der gelöscht wurde</span><span class="sxs-lookup"><span data-stu-id="fefaa-102">true if the checkpoint store was deleted successfully, false if not</span></span> </p>'
    overridden: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.deleteCheckpointStore()
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.getCheckpoint(String)
    id: getCheckpoint(String)
    parent: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.yml
    langs:
      - java
    name: getCheckpoint(String partitionId)
    nameWithType: InMemoryCheckpointManager.getCheckpoint(String partitionId)
    fullName: Future<Checkpoint> com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.getCheckpoint(String partitionId)
    overload: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.getCheckpoint*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryCheckpointManager.java
      startLine: 90
    package: com.microsoft.azure.eventprocessorhost
    syntax:
      content: public Future<Checkpoint> getCheckpoint(String partitionId)
      parameters:
        - id: partitionId
          type: '26831127'
      return:
        type: 9b3030f6com.microsoft.azure.eventprocessorhost._checkpointa08ddfce
    overridden: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.getCheckpoint(String)
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.initialize(EventProcessorHost)
    id: initialize(EventProcessorHost)
    parent: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.yml
    langs:
      - java
    name: initialize(EventProcessorHost host)
    nameWithType: InMemoryCheckpointManager.initialize(EventProcessorHost host)
    fullName: void com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.initialize(EventProcessorHost host)
    overload: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.initialize*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryCheckpointManager.java
      startLine: 49
    package: com.microsoft.azure.eventprocessorhost
    syntax:
      content: public void initialize(EventProcessorHost host)
      parameters:
        - id: host
          type: com.microsoft.azure.eventprocessorhost._event_processor_host
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.InMemoryCheckpointManager()
    id: InMemoryCheckpointManager()
    parent: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.yml
    langs:
      - java
    name: InMemoryCheckpointManager()
    nameWithType: InMemoryCheckpointManager.InMemoryCheckpointManager()
    fullName: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.InMemoryCheckpointManager()
    overload: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.InMemoryCheckpointManager*
    type: Constructor
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryCheckpointManager.java
      startLine: 42
    package: com.microsoft.azure.eventprocessorhost
    syntax:
      content: public InMemoryCheckpointManager()
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.updateCheckpoint(Checkpoint)
    id: updateCheckpoint(Checkpoint)
    parent: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.yml
    langs:
      - java
    name: updateCheckpoint(Checkpoint checkpoint)
    nameWithType: InMemoryCheckpointManager.updateCheckpoint(Checkpoint checkpoint)
    fullName: Future<Void> com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.updateCheckpoint(Checkpoint checkpoint)
    overload: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.updateCheckpoint*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryCheckpointManager.java
      startLine: 159
    package: com.microsoft.azure.eventprocessorhost
    syntax:
      content: public Future<Void> updateCheckpoint(Checkpoint checkpoint)
      parameters:
        - id: checkpoint
          type: com.microsoft.azure.eventprocessorhost._checkpoint
      return:
        type: 075d0a89
    overridden: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.updateCheckpoint(Checkpoint)
  - uid: 'com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.updateCheckpoint(Lease,Checkpoint)'
    id: 'updateCheckpoint(Lease,Checkpoint)'
    parent: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.yml
    langs:
      - java
    name: 'updateCheckpoint(Lease lease, Checkpoint checkpoint)'
    nameWithType: 'InMemoryCheckpointManager.updateCheckpoint(Lease lease, Checkpoint checkpoint)'
    fullName: 'Future<Void> com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.updateCheckpoint(Lease lease, Checkpoint checkpoint)'
    overload: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.updateCheckpoint*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryCheckpointManager.java
      startLine: 165
    package: com.microsoft.azure.eventprocessorhost
    syntax:
      content: 'public Future<Void> updateCheckpoint(Lease lease, Checkpoint checkpoint)'
      parameters:
        - id: lease
          type: com.microsoft.azure.eventprocessorhost._lease
        - id: checkpoint
          type: com.microsoft.azure.eventprocessorhost._checkpoint
      return:
        type: 075d0a89
    overridden: 'com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.updateCheckpoint(Lease,Checkpoint)'
references:
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.InMemoryCheckpointManager*
    name: InMemoryCheckpointManager
    nameWithType: InMemoryCheckpointManager.InMemoryCheckpointManager
    fullName: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.InMemoryCheckpointManager
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.initialize*
    name: initialize
    nameWithType: InMemoryCheckpointManager.initialize
    fullName: void com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.initialize
    package: com.microsoft.azure.eventprocessorhost
  - uid: ec0e250a
    spec.java:
      - name: Future<Boolean>
        fullName: Future<Boolean>
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.checkpointStoreExists*
    name: checkpointStoreExists
    nameWithType: InMemoryCheckpointManager.checkpointStoreExists
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.checkpointStoreExists
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.createCheckpointStoreIfNotExists*
    name: createCheckpointStoreIfNotExists
    nameWithType: InMemoryCheckpointManager.createCheckpointStoreIfNotExists
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.createCheckpointStoreIfNotExists
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.deleteCheckpointStore*
    name: deleteCheckpointStore
    nameWithType: InMemoryCheckpointManager.deleteCheckpointStore
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.deleteCheckpointStore
    package: com.microsoft.azure.eventprocessorhost
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: 9b3030f6com.microsoft.azure.eventprocessorhost._checkpointa08ddfce
    spec.java:
      - name: Future<
        fullName: Future<
      - uid: com.microsoft.azure.eventprocessorhost._checkpoint
        name: Checkpoint
        fullName: com.microsoft.azure.eventprocessorhost.Checkpoint
        href: com.microsoft.azure.eventprocessorhost._checkpoint.yml
      - name: '>'
        fullName: '>'
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.getCheckpoint*
    name: getCheckpoint
    nameWithType: InMemoryCheckpointManager.getCheckpoint
    fullName: Future<Checkpoint> com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.getCheckpoint
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.createCheckpointIfNotExists*
    name: createCheckpointIfNotExists
    nameWithType: InMemoryCheckpointManager.createCheckpointIfNotExists
    fullName: Future<Checkpoint> com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.createCheckpointIfNotExists
    package: com.microsoft.azure.eventprocessorhost
  - uid: 075d0a89
    spec.java:
      - name: Future<Void>
        fullName: Future<Void>
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.updateCheckpoint*
    name: updateCheckpoint
    nameWithType: InMemoryCheckpointManager.updateCheckpoint
    fullName: Future<Void> com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.updateCheckpoint
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_checkpoint_manager.deleteCheckpoint*
    name: deleteCheckpoint
    nameWithType: InMemoryCheckpointManager.deleteCheckpoint
    fullName: Future<Void> com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.deleteCheckpoint
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
    parent: com.microsoft.azure.eventprocessorhost
    href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
    name: ICheckpointManager
    nameWithType: ICheckpointManager
    fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager
    type: Interface
    syntax:
      content: public interface ICheckpointManager
  - uid: com.microsoft.azure.eventprocessorhost._event_processor_host
    parent: com.microsoft.azure.eventprocessorhost
    href: com.microsoft.azure.eventprocessorhost._event_processor_host.yml
    name: EventProcessorHost
    nameWithType: EventProcessorHost
    fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost
    type: Class
    syntax:
      content: public class EventProcessorHost
  - uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.checkpointStoreExists()
    parent: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
    name: checkpointStoreExists()
    nameWithType: ICheckpointManager.checkpointStoreExists()
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ICheckpointManager.checkpointStoreExists()
    type: Method
    syntax:
      content: public Future<Boolean> checkpointStoreExists()
      return:
        type: ec0e250a
  - uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.createCheckpointStoreIfNotExists()
    parent: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
    name: createCheckpointStoreIfNotExists()
    nameWithType: ICheckpointManager.createCheckpointStoreIfNotExists()
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ICheckpointManager.createCheckpointStoreIfNotExists()
    type: Method
    syntax:
      content: public Future<Boolean> createCheckpointStoreIfNotExists()
      return:
        type: ec0e250a
  - uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.deleteCheckpointStore()
    parent: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
    name: deleteCheckpointStore()
    nameWithType: ICheckpointManager.deleteCheckpointStore()
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpointStore()
    type: Method
    summary: |-
      <p><span data-ttu-id="fefaa-103">Nicht verwendet werden, indem <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>, aber eine einfache Funktion, für die Tests verwenden.</span><span class="sxs-lookup"><span data-stu-id="fefaa-103">Not used by <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>, but a convenient function to have for testing.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Boolean> deleteCheckpointStore()
      return:
        type: ec0e250a
        description: '<p><span data-ttu-id="fefaa-104">True, wenn der Prüfpunkt Speicher erfolgreich, "false" ist dies nicht der gelöscht wurde</span><span class="sxs-lookup"><span data-stu-id="fefaa-104">true if the checkpoint store was deleted successfully, false if not</span></span> </p>'
  - uid: com.microsoft.azure.eventprocessorhost._checkpoint
    parent: com.microsoft.azure.eventprocessorhost
    href: com.microsoft.azure.eventprocessorhost._checkpoint.yml
    name: Checkpoint
    nameWithType: Checkpoint
    fullName: com.microsoft.azure.eventprocessorhost.Checkpoint
    type: Class
    summary: "<p><span data-ttu-id=\"fefaa-105\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._checkpoint\" data-throw-if-not-resolved=\"false\">Prüfpunkt</xref> Klasse ist öffentlich, sodass, dass Sie fortgeschrittene Benutzer implementieren können ein <xref uid=\"com.microsoft.azure.eventprocessorhost._i_checkpoint_manager\" data-throw-if-not-resolved=\"false\">ICheckpointManager</xref>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fefaa-105\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._checkpoint\" data-throw-if-not-resolved=\"false\">Checkpoint</xref> class is public so that advanced users can implement an <xref uid=\"com.microsoft.azure.eventprocessorhost._i_checkpoint_manager\" data-throw-if-not-resolved=\"false\">ICheckpointManager</xref>.</span></span> <span data-ttu-id=\"fefaa-106\">Es sei denn, Sie implementieren <xref uid=\"com.microsoft.azure.eventprocessorhost._i_checkpoint_manager\" data-throw-if-not-resolved=\"false\">ICheckpointManager</xref> Sie sollten keine Objekte dieser Klasse direkt behandeln.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fefaa-106\">Unless you are implementing <xref uid=\"com.microsoft.azure.eventprocessorhost._i_checkpoint_manager\" data-throw-if-not-resolved=\"false\">ICheckpointManager</xref> you should not have to deal with objects of this class directly.</span></span> </p>\n\n<p><span data-ttu-id=\"fefaa-107\">Ein <xref uid=\"com.microsoft.azure.eventprocessorhost._checkpoint\" data-throw-if-not-resolved=\"false\">Prüfpunkt</xref> ist im Prinzip nur ein Tupel.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fefaa-107\">A <xref uid=\"com.microsoft.azure.eventprocessorhost._checkpoint\" data-throw-if-not-resolved=\"false\">Checkpoint</xref> is essentially just a tuple.</span></span> <span data-ttu-id=\"fefaa-108\">Er verfügt über eine feste Partitions-Id, zum Zeitpunkt der Erstellung festgelegt und unveränderlich danach und ordnet, die einen Offset/SequenceNumber-Paar gibt eine Position in der Nachrichten in dieser Partition an.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fefaa-108\">It has a fixed partition id, set at creation time and immutable thereafter, and associates that with an offset/sequenceNumber pair which indicates a position within the messages in that partition.</span></span> </p>"
    syntax:
      content: public class Checkpoint
  - uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.getCheckpoint(String)
    parent: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
    name: getCheckpoint(String partitionId)
    nameWithType: ICheckpointManager.getCheckpoint(String partitionId)
    fullName: Future<Checkpoint> com.microsoft.azure.eventprocessorhost.ICheckpointManager.getCheckpoint(String partitionId)
    type: Method
    syntax:
      content: public Future<Checkpoint> getCheckpoint(String partitionId)
      parameters:
        - id: partitionId
          type: '26831127'
      return:
        type: 9b3030f6com.microsoft.azure.eventprocessorhost._checkpointa08ddfce
  - uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.createCheckpointIfNotExists(String)
    parent: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
    name: createCheckpointIfNotExists(String partitionId)
    nameWithType: ICheckpointManager.createCheckpointIfNotExists(String partitionId)
    fullName: Future<Checkpoint> com.microsoft.azure.eventprocessorhost.ICheckpointManager.createCheckpointIfNotExists(String partitionId)
    type: Method
    syntax:
      content: public Future<Checkpoint> createCheckpointIfNotExists(String partitionId)
      parameters:
        - id: partitionId
          type: '26831127'
      return:
        type: 9b3030f6com.microsoft.azure.eventprocessorhost._checkpointa08ddfce
  - uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.updateCheckpoint(Checkpoint)
    parent: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
    name: updateCheckpoint(Checkpoint checkpoint)
    nameWithType: ICheckpointManager.updateCheckpoint(Checkpoint checkpoint)
    fullName: Future<Void> com.microsoft.azure.eventprocessorhost.ICheckpointManager.updateCheckpoint(Checkpoint checkpoint)
    type: Method
    syntax:
      content: public Future<Void> updateCheckpoint(Checkpoint checkpoint)
      parameters:
        - id: checkpoint
          type: com.microsoft.azure.eventprocessorhost._checkpoint
      return:
        type: 075d0a89
  - uid: 'com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.updateCheckpoint(Lease,Checkpoint)'
    parent: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
    name: 'updateCheckpoint(Lease lease, Checkpoint checkpoint)'
    nameWithType: 'ICheckpointManager.updateCheckpoint(Lease lease, Checkpoint checkpoint)'
    fullName: 'Future<Void> com.microsoft.azure.eventprocessorhost.ICheckpointManager.updateCheckpoint(Lease lease, Checkpoint checkpoint)'
    type: Method
    syntax:
      content: 'public Future<Void> updateCheckpoint(Lease lease, Checkpoint checkpoint)'
      parameters:
        - id: lease
          type: com.microsoft.azure.eventprocessorhost._lease
        - id: checkpoint
          type: com.microsoft.azure.eventprocessorhost._checkpoint
      return:
        type: 075d0a89
  - uid: com.microsoft.azure.eventprocessorhost._lease
    parent: com.microsoft.azure.eventprocessorhost
    href: com.microsoft.azure.eventprocessorhost._lease.yml
    name: Lease
    nameWithType: Lease
    fullName: com.microsoft.azure.eventprocessorhost.Lease
    type: Class
    summary: "<p><span data-ttu-id=\"fefaa-109\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">Lease</xref> Klasse ist öffentlich, sodass, dass Sie fortgeschrittene Benutzer implementieren können ein <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\">ILeaseManager</xref>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fefaa-109\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">Lease</xref> class is public so that advanced users can implement an <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\">ILeaseManager</xref>.</span></span> <span data-ttu-id=\"fefaa-110\">Es sei denn, Sie implementieren <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\">ILeaseManager</xref> sollten keine Objekte dieser Klasse zu verarbeiten oder abgeleiteten Klassen direkt.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fefaa-110\">Unless you are implementing <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\">ILeaseManager</xref> you should not have to deal with objects of this class or derived classes directly.</span></span> </p>\n\n<p><span data-ttu-id=\"fefaa-111\">Bei der Implementierung einer <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\">ILeaseManager</xref> es möglicherweise erforderlich sein, leiten Sie von dieser Klasse ausführen, um weitere Informationen und IsExpired zu überschreiben.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fefaa-111\">When implementing an <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\">ILeaseManager</xref> it may be necessary to derive from this class to carry around more information and override isExpired.</span></span> <span data-ttu-id=\"fefaa-112\">Die Datenfelder wurde verlassen haben anstelle von privaten geschützt werden, da sie ein breites Spektrum aufweisen der Getter und Setter (mit Ausnahme der PartitionId, das unveränderlich ist) die bieten einen gleichwertigen Zugriff.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fefaa-112\">The data fields have been left private instead of protected because they have a full set of getters and setters (except partitionId, which is immutable) which provide equivalent access.</span></span> <span data-ttu-id=\"fefaa-113\">Wenn AzureBlobLease zu implementieren, z. B. gab es keine Notwendigkeit mehr Zugriff als der Getter und Setter bereitstellen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fefaa-113\">When implementing AzureBlobLease, for example, there was no need for more access than the getters and setters provide.</span></span> </p>\n<p><span data-ttu-id=\"fefaa-114\">Beachten Sie, dass eine <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">Lease</xref> Objekt enthält nur Informationen zu einer Partition Lease.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fefaa-114\">Note that a <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">Lease</xref> object just carries information about a partition lease.</span></span> <span data-ttu-id=\"fefaa-115\">Die entsprechende Funktionalität zum Abrufen/erneuern/Freigabe eine Lease ist alles auf der <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\">ILeaseManager</xref>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fefaa-115\">The functionality to acquire/renew/release a lease is all on the <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\">ILeaseManager</xref>.</span></span> </p>"
    syntax:
      content: public class Lease
  - uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.deleteCheckpoint(String)
    parent: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
    href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
    name: deleteCheckpoint(String partitionId)
    nameWithType: ICheckpointManager.deleteCheckpoint(String partitionId)
    fullName: Future<Void> com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpoint(String partitionId)
    type: Method
    syntax:
      content: public Future<Void> deleteCheckpoint(String partitionId)
      parameters:
        - id: partitionId
          type: '26831127'
      return:
        type: 075d0a89