### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.actors._actor_service_proxy
    id: _actor_service_proxy
    parent: microsoft.servicefabric.actors
    children:
      - 'microsoft.servicefabric.actors._actor_service_proxy.create(Class<T>,URI,ActorId)'
      - 'microsoft.servicefabric.actors._actor_service_proxy.create(Class<T>,URI,ActorId,String)'
      - 'microsoft.servicefabric.actors._actor_service_proxy.create(Class<T>,URI,long)'
      - 'microsoft.servicefabric.actors._actor_service_proxy.create(Class<T>,URI,long,String)'
      - 'microsoft.servicefabric.actors._actor_service_proxy.create(URI,ActorId)'
      - 'microsoft.servicefabric.actors._actor_service_proxy.create(URI,ActorId,String)'
      - 'microsoft.servicefabric.actors._actor_service_proxy.create(URI,long)'
      - 'microsoft.servicefabric.actors._actor_service_proxy.create(URI,long,String)'
    href: microsoft.servicefabric.actors._actor_service_proxy.yml
    langs:
      - java
    name: ActorServiceProxy
    nameWithType: ActorServiceProxy
    fullName: microsoft.servicefabric.actors.ActorServiceProxy
    type: Class
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
      startLine: 11
    package: microsoft.servicefabric.actors
    summary: '<p>Der Proxy von Clients zum interagieren mit dem Akteur-Dienst im Service Fabric-Cluster ausgeführt, und führen Sie die Ebene Akteur Dienstvorgänge verwendet. </p>'
    syntax:
      content: public class ActorServiceProxy
    inheritance:
      - java.lang.Object
  - uid: 'microsoft.servicefabric.actors._actor_service_proxy.create(Class<T>,URI,ActorId)'
    id: 'create(Class<T>,URI,ActorId)'
    parent: microsoft.servicefabric.actors._actor_service_proxy
    href: microsoft.servicefabric.actors._actor_service_proxy.yml
    langs:
      - java
    name: 'create(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)'
    nameWithType: 'ActorServiceProxy.create(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)'
    fullName: 'static <T extends Service> T microsoft.servicefabric.actors.ActorServiceProxy.create(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)'
    overload: microsoft.servicefabric.actors._actor_service_proxy.create*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
      startLine: 29
    package: microsoft.servicefabric.actors
    summary: |-
      <p>Erstellen eines Proxys für die Akteur-Dienst, der den angegebenen Typ der Akteur und jede Implementierung angegebenen Typ der Dienstschnittstelle gehostet wird.</p>
      <p></p>
    syntax:
      content: 'public static static<T extends Service> T create(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)'
      parameters:
        - id: serviceInterfaceType
          type: ffb09d2d
          description: '<p>Der Dienst-Schnittstellentyp, der vom Akteur Dienst implementiert wird. </p>'
        - id: serviceUri
          type: '62304784'
          description: <p>URI des Diensts Akteur für die Verbindung. </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>Die ID des Akteurs. Der erstellte Proxy wird mit der Partition des hosting mit dieser Id Akteur Akteur-Diensts verbunden sein. </p>
      return:
        type: 1e2c6103microsoft.servicefabric.services.remoting._service21353812
        description: "<p>Ein Dienstobjekt für den Proxy, implementiert <xref uid=\"microsoft.servicefabric.services.remoting.client._service_proxy\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> und<code>&lt;T&gt; \r\n\r\n    </code> . </p>"
  - uid: 'microsoft.servicefabric.actors._actor_service_proxy.create(Class<T>,URI,ActorId,String)'
    id: 'create(Class<T>,URI,ActorId,String)'
    parent: microsoft.servicefabric.actors._actor_service_proxy
    href: microsoft.servicefabric.actors._actor_service_proxy.yml
    langs:
      - java
    name: 'create(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
    nameWithType: 'ActorServiceProxy.create(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
    fullName: 'static <T extends Service> T microsoft.servicefabric.actors.ActorServiceProxy.create(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
    overload: microsoft.servicefabric.actors._actor_service_proxy.create*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
      startLine: 54
    package: microsoft.servicefabric.actors
    summary: |-
      <p>Erstellen eines Proxys für die Akteur-Dienst, der den angegebenen Typ der Akteur und jede Implementierung angegebenen Typ der Dienstschnittstelle gehostet wird.</p>
      <p></p>
    syntax:
      content: 'public static static<T extends Service> T create(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
      parameters:
        - id: serviceInterfaceType
          type: ffb09d2d
          description: '<p>Der Dienst-Schnittstellentyp, der vom Akteur Dienst implementiert wird. </p>'
        - id: serviceUri
          type: '62304784'
          description: <p>URI des Diensts Akteur für die Verbindung. </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>Die ID des Akteurs. Der erstellte Proxy wird mit der Partition des hosting mit dieser Id Akteur Akteur-Diensts verbunden sein. </p>
        - id: listenerName
          type: '26831127'
          description: '<p>Standardmäßig verfügt ein Akteur-Dienst nur einen Listener für eine Verbindung herstellen und Kommunikation mit Clients. Jedoch möglich ist, mehrere Listener einen Akteur-Dienst konfigurieren, gibt der ListenerName-Parameter den Namen des Listeners für die Verbindung an. </p>'
      return:
        type: 1e2c6103microsoft.servicefabric.services.remoting._service21353812
        description: "<p>Ein Dienstobjekt für den Proxy, implementiert <xref uid=\"microsoft.servicefabric.services.remoting.client._service_proxy\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> und<code>&lt;T&gt; \r\n\r\n    </code> . </p>"
  - uid: 'microsoft.servicefabric.actors._actor_service_proxy.create(Class<T>,URI,long)'
    id: 'create(Class<T>,URI,long)'
    parent: microsoft.servicefabric.actors._actor_service_proxy
    href: microsoft.servicefabric.actors._actor_service_proxy.yml
    langs:
      - java
    name: 'create(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)'
    nameWithType: 'ActorServiceProxy.create(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)'
    fullName: 'static <T extends Service> T microsoft.servicefabric.actors.ActorServiceProxy.create(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)'
    overload: microsoft.servicefabric.actors._actor_service_proxy.create*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
      startLine: 78
    package: microsoft.servicefabric.actors
    summary: |-
      <p>Erstellen eines Proxys für die Akteur-Dienst, der den angegebenen Typ der Akteur und jede Implementierung angegebenen Typ der Dienstschnittstelle gehostet wird.</p>
      <p></p>
    syntax:
      content: 'public static static<T extends Service> T create(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)'
      parameters:
        - id: serviceInterfaceType
          type: ffb09d2d
          description: '<p>Der Dienst-Schnittstellentyp, der vom Akteur Dienst implementiert wird. </p>'
        - id: serviceUri
          type: '62304784'
          description: <p>URI des Diensts Akteur für die Verbindung. </p>
        - id: partitionKey
          type: 0364520f
          description: <p>Der Schlüssel des für die Verbindung der Akteur-Dienstpartition. </p>
      return:
        type: 1e2c6103microsoft.servicefabric.services.remoting._service21353812
        description: "<p>Ein Dienstobjekt für den Proxy, implementiert <xref uid=\"microsoft.servicefabric.services.remoting.client._service_proxy\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> und<code>&lt;T&gt; \r\n\r\n    </code> . </p>"
  - uid: 'microsoft.servicefabric.actors._actor_service_proxy.create(Class<T>,URI,long,String)'
    id: 'create(Class<T>,URI,long,String)'
    parent: microsoft.servicefabric.actors._actor_service_proxy
    href: microsoft.servicefabric.actors._actor_service_proxy.yml
    langs:
      - java
    name: 'create(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)'
    nameWithType: 'ActorServiceProxy.create(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)'
    fullName: 'static <T extends Service> T microsoft.servicefabric.actors.ActorServiceProxy.create(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)'
    overload: microsoft.servicefabric.actors._actor_service_proxy.create*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
      startLine: 102
    package: microsoft.servicefabric.actors
    summary: |-
      <p>Erstellen eines Proxys für die Akteur-Dienst, der den angegebenen Typ der Akteur und jede Implementierung angegebenen Typ der Dienstschnittstelle gehostet wird.</p>
      <p></p>
    syntax:
      content: 'public static static<T extends Service> T create(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)'
      parameters:
        - id: serviceInterfaceType
          type: ffb09d2d
          description: '<p>Der Dienst-Schnittstellentyp, der vom Akteur Dienst implementiert wird. </p>'
        - id: serviceUri
          type: '62304784'
          description: <p>URI des Diensts Akteur für die Verbindung. </p>
        - id: partitionKey
          type: 0364520f
          description: <p>Der Schlüssel des für die Verbindung der Akteur-Dienstpartition. </p>
        - id: listenerName
          type: '26831127'
          description: '<p>Standardmäßig verfügt ein Akteur-Dienst nur einen Listener für eine Verbindung herstellen und Kommunikation mit Clients. Jedoch möglich ist, mehrere Listener einen Akteur-Dienst konfigurieren, gibt der ListenerName-Parameter den Namen des Listeners für die Verbindung an. </p>'
      return:
        type: 1e2c6103microsoft.servicefabric.services.remoting._service21353812
        description: "<p>Ein Dienstobjekt für den Proxy, implementiert <xref uid=\"microsoft.servicefabric.services.remoting.client._service_proxy\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> und<code>&lt;T&gt; \r\n\r\n    </code> . </p>"
  - uid: 'microsoft.servicefabric.actors._actor_service_proxy.create(URI,ActorId)'
    id: 'create(URI,ActorId)'
    parent: microsoft.servicefabric.actors._actor_service_proxy
    href: microsoft.servicefabric.actors._actor_service_proxy.yml
    langs:
      - java
    name: 'create(URI serviceUri, ActorId actorId)'
    nameWithType: 'ActorServiceProxy.create(URI serviceUri, ActorId actorId)'
    fullName: 'static ActorService microsoft.servicefabric.actors.ActorServiceProxy.create(URI serviceUri, ActorId actorId)'
    overload: microsoft.servicefabric.actors._actor_service_proxy.create*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
      startLine: 124
    package: microsoft.servicefabric.actors
    summary: |-
      <p>Erstellen eines Proxys für die Akteur-Dienst, der den angegebenen Typ der Akteur und jede Implementierung angegebenen Typ der Dienstschnittstelle gehostet wird.</p>
      <p></p>
    syntax:
      content: 'public static ActorService create(URI serviceUri, ActorId actorId)'
      parameters:
        - id: serviceUri
          type: '62304784'
          description: <p>URI des Diensts Akteur für die Verbindung. </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>Die ID des Akteurs. Der erstellte Proxy wird mit der Partition des hosting mit dieser Id Akteur Akteur-Diensts verbunden sein. </p>
      return:
        type: microsoft.servicefabric.actors._actor_service
        description: '<p>Ein Dienstobjekt für den Proxy, implementiert <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> und <xref uid="microsoft.servicefabric.actors._actor_service" data-throw-if-not-resolved="false">ActorService</xref> Schnittstellen. </p>'
  - uid: 'microsoft.servicefabric.actors._actor_service_proxy.create(URI,ActorId,String)'
    id: 'create(URI,ActorId,String)'
    parent: microsoft.servicefabric.actors._actor_service_proxy
    href: microsoft.servicefabric.actors._actor_service_proxy.yml
    langs:
      - java
    name: 'create(URI serviceUri, ActorId actorId, String listenerName)'
    nameWithType: 'ActorServiceProxy.create(URI serviceUri, ActorId actorId, String listenerName)'
    fullName: 'static ActorService microsoft.servicefabric.actors.ActorServiceProxy.create(URI serviceUri, ActorId actorId, String listenerName)'
    overload: microsoft.servicefabric.actors._actor_service_proxy.create*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
      startLine: 146
    package: microsoft.servicefabric.actors
    summary: |-
      <p>Erstellen eines Proxys für die Akteur-Dienst, der den angegebenen Typ der Akteur und jede Implementierung angegebenen Typ der Dienstschnittstelle gehostet wird.</p>
      <p></p>
    syntax:
      content: 'public static ActorService create(URI serviceUri, ActorId actorId, String listenerName)'
      parameters:
        - id: serviceUri
          type: '62304784'
          description: <p>URI des Diensts Akteur für die Verbindung. </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>Die ID des Akteurs. Der erstellte Proxy wird mit der Partition des hosting mit dieser Id Akteur Akteur-Diensts verbunden sein. </p>
        - id: listenerName
          type: '26831127'
          description: '<p>Standardmäßig verfügt ein Akteur-Dienst nur einen Listener für eine Verbindung herstellen und Kommunikation mit Clients. Jedoch möglich ist, mehrere Listener einen Akteur-Dienst konfigurieren, gibt der ListenerName-Parameter den Namen des Listeners für die Verbindung an. </p>'
      return:
        type: microsoft.servicefabric.actors._actor_service
        description: '<p>Ein Dienstobjekt für den Proxy, implementiert <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> und <xref uid="microsoft.servicefabric.actors._actor_service" data-throw-if-not-resolved="false">ActorService</xref> Schnittstellen. </p>'
  - uid: 'microsoft.servicefabric.actors._actor_service_proxy.create(URI,long)'
    id: 'create(URI,long)'
    parent: microsoft.servicefabric.actors._actor_service_proxy
    href: microsoft.servicefabric.actors._actor_service_proxy.yml
    langs:
      - java
    name: 'create(URI serviceUri, long partitionKey)'
    nameWithType: 'ActorServiceProxy.create(URI serviceUri, long partitionKey)'
    fullName: 'ActorService microsoft.servicefabric.actors.ActorServiceProxy.create(URI serviceUri, long partitionKey)'
    overload: microsoft.servicefabric.actors._actor_service_proxy.create*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
      startLine: 163
    package: microsoft.servicefabric.actors
    summary: |-
      <p>Erstellen eines Proxys für die Akteur-Dienst, der den angegebenen Typ der Akteur und jede Implementierung angegebenen Typ der Dienstschnittstelle gehostet wird.</p>
      <p></p>
    syntax:
      content: 'public ActorService create(URI serviceUri, long partitionKey)'
      parameters:
        - id: serviceUri
          type: '62304784'
          description: <p>URI des Diensts Akteur für die Verbindung. </p>
        - id: partitionKey
          type: 0364520f
          description: <p>Der Schlüssel des für die Verbindung der Akteur-Dienstpartition. </p>
      return:
        type: microsoft.servicefabric.actors._actor_service
        description: '<p>Ein Dienstobjekt für den Proxy, implementiert <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> und <xref uid="microsoft.servicefabric.actors._actor_service" data-throw-if-not-resolved="false">ActorService</xref> Schnittstellen. </p>'
  - uid: 'microsoft.servicefabric.actors._actor_service_proxy.create(URI,long,String)'
    id: 'create(URI,long,String)'
    parent: microsoft.servicefabric.actors._actor_service_proxy
    href: microsoft.servicefabric.actors._actor_service_proxy.yml
    langs:
      - java
    name: 'create(URI serviceUri, long partitionKey, String listenerName)'
    nameWithType: 'ActorServiceProxy.create(URI serviceUri, long partitionKey, String listenerName)'
    fullName: 'ActorService microsoft.servicefabric.actors.ActorServiceProxy.create(URI serviceUri, long partitionKey, String listenerName)'
    overload: microsoft.servicefabric.actors._actor_service_proxy.create*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
      startLine: 184
    package: microsoft.servicefabric.actors
    summary: |-
      <p>Erstellen eines Proxys für die Akteur-Dienst, der den angegebenen Typ der Akteur und jede Implementierung angegebenen Typ der Dienstschnittstelle gehostet wird.</p>
      <p></p>
    syntax:
      content: 'public ActorService create(URI serviceUri, long partitionKey, String listenerName)'
      parameters:
        - id: serviceUri
          type: '62304784'
          description: <p>URI des Diensts Akteur für die Verbindung. </p>
        - id: partitionKey
          type: 0364520f
          description: <p>Der Schlüssel des für die Verbindung der Akteur-Dienstpartition. </p>
        - id: listenerName
          type: '26831127'
          description: '<p>Standardmäßig verfügt ein Akteur-Dienst nur einen Listener für eine Verbindung herstellen und Kommunikation mit Clients. Jedoch möglich ist, mehrere Listener einen Akteur-Dienst konfigurieren, gibt der ListenerName-Parameter den Namen des Listeners für die Verbindung an. </p>'
      return:
        type: microsoft.servicefabric.actors._actor_service
        description: '<p>Ein Dienstobjekt für den Proxy, implementiert <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> und <xref uid="microsoft.servicefabric.actors._actor_service" data-throw-if-not-resolved="false">ActorService</xref> Schnittstellen. </p>'
references:
  - uid: ffb09d2d
    spec.java:
      - name: Class<T>
        fullName: Class<T>
  - uid: '62304784'
    spec.java:
      - name: URI
        fullName: URI
  - uid: 1e2c6103microsoft.servicefabric.services.remoting._service21353812
    spec.java:
      - name: 'static<T extends '
        fullName: 'static<T extends '
      - uid: microsoft.servicefabric.services.remoting._service
        name: Service
        fullName: microsoft.servicefabric.services.remoting.Service
        href: microsoft.servicefabric.services.remoting._service.yml
      - name: '> T'
        fullName: '> T'
  - uid: microsoft.servicefabric.actors._actor_service_proxy.create*
    name: create
    nameWithType: ActorServiceProxy.create
    fullName: static <T extends Service> T microsoft.servicefabric.actors.ActorServiceProxy.create
    package: microsoft.servicefabric.actors
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: 0364520f
    spec.java:
      - name: long
        fullName: long
  - uid: microsoft.servicefabric.services.remoting._service
    parent: microsoft.servicefabric.services.remoting
    href: microsoft.servicefabric.services.remoting._service.yml
    name: Service
    nameWithType: Service
    fullName: microsoft.servicefabric.services.remoting.Service
    type: Interface
    summary: '<p>Dies ist die Markierungsschnittstelle zum Aktivieren von Remoting-Schnittstelle für Dienste. Ein <xref uid="microsoft.servicefabric.services.remoting._service_remoting_listener" data-throw-if-not-resolved="false">ServiceRemotingListener</xref> bietet Remoting für alle Schnittstellen vom Dienst implementiert, die von dieser Schnittstelle ableiten. Die Remoteausführung Schnittstellen können über einen Proxyserver auf dem Client zugegriffen werden. </p>'
    syntax:
      content: public interface Service
  - uid: microsoft.servicefabric.actors._actor_id
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_id.yml
    name: ActorId
    nameWithType: ActorId
    fullName: microsoft.servicefabric.actors.ActorId
    type: Class
    summary: "<p>\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor_id\" data-throw-if-not-resolved=\"false\">Der Akteur-ID</xref> ist die Identität der Akteur innerhalb eines Diensts Akteur. Akteure können festgestellt werden, indem <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.lang.String</xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.UUID</xref> oder lang. </p>"
    syntax:
      content: public class ActorId
  - uid: microsoft.servicefabric.services.remoting.client._service_proxy
    parent: microsoft.servicefabric.services.remoting.client
    href: microsoft.servicefabric.services.remoting.client._service_proxy.yml
    name: ServiceProxy
    nameWithType: ServiceProxy
    fullName: microsoft.servicefabric.services.remoting.client.ServiceProxy
    type: Interface
    summary: <p>Dies ist der Client Side Basisschnittstelle für das Remoting. Das Framework bietet die Infrastruktur für den Remotezugriff für alle Dienstverträge IService durch Vererben <xref uid="microsoft.servicefabric.services.remoting._service_remoting_listener" data-throw-if-not-resolved="false">ServiceRemotingListener</xref> und <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy" data-throw-if-not-resolved="false">ServiceProxy</xref>. </p>
    syntax:
      content: public interface ServiceProxy
  - uid: microsoft.servicefabric.actors._actor_service
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_service.yml
    name: ActorService
    nameWithType: ActorService
    fullName: microsoft.servicefabric.actors.ActorService
    type: Interface
    summary: '<p>Definiert die Schnittstelle enthält Methoden, die zur aufgerufen werden können <xref uid="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false">Akteur</xref> -Dienstebene. </p>'
    syntax:
      content: public interface ActorService extends Service