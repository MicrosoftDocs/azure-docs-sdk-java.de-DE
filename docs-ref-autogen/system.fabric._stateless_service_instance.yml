### YamlMime:ManagedReference
items:
  - uid: system.fabric._stateless_service_instance
    id: _stateless_service_instance
    parent: system.fabric
    children:
      - system.fabric._stateless_service_instance.abort()
      - system.fabric._stateless_service_instance.closeAsync(CancellationToken)
      - system.fabric._stateless_service_instance.initialize(StatelessServiceInitializationParameters)
      - 'system.fabric._stateless_service_instance.openAsync(StatelessServicePartition,CancellationToken)'
    href: system.fabric._stateless_service_instance.yml
    langs:
      - java
    name: StatelessServiceInstance
    nameWithType: StatelessServiceInstance
    fullName: system.fabric.StatelessServiceInstance
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
      startLine: 12
    package: system.fabric
    summary: '<p>Zustandslose Dienste sind diejenigen, bei die kein Zustand aufweisen, die Verwaltung von Service Fabric ist erforderlich. Zustandslose Diensttypen müssen diese Schnittstelle implementieren. </p>'
    syntax:
      content: public interface StatelessServiceInstance
  - uid: system.fabric._stateless_service_instance.abort()
    id: abort()
    parent: system.fabric._stateless_service_instance
    href: system.fabric._stateless_service_instance.yml
    langs:
      - java
    name: abort()
    nameWithType: StatelessServiceInstance.abort()
    fullName: void system.fabric.StatelessServiceInstance.abort()
    overload: system.fabric._stateless_service_instance.abort*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
      startLine: 61
    package: system.fabric
    summary: "<p>Wird dieser Instanz durch Aufruf der synchronen Methode nicht ordnungsgemäß beendet. </p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>Beispiele für geordnete und ungeordnete Abbrüche Beendigung sind Lease Verlust und als Antwort auf den Dienst, die Verwendung von <xref href=\"system.fabric._service_partition.reportFault(FaultType)\" data-throw-if-not-resolved=\"false\"></xref> Bericht eine <ref refid=\"\" kindref=\"compound\">system.fabric.FaultType#Permanent</ref> Fehler. Wenn die Dienstinstanz diese Methode empfängt, sollten sie sofort freigeben und bereinigen Sie alle Verweise und zurückgeben. </p>"
    syntax:
      content: public void abort()
  - uid: system.fabric._stateless_service_instance.closeAsync(CancellationToken)
    id: closeAsync(CancellationToken)
    parent: system.fabric._stateless_service_instance
    href: system.fabric._stateless_service_instance.yml
    langs:
      - java
    name: closeAsync(CancellationToken cancellationToken)
    nameWithType: StatelessServiceInstance.closeAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<?> system.fabric.StatelessServiceInstance.closeAsync(CancellationToken cancellationToken)
    overload: system.fabric._stateless_service_instance.closeAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
      startLine: 50
    package: system.fabric
    summary: |-
      <p>Schließt dieser Dienstinstanz ordnungsgemäß, wenn die Dienstinstanz heruntergefahren wird.</p>
      <p></p>
    syntax:
      content: public CompletableFuture<?> closeAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref href=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\"></xref>Objekt, das den Status der Abbruch des Vorgangs anzugeben. </p>"
      return:
        type: 16409f84
        description: <p>Gibt <ref refid="" kindref="compound">CompletableFuture</ref>. </p>
  - uid: system.fabric._stateless_service_instance.initialize(StatelessServiceInitializationParameters)
    id: initialize(StatelessServiceInitializationParameters)
    parent: system.fabric._stateless_service_instance
    href: system.fabric._stateless_service_instance.yml
    langs:
      - java
    name: initialize(StatelessServiceInitializationParameters initializationParameters)
    nameWithType: StatelessServiceInstance.initialize(StatelessServiceInitializationParameters initializationParameters)
    fullName: void system.fabric.StatelessServiceInstance.initialize(StatelessServiceInitializationParameters initializationParameters)
    overload: system.fabric._stateless_service_instance.initialize*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
      startLine: 19
    package: system.fabric
    summary: |-
      <p>Initialisiert eine neue Dienstinstanz.</p>
      <p></p>
    syntax:
      content: public void initialize(StatelessServiceInitializationParameters initializationParameters)
      parameters:
        - id: initializationParameters
          type: system.fabric._stateless_service_initialization_parameters
          description: <p>Die <xref href="system.fabric._stateless_service_initialization_parameters" data-throw-if-not-resolved="false"></xref> für diesen Dienst. </p>
  - uid: 'system.fabric._stateless_service_instance.openAsync(StatelessServicePartition,CancellationToken)'
    id: 'openAsync(StatelessServicePartition,CancellationToken)'
    parent: system.fabric._stateless_service_instance
    href: system.fabric._stateless_service_instance.yml
    langs:
      - java
    name: 'openAsync(StatelessServicePartition partition, CancellationToken cancellationToken)'
    nameWithType: 'StatelessServiceInstance.openAsync(StatelessServicePartition partition, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<String> system.fabric.StatelessServiceInstance.openAsync(StatelessServicePartition partition, CancellationToken cancellationToken)'
    overload: system.fabric._stateless_service_instance.openAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
      startLine: 40
    package: system.fabric
    summary: "<p>Wird eine initialisierten-Dienstinstanz geöffnet, sodass es von Clients kontaktiert werden kann.</p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold>öffnen eine zustandslose Instanzdienst gibt an, dass der Dienst jetzt aufgelöst werden kann und durch den Dienst für Clients sichtbar ist. Die Zeichenfolge, die zurückgegeben wird, ist die Adresse dieser Dienstinstanz. Die Adresse der Dienstname über naming Service Fabric zugeordnet und für Clients, die den Dienst über beheben zurückgegeben <ref refid=\"\" kindref=\"compound\">system.fabric.ServiceManagementClient#resolveServicePartitionAsync(java.net.URI)</ref></p>"
    syntax:
      content: 'public CompletableFuture<String> openAsync(StatelessServicePartition partition, CancellationToken cancellationToken)'
      parameters:
        - id: partition
          type: system.fabric._stateless_service_partition
          description: '<p>Die <xref href="system.fabric._stateless_service_partition" data-throw-if-not-resolved="false"></xref> , die dieser Instanz zugeordnet ist </p>'
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref href=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\"></xref>Objekt, das den Status der Abbruch des Vorgangs anzugeben. </p>"
      return:
        type: 06be942d
        description: <p>Gibt <ref refid="" kindref="compound">CompletableFuture</ref> des Typs <ref refid="" kindref="compound">java.lang.String</ref>. </p>
references:
  - uid: system.fabric._stateless_service_instance.initialize*
    name: initialize
    nameWithType: StatelessServiceInstance.initialize
    fullName: void system.fabric.StatelessServiceInstance.initialize
    package: system.fabric
  - uid: 06be942d
    spec.java:
      - name: CompletableFuture<String>
        fullName: CompletableFuture<String>
  - uid: system.fabric._stateless_service_instance.openAsync*
    name: openAsync
    nameWithType: StatelessServiceInstance.openAsync
    fullName: CompletableFuture<String> system.fabric.StatelessServiceInstance.openAsync
    package: system.fabric
  - uid: 16409f84
    spec.java:
      - name: CompletableFuture<?>
        fullName: CompletableFuture<?>
  - uid: system.fabric._stateless_service_instance.closeAsync*
    name: closeAsync
    nameWithType: StatelessServiceInstance.closeAsync
    fullName: CompletableFuture<?> system.fabric.StatelessServiceInstance.closeAsync
    package: system.fabric
  - uid: system.fabric._stateless_service_instance.abort*
    name: abort
    nameWithType: StatelessServiceInstance.abort
    fullName: void system.fabric.StatelessServiceInstance.abort
    package: system.fabric
  - uid: microsoft.servicefabric.services.runtime._stateless_service_instance_adapter
  - uid: system.fabric._stateless_service_initialization_parameters
    parent: system.fabric
    href: system.fabric._stateless_service_initialization_parameters.yml
    name: StatelessServiceInitializationParameters
    nameWithType: StatelessServiceInitializationParameters
    fullName: system.fabric.StatelessServiceInitializationParameters
    type: Class
    summary: <p>Definiert die Dienst-Initialisierungsparameter für eines zustandslosen Diensts. </p>
    syntax:
      content: public class StatelessServiceInitializationParameters extends ServiceInitializationParameters
  - uid: system.fabric._stateless_service_partition
    parent: system.fabric
    href: system.fabric._stateless_service_partition.yml
    name: StatelessServicePartition
    nameWithType: StatelessServicePartition
    fullName: system.fabric.StatelessServicePartition
    type: Interface
    summary: "<p>Stellt eine Partition, die einer zustandslosen Dienstinstanz zugeordnet ist. </p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>bereitgestellt, um eines zustandslosen Diensts als Parameter an die <xref href=\"system.fabric._service_partition\" data-throw-if-not-resolved=\"false\"></xref>. </p>"
    syntax:
      content: public interface StatelessServicePartition
  - uid: system.fabric._cancellation_token
    parent: system.fabric
    href: system.fabric._cancellation_token.yml
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: system.fabric.CancellationToken
    type: Class
    summary: '<p>Ein <xref href="system.fabric._cancellation_token" data-throw-if-not-resolved="false"></xref> wird verwendet, um die Benachrichtigung verteilt wird, dass Vorgänge abgebrochen werden sollen. Sie erstellen ein Abbruchtoken, das durch die Instanziierung einer <xref href="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false"></xref> -Objekt, das Abbruchtoken verwaltet entnommen seine <xref href="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false"></xref> Methode. Übergeben Sie dann das Abbruchtoken, das auf eine beliebige Anzahl von Vorgängen, die Nachricht vom Abbruch erhalten soll. Das Token kann nicht verwendet werden, um den Abbruch zu initiieren. Wenn das besitzende Objekt aufruft <xref href="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false"></xref>, auf das Abbruchtoken, das die abgebrochene Eigenschaft festgelegt ist auf "true". Die Objekte, die die Benachrichtigung empfangen können Antworten Verfolgungsinformationen geeignet ist. </p>'
    syntax:
      content: public class CancellationToken
  - uid: system.fabric._service_partition.reportFault(FaultType)
    parent: system.fabric._service_partition
    href: system.fabric._service_partition.yml
    name: reportFault(FaultType faultType)
    nameWithType: ServicePartition.reportFault(FaultType faultType)
    fullName: void system.fabric.ServicePartition.reportFault(FaultType faultType)
    type: Method
    summary: "<p>Meldet die Last für einen Satz von Metriken für den Lastenausgleich. Die Auslastung kann zu einem beliebigen Zeitpunkt über gemeldet werden die <ref refid=\"\" kindref=\"compound\">java.util.Collection</ref> von <xref href=\"system.fabric._load_metric\" data-throw-if-not-resolved=\"false\"></xref> Methode und stellt eine oder mehrere Eigenschaften von der <xref href=\"system.fabric._load_metric\" data-throw-if-not-resolved=\"false\"></xref> Methode.</p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold>ein Fehler wird i. d. r. gemeldet, wenn der Dienstcode erkennt einige ausstellen, von denen nicht wiederhergestellt werden kann. </p>"
    syntax:
      content: public void reportFault(FaultType faultType)
      parameters:
        - id: faultType
          type: system.fabric._fault_type
          description: '<p>Die <xref href="system.fabric._load_metric" data-throw-if-not-resolved="false"></xref> , die der Dienst aufgetreten sind. </p>'