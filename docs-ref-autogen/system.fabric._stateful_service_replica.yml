### YamlMime:ManagedReference
items:
  - uid: system.fabric._stateful_service_replica
    id: _stateful_service_replica
    parent: system.fabric
    children:
      - system.fabric._stateful_service_replica.abort()
      - 'system.fabric._stateful_service_replica.changeRoleAsync(ReplicaRole,CancellationToken)'
      - system.fabric._stateful_service_replica.closeAsync(CancellationToken)
      - system.fabric._stateful_service_replica.initialize(StatefulServiceInitializationParameters)
      - 'system.fabric._stateful_service_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    href: system.fabric._stateful_service_replica.yml
    langs:
      - java
    name: StatefulServiceReplica
    nameWithType: StatefulServiceReplica
    fullName: system.fabric.StatefulServiceReplica
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServiceReplica.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServiceReplica.java
      startLine: 17
    package: system.fabric
    summary: "<p>Definiert das Verhalten, die den Lebenszyklus eines Replikats, z. B. starten, Initialisierung, rollenänderungen und Herunterfahren bestimmt. </p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold>zustandsbehaftete Diensttypen müssen diese Schnittstelle implementieren. Die Logik der einen zustandsbehafteten Diensttyp enthält, die auf primären Replikaten aufgerufen wird und Verhalten, die auf sekundären Replikaten aufgerufen wird. Wenn dienstautor vornehmen möchte mithilfe des bereitgestellten <xref href=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\"></xref>, und klicken Sie dann der Dienst, auch implementieren muss <xref href=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\"></xref> verwenden Sie die Implementierung der <xref href=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\"></xref> , die vom bereitgestellt<xref href=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\"></xref></p>"
    syntax:
      content: public interface StatefulServiceReplica
  - uid: system.fabric._stateful_service_replica.abort()
    id: abort()
    parent: system.fabric._stateful_service_replica
    href: system.fabric._stateful_service_replica.yml
    langs:
      - java
    name: abort()
    nameWithType: StatefulServiceReplica.abort()
    fullName: void system.fabric.StatefulServiceReplica.abort()
    overload: system.fabric._stateful_service_replica.abort*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServiceReplica.java
      startLine: 93
    package: system.fabric
    summary: "<p>Nicht ordnungsgemäß beendet eine Instanz ein. </p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>Verlust leasen und als Antwort auf den Dienst, die Verwendung von <xref href=\"system.fabric._service_partition.reportFault(FaultType)\" data-throw-if-not-resolved=\"false\"></xref> Bericht eine <ref refid=\"\" kindref=\"compound\">system.fabric.FaultType#Permanent</ref> Fehler finden Sie Beispiele für geordnete und ungeordnete Abbrüche Beendigung. Wenn diese Methode aufgerufen wird, sollten die Dienstinstanz sofort freigeben und bereinigen Sie alle Verweise und zurückgeben. </p>"
    syntax:
      content: public void abort()
  - uid: 'system.fabric._stateful_service_replica.changeRoleAsync(ReplicaRole,CancellationToken)'
    id: 'changeRoleAsync(ReplicaRole,CancellationToken)'
    parent: system.fabric._stateful_service_replica
    href: system.fabric._stateful_service_replica.yml
    langs:
      - java
    name: 'changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    nameWithType: 'StatefulServiceReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<String> system.fabric.StatefulServiceReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    overload: system.fabric._stateful_service_replica.changeRoleAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServiceReplica.java
      startLine: 70
    package: system.fabric
    summary: "<p>Ändert die Rolle eines primären oder sekundären Replikats an.</p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold>die neue Rolle wird als Parameter angegeben. Wenn die Dienst-Übergänge in die neue Rolle, verfügt der Dienst eine Möglichkeit, ihre aktuellen abhöradresse zu aktualisieren. Die abhöradresse ist die Adresse, in denen Clients herstellen. Dies ermöglicht dem Dienst wird ein primäres Replikat, Anspruch nur einige Ressourcen wie z. B. Ports aus, bei der Kommunikation von Clients erwartet wird. </p>"
    syntax:
      content: 'public CompletableFuture<String> changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
      parameters:
        - id: newRole
          type: system.fabric._replica_role
          description: '<p>Die aktualisierte <xref href="system.fabric._replica_role" data-throw-if-not-resolved="false"></xref> , die dieses Replikat zum übergehen soll. </p>'
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref href=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\"></xref>Objekt, das den Status der Abbruch des Vorgangs anzugeben. </p>"
      return:
        type: 06be942d
        description: '<p>Gibt <ref refid="" kindref="compound">CompletableFuture</ref> des Typs <ref refid="" kindref="compound">java.lang.String</ref>, das ermittelt€™ s neue Adresse für die Verbindung, die über die Benennung von Service Fabric-Replikat zugeordnet werden soll. </p>'
  - uid: system.fabric._stateful_service_replica.closeAsync(CancellationToken)
    id: closeAsync(CancellationToken)
    parent: system.fabric._stateful_service_replica
    href: system.fabric._stateful_service_replica.yml
    langs:
      - java
    name: closeAsync(CancellationToken cancellationToken)
    nameWithType: StatefulServiceReplica.closeAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<Void> system.fabric.StatefulServiceReplica.closeAsync(CancellationToken cancellationToken)
    overload: system.fabric._stateful_service_replica.closeAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServiceReplica.java
      startLine: 81
    package: system.fabric
    summary: |-
      <p>Schließt die dienstreplikats an, wenn er heruntergefahren wird. Beachten Sie, dass der Abbruch advisory ist und weiterhin der Vorgang abgeschlossen werden kann, selbst wenn er abgebrochen wird.</p>
      <p></p>
    syntax:
      content: public CompletableFuture<Void> closeAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref href=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\"></xref>Objekt, das den Status der Abbruch des Vorgangs anzugeben. </p>"
      return:
        type: db03ee24
        description: <p>Gibt <ref refid="" kindref="compound">CompletableFuture</ref>. </p>
  - uid: system.fabric._stateful_service_replica.initialize(StatefulServiceInitializationParameters)
    id: initialize(StatefulServiceInitializationParameters)
    parent: system.fabric._stateful_service_replica
    href: system.fabric._stateful_service_replica.yml
    langs:
      - java
    name: initialize(StatefulServiceInitializationParameters initializationParameters)
    nameWithType: StatefulServiceReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
    fullName: void system.fabric.StatefulServiceReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
    overload: system.fabric._stateful_service_replica.initialize*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServiceReplica.java
      startLine: 24
    package: system.fabric
    summary: |-
      <p>Initialisiert eine neu erstellte dienstreplikats an.</p>
      <p></p>
    syntax:
      content: public void initialize(StatefulServiceInitializationParameters initializationParameters)
      parameters:
        - id: initializationParameters
          type: system.fabric._stateful_service_initialization_parameters
          description: <p>Die <xref href="system.fabric._stateful_service_initialization_parameters" data-throw-if-not-resolved="false"></xref> für dieses Replikat. </p>
  - uid: 'system.fabric._stateful_service_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    id: 'openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    parent: system.fabric._stateful_service_replica
    href: system.fabric._stateful_service_replica.yml
    langs:
      - java
    name: 'openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    nameWithType: 'StatefulServiceReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<Replicator> system.fabric.StatefulServiceReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    overload: system.fabric._stateful_service_replica.openAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServiceReplica.java
      startLine: 46
    package: system.fabric
    summary: |-
      <p>Wird ein initialisierter dienstreplikats geöffnet, sodass zusätzliche Aktionen ausgeführt werden können.</p>
      <p></p>
    syntax: &ref_1
      content: 'public CompletableFuture<Replicator> openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
      parameters:
        - id: openMode
          type: system.fabric._replica_open_mode
          description: '<p>Dies unterstützt die Service Fabric-Infrastruktur und ist nicht vorgesehen, direkt aus Ihrem Code verwendet werden. </p>'
        - id: partition
          type: system.fabric._stateful_service_partition
          description: <p>Die <xref href="system.fabric._stateful_service_partition" data-throw-if-not-resolved="false"></xref> Informationen für dieses Replikat. </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref href=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\"></xref>Objekt, das den Status der Abbruch des Vorgangs anzugeben. </p>"
      return:
        type: 9cdf14d0system.fabric._replicatora08ddfce
        description: '<p>Gibt <ref refid="" kindref="compound">CompletableFuture</ref>&lt;<xref href="system.fabric._replicator" data-throw-if-not-resolved="false"></xref>&gt;, <xref href="system.fabric._replicator" data-throw-if-not-resolved="false"></xref> , das von der zustandsbehaftete Dienst verwendet wird. Verwenden Sie die Service Fabric-Implementierung in <xref href="system.fabric._stateful_service_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)" data-throw-if-not-resolved="false"></xref> , sollte das Replikat Zurückgeben einer <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref> abgerufener<xref href="system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)" data-throw-if-not-resolved="false"></xref></p>'
references:
  - uid: system.fabric._stateful_service_replica.initialize*
    name: initialize
    nameWithType: StatefulServiceReplica.initialize
    fullName: void system.fabric.StatefulServiceReplica.initialize
    package: system.fabric
  - uid: 9cdf14d0system.fabric._replicatora08ddfce
    spec.java:
      - name: CompletableFuture<
        fullName: CompletableFuture<
      - uid: system.fabric._replicator
        name: Replicator
        fullName: system.fabric.Replicator
        href: system.fabric._replicator.yml
      - name: '>'
        fullName: '>'
  - uid: system.fabric._stateful_service_replica.openAsync*
    name: openAsync
    nameWithType: StatefulServiceReplica.openAsync
    fullName: CompletableFuture<Replicator> system.fabric.StatefulServiceReplica.openAsync
    package: system.fabric
  - uid: 06be942d
    spec.java:
      - name: CompletableFuture<String>
        fullName: CompletableFuture<String>
  - uid: system.fabric._stateful_service_replica.changeRoleAsync*
    name: changeRoleAsync
    nameWithType: StatefulServiceReplica.changeRoleAsync
    fullName: CompletableFuture<String> system.fabric.StatefulServiceReplica.changeRoleAsync
    package: system.fabric
  - uid: db03ee24
    spec.java:
      - name: CompletableFuture<Void>
        fullName: CompletableFuture<Void>
  - uid: system.fabric._stateful_service_replica.closeAsync*
    name: closeAsync
    nameWithType: StatefulServiceReplica.closeAsync
    fullName: CompletableFuture<Void> system.fabric.StatefulServiceReplica.closeAsync
    package: system.fabric
  - uid: system.fabric._stateful_service_replica.abort*
    name: abort
    nameWithType: StatefulServiceReplica.abort
    fullName: void system.fabric.StatefulServiceReplica.abort
    package: system.fabric
  - uid: microsoft.servicefabric.services.runtime._stateful_service_replica_adapter
  - uid: system.fabric._key_value_store_replica
    parent: system.fabric
    href: system.fabric._key_value_store_replica.yml
    name: KeyValueStoreReplica
    nameWithType: KeyValueStoreReplica
    fullName: system.fabric.KeyValueStoreReplica
    type: Class
    summary: '<p>Stellt einem Transaktions-, replizierte, assoziative Datenspeicher für Dienst Writer â €"für die Integration in jeder Service Fabric-Dienst bereit. </p>'
    syntax:
      content: public class KeyValueStoreReplica implements StatefulServiceReplica
  - uid: system.fabric._key_value_store_replica.initialize(StatefulServiceInitializationParameters)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    name: initialize(StatefulServiceInitializationParameters initializationParameters)
    nameWithType: KeyValueStoreReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
    fullName: void system.fabric.KeyValueStoreReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
    type: Method
    summary: "<p>Initialisiert das Replikat als Vorbereitung für das Öffnen.</p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>muss diese Methode nicht explizit aufgerufen werden, wenn das Replikat für die Anwendung abgeleitet <ref refid=\"\" kindref=\"compound\">system.fabric.KeyValueStoreReplica</ref>, dies ist das empfohlene Muster. In diesem Fall sollte die anwendungsreplikaten überschreiben <ref refid=\"\" kindref=\"compound\">system.fabric.KeyValueStoreReplica#onInitialize(system.fabric.StatefulServiceInitializationParameters)</ref> stattdessen. </p>"
    syntax:
      content: public void initialize(StatefulServiceInitializationParameters initializationParameters)
      parameters:
        - id: initializationParameters
          type: system.fabric._stateful_service_initialization_parameters
          description: <p>Die Initialisierungsinformationen für das Replikat. </p>
  - uid: system.fabric._stateful_service_initialization_parameters
    parent: system.fabric
    href: system.fabric._stateful_service_initialization_parameters.yml
    name: StatefulServiceInitializationParameters
    nameWithType: StatefulServiceInitializationParameters
    fullName: system.fabric.StatefulServiceInitializationParameters
    type: Class
    summary: <p>Definiert die Dienst-Initialisierungsparameter für ein zustandsbehafteter Dienst. </p>
    syntax:
      content: public class StatefulServiceInitializationParameters extends ServiceInitializationParameters
  - uid: system.fabric._replicator
    parent: system.fabric
    href: system.fabric._replicator.yml
    name: Replicator
    nameWithType: Replicator
    fullName: system.fabric.Replicator
    type: Interface
    syntax:
      content: public interface Replicator extends PrimaryReplicator
  - uid: 'system.fabric._key_value_store_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    name: 'openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    nameWithType: 'KeyValueStoreReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<Replicator> system.fabric.KeyValueStoreReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    type: Method
    summary: "<p>Öffnet das Replikat als auch ihre Replikator als Vorbereitung für die in einer Replikatgruppe online geschaltet.</p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>muss diese Methode nicht explizit aufgerufen werden, wenn das Replikat für die Anwendung abgeleitet <ref refid=\"\" kindref=\"compound\">system.fabric.KeyValueStoreReplica</ref>, dies ist das empfohlene Muster. In diesem Fall sollte die anwendungsreplikaten OnOpenAsync stattdessen außer Kraft setzen. </p>"
    syntax:
      content: 'public CompletableFuture<Replicator> openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
      parameters:
        - id: openMode
          type: system.fabric._replica_open_mode
          description: '<p>Gibt an, dass der Kontext, unter dem das Replikat beginnen wird, geöffnet. </p>'
        - id: partition
          type: system.fabric._stateful_service_partition
          description: <p>Enthält Informationen zur Beschreibung der Replikatgruppe zu dem das Replikat gehört. </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref href=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\"></xref>Objekt, das den Status der Abbruch des Vorgangs anzugeben. </p>"
      return:
        type: 9cdf14d0system.fabric._replicatora08ddfce
        description: '<p>Eine CompletableFuture an, dass der Abschluss der geöffneten <ref refid="" kindref="compound">java.util.concurrent.CompletableFuture</ref>. </p>'
  - uid: system.fabric._replica_open_mode
    parent: system.fabric
    href: system.fabric._replica_open_mode.yml
    name: ReplicaOpenMode
    nameWithType: ReplicaOpenMode
    fullName: system.fabric.ReplicaOpenMode
    type: Enum
    syntax:
      content: public enum ReplicaOpenMode
  - uid: system.fabric._stateful_service_partition
    parent: system.fabric
    href: system.fabric._stateful_service_partition.yml
    name: StatefulServicePartition
    nameWithType: StatefulServicePartition
    fullName: system.fabric.StatefulServicePartition
    type: Interface
    syntax:
      content: public interface StatefulServicePartition extends ServicePartition
  - uid: system.fabric._cancellation_token
    parent: system.fabric
    href: system.fabric._cancellation_token.yml
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: system.fabric.CancellationToken
    type: Class
    summary: '<p>Ein <xref href="system.fabric._cancellation_token" data-throw-if-not-resolved="false"></xref> wird verwendet, um die Benachrichtigung verteilt wird, dass Vorgänge abgebrochen werden sollen. Sie erstellen ein Abbruchtoken, das durch die Instanziierung einer <xref href="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false"></xref> -Objekt, das Abbruchtoken verwaltet entnommen seine <xref href="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false"></xref> Methode. Übergeben Sie dann das Abbruchtoken, das auf eine beliebige Anzahl von Vorgängen, die Nachricht vom Abbruch erhalten soll. Das Token kann nicht verwendet werden, um den Abbruch zu initiieren. Wenn das besitzende Objekt aufruft <xref href="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false"></xref>, auf das Abbruchtoken, das die abgebrochene Eigenschaft festgelegt ist auf "true". Die Objekte, die die Benachrichtigung empfangen können Antworten Verfolgungsinformationen geeignet ist. </p>'
    syntax:
      content: public class CancellationToken
  - uid: 'system.fabric._stateful_service_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    parent: system.fabric._stateful_service_replica
    href: system.fabric._stateful_service_replica.yml
    name: 'openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    nameWithType: 'StatefulServiceReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<Replicator> system.fabric.StatefulServiceReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    type: Method
    summary: |-
      <p>Wird ein initialisierter dienstreplikats geöffnet, sodass zusätzliche Aktionen ausgeführt werden können.</p>
      <p></p>
    syntax: *ref_1
  - uid: system.fabric._fabric_replicator
    parent: system.fabric
    href: system.fabric._fabric_replicator.yml
    name: FabricReplicator
    nameWithType: FabricReplicator
    fullName: system.fabric.FabricReplicator
    type: Class
    summary: "<p>Repliziert den Status für hohe Verfügbarkeit und Zuverlässigkeit. </p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>stellt die Standardimplementierung von der <xref href=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"system.fabric._replicator\" data-throw-if-not-resolved=\"false\"></xref>, und <xref href=\"system.fabric._primary_replicator\" data-throw-if-not-resolved=\"false\"></xref> Schnittstellen, die Benutzerdienste werden, zusammen mit ihrer Implementierung von verwendet können der <xref href=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\"></xref> Schnittstelle. Eine Instanz von der <ref refid=\"\" kindref=\"compound\">system.fabric.FabricReplicator</ref> Klasse abgerufen wird, über die <xref href=\"system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\"></xref> -Methode, die in umgewandelt werden kann <xref href=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\"></xref> für die Verwendung. </p>"
    syntax:
      content: public class FabricReplicator implements Replicator
  - uid: 'system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)'
    parent: system.fabric._stateful_service_partition
    href: system.fabric._stateful_service_partition.yml
    name: 'createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)'
    nameWithType: 'StatefulServicePartition.createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)'
    fullName: 'FabricReplicator system.fabric.StatefulServicePartition.createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)'
    type: Method
    summary: "<p>Erstellt eine <xref href=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\"></xref> mit den angegebenen Einstellungen und gibt ihn an das Replikat zurück.</p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>zur Erstellung sollte diese Methode verwendet eine <xref href=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\"></xref> Service als die <xref href=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\"></xref> für ein zustandsbehafteter Dienst, der implementiert <xref href=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\"></xref>. </p>"
    syntax:
      content: 'public FabricReplicator createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)'
      parameters:
        - id: stateProvider
          type: system.fabric._state_provider
          description: '<p>Die <xref href="system.fabric._state_provider" data-throw-if-not-resolved="false"></xref> mit dem zurückgegebenen <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref> verknüpft werden sollen. Dies ist häufig das gleiche Objekt, das implementiert <xref href="system.fabric._stateful_service_replica" data-throw-if-not-resolved="false"></xref>, jedoch bestimmte Dienste möglicherweise anders behandelt werden. </p>'
        - id: replicatorSettings
          type: system.fabric._replicator_settings
          description: "<p>\r\n\r\n  <xref href=\"system.fabric._replicator_settings\" data-throw-if-not-resolved=\"false\"></xref>mit dem zurückgegebenen <xref href=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\"></xref> muss konfiguriert werden. </p>"
      return:
        type: system.fabric._fabric_replicator
        description: <p>Gibt <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref>. </p>
  - uid: 'system.fabric._key_value_store_replica.changeRoleAsync(ReplicaRole,CancellationToken)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    name: 'changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    nameWithType: 'KeyValueStoreReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<String> system.fabric.KeyValueStoreReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    type: Method
    summary: "<p>Ändert die replikatrolle, der das Replikat als auch ihre Replikator an.</p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>muss diese Methode nicht explizit aufgerufen werden, wenn das Replikat für die Anwendung abgeleitet <ref refid=\"\" kindref=\"compound\">system.fabric.KeyValueStoreReplica</ref>, dies ist das empfohlene Muster. In diesem Fall sollte die anwendungsreplikaten überschreiben <xref href=\"system.fabric._key_value_store_replica.onChangeRoleAsync(ReplicaRole,CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> stattdessen. </p>"
    syntax:
      content: 'public CompletableFuture<String> changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
      parameters:
        - id: newRole
          type: system.fabric._replica_role
          description: <p>Die replikatrolle Ziel. </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref href=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\"></xref>Objekt, das den Status der Abbruch des Vorgangs anzugeben. </p>"
      return:
        type: 06be942d
        description: '<p>Eine Aufgabe, deren Ergebnis die Adresse für dieses Replikat ist. </p>'
  - uid: system.fabric._replica_role
    parent: system.fabric
    href: system.fabric._replica_role.yml
    name: ReplicaRole
    nameWithType: ReplicaRole
    fullName: system.fabric.ReplicaRole
    type: Enum
    syntax:
      content: public enum ReplicaRole
  - uid: system.fabric._key_value_store_replica.closeAsync(CancellationToken)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    name: closeAsync(CancellationToken cancellationToken)
    nameWithType: KeyValueStoreReplica.closeAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<Void> system.fabric.KeyValueStoreReplica.closeAsync(CancellationToken cancellationToken)
    type: Method
    summary: "<p>Schließt das Replikat und ihre Replikator Vorbereitung aus einem Replikatsatz offline geschaltet. Derzeit wird nicht verwendet. Für zukünftige Verwendung reserviert.</p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold>das Replikat nicht zwangsläufig entfernt dauerhaft aus dem Replikatsatz und können zu einem späteren Zeitpunkt erneut geöffnet werden. Die häufigsten Ursachen für das Schließen eines Replikats ist als Vorbereitung für das Upgrade oder Lastenausgleich ein ordnungsgemäßes Herunterfahren. Diese Methode muss nicht explizit aufgerufen werden, wenn das Replikat für die Anwendung abgeleitet <ref refid=\"\" kindref=\"compound\">system.fabric.KeyValueStoreReplica</ref>, dies ist das empfohlene Muster. In diesem Fall sollte die anwendungsreplikaten überschreiben <xref href=\"system.fabric._key_value_store_replica.onCloseAsync(CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> stattdessen. </p>"
    syntax:
      content: public CompletableFuture<Void> closeAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref href=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\"></xref>Objekt, das den Status der Abbruch des Vorgangs anzugeben. </p>"
      return:
        type: db03ee24
        description: '<p>Eine Aufgabe, die den asynchronen Vorgang darstellt. </p>'
  - uid: system.fabric._key_value_store_replica.abort()
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    name: abort()
    nameWithType: KeyValueStoreReplica.abort()
    fullName: void system.fabric.KeyValueStoreReplica.abort()
    type: Method
    summary: <p>Bricht diese Instanz die <ref refid="" kindref="compound">system.fabric.KeyValueStoreReplica</ref> Klasse. </p>
    syntax:
      content: public void abort()
  - uid: system.fabric._service_partition.reportFault(FaultType)
    parent: system.fabric._service_partition
    href: system.fabric._service_partition.yml
    name: reportFault(FaultType faultType)
    nameWithType: ServicePartition.reportFault(FaultType faultType)
    fullName: void system.fabric.ServicePartition.reportFault(FaultType faultType)
    type: Method
    summary: "<p>Meldet die Last für einen Satz von Metriken für den Lastenausgleich. Die Auslastung kann zu einem beliebigen Zeitpunkt über gemeldet werden die <ref refid=\"\" kindref=\"compound\">java.util.Collection</ref> von <xref href=\"system.fabric._load_metric\" data-throw-if-not-resolved=\"false\"></xref> Methode und stellt eine oder mehrere Eigenschaften von der <xref href=\"system.fabric._load_metric\" data-throw-if-not-resolved=\"false\"></xref> Methode.</p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold>ein Fehler wird i. d. r. gemeldet, wenn der Dienstcode erkennt einige ausstellen, von denen nicht wiederhergestellt werden kann. </p>"
    syntax:
      content: public void reportFault(FaultType faultType)
      parameters:
        - id: faultType
          type: system.fabric._fault_type
          description: '<p>Die <xref href="system.fabric._load_metric" data-throw-if-not-resolved="false"></xref> , die der Dienst aufgetreten sind. </p>'
  - uid: system.fabric._state_provider
    parent: system.fabric
    href: system.fabric._state_provider.yml
    name: StateProvider
    nameWithType: StateProvider
    fullName: system.fabric.StateProvider
    type: Interface
    summary: '<p>Definiert das Verhalten, das ein Dienst implementieren muss, um die Interaktion mit der <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref>. </p>'
    syntax:
      content: public interface StateProvider
  - uid: system.fabric._state_replicator
    parent: system.fabric
    href: system.fabric._state_replicator.yml
    name: StateReplicator
    nameWithType: StateReplicator
    fullName: system.fabric.StateReplicator
    type: Interface
    syntax:
      content: public interface StateReplicator