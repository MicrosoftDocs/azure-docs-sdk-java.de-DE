### YamlMime:ManagedReference
items:
  - uid: system.fabric._operation
    id: _operation
    parent: system.fabric
    children:
      - system.fabric._operation.acknowledge()
      - system.fabric._operation.getAtomicGroupId()
      - system.fabric._operation.getData()
      - system.fabric._operation.getOperationType()
      - system.fabric._operation.getSequenceNumber()
    href: system.fabric._operation.yml
    langs:
      - java
    name: Operation
    nameWithType: Operation
    fullName: system.fabric.Operation
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
      startLine: 16
    package: system.fabric
    summary: "<p>\r\n\r\n  <bold>Hinweise:</bold>\r\n\r\n  <ref refid=\"\" kindref=\"compound\">system.fabric.Operation</ref> ist die Basisschnittstelle, die Änderungen beschreibt, die an ein sekundäres Replikat übermittelt werden. Sie enthalten die <ref refid=\"\" kindref=\"compound\">system.fabric.StateReplicator#replicateAsync (OperationData SequenceNumber, system.fabric.CancellationToken)</ref> und identifizieren Sie die Sequenznummer und andere Informationen. </p>"
    syntax:
      content: public interface Operation
  - uid: system.fabric._operation.acknowledge()
    id: acknowledge()
    parent: system.fabric._operation
    href: system.fabric._operation.yml
    langs:
      - java
    name: acknowledge()
    nameWithType: Operation.acknowledge()
    fullName: void system.fabric.Operation.acknowledge()
    overload: system.fabric._operation.acknowledge*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
      startLine: 77
    package: system.fabric
    summary: "<p>Bestätigt, dass dieser Vorgang erfolgreich auf das sekundäre Replikat angewendet wurde. </p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>Dienste sollten diese Methode aufrufen, wenn sie gewonnen haben eine <ref refid=\"\" kindref=\"compound\">system.fabric.Operation</ref> aus dem Replicator und erfolgreich auf ihren lokalen Speicher angewendet. Beim Aufrufen dieser Methode für persistente Dienste obligatorisch ist da die <xref href=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\"></xref> aufgehoben wird, zusätzliche Objekte, die implementieren <ref refid=\"\" kindref=\"compound\">system.fabric.Operation</ref>. Für Dienste volatile Vorgänge Replikator implizit bestätigt, wenn sie empfangen werden, es sei denn, sie andernfalls konfiguriert sind, durch Festlegen des Werts <xref href=\"system.fabric._replicator_settings.isRequireServiceAck()\" data-throw-if-not-resolved=\"false\"></xref> auf \"true\". Ein Vorgang muss durch ein Quorum der Replikate bestätigt werden, bevor das primäre Replikat empfängt die <ref refid=\"\" kindref=\"compound\">system.fabric.StateReplicator#replicateAsync (OperationData SequenceNumber, system.fabric.CancellationToken)</ref> Vorgangsantworten abgeschlossen. </p>"
    syntax:
      content: public void acknowledge()
  - uid: system.fabric._operation.getAtomicGroupId()
    id: getAtomicGroupId()
    parent: system.fabric._operation
    href: system.fabric._operation.yml
    langs:
      - java
    name: getAtomicGroupId()
    nameWithType: Operation.getAtomicGroupId()
    fullName: long system.fabric.Operation.getAtomicGroupId()
    overload: system.fabric._operation.getAtomicGroupId*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
      startLine: 52
    package: system.fabric
    summary: |-
      <p>Gibt die atomare Gruppe an, wenn dieses Objekt, die implementiert <ref refid="" kindref="compound">system.fabric.Operation</ref> unteilbare Gruppe gehört. Atomische-Gruppen sind nur verfügbar, wenn ein Dienst ein Teil der Gruppe "Datenzugriffsdienst" ist.</p>
      <p></p>
    syntax:
      content: public long getAtomicGroupId()
      return:
        type: 0364520f
        description: <p>Long-Wert. </p>
  - uid: system.fabric._operation.getData()
    id: getData()
    parent: system.fabric._operation
    href: system.fabric._operation.yml
    langs:
      - java
    name: getData()
    nameWithType: Operation.getData()
    fullName: OperationData system.fabric.Operation.getData()
    overload: system.fabric._operation.getData*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
      startLine: 59
    package: system.fabric
    summary: |-
      <p>Ruft die <xref href="system.fabric._operation_data" data-throw-if-not-resolved="false"></xref> , die vom primären Replikat bereitgestellt werden.</p>
      <p></p>
    syntax:
      content: public OperationData getData()
      return:
        type: system.fabric._operation_data
        description: <p>Gibt <xref href="system.fabric._operation_data" data-throw-if-not-resolved="false"></xref>. </p>
  - uid: system.fabric._operation.getOperationType()
    id: getOperationType()
    parent: system.fabric._operation
    href: system.fabric._operation.yml
    langs:
      - java
    name: getOperationType()
    nameWithType: Operation.getOperationType()
    fullName: OperationType system.fabric.Operation.getOperationType()
    overload: system.fabric._operation.getOperationType*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
      startLine: 28
    package: system.fabric
    summary: "<p>Ruft den Typ dieses Vorgangs ab.</p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>der <xref href=\"system.fabric._operation_type\" data-throw-if-not-resolved=\"false\"></xref> gibt den Typ des Vorgangs an. \"Normal\"-Vorgänge sind diejenigen, die im Rahmen des Streams für das Kopieren oder die Replikation von nicht-gruppierten Services gesendet werden. Andere Arten von Vorgängen Steuerelement Vorgänge dar, die für Dienstgruppen spezifisch sind. </p>"
    syntax:
      content: public OperationType getOperationType()
      return:
        type: system.fabric._operation_type
        description: <p>Gibt <xref href="system.fabric._operation_type" data-throw-if-not-resolved="false"></xref>. </p>
  - uid: system.fabric._operation.getSequenceNumber()
    id: getSequenceNumber()
    parent: system.fabric._operation
    href: system.fabric._operation.yml
    langs:
      - java
    name: getSequenceNumber()
    nameWithType: Operation.getSequenceNumber()
    fullName: long system.fabric.Operation.getSequenceNumber()
    overload: system.fabric._operation.getSequenceNumber*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
      startLine: 43
    package: system.fabric
    summary: "<p>Ruft die Sequenznummer dieses Vorgangs ab.</p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>die Sequenznummer wird bereitgestellt, als Teil der <xref href=\"system.fabric._operation.getSequenceNumber()\" data-throw-if-not-resolved=\"false\"></xref> für Vorgänge, die von der Replikationsstream empfangen (<ref refid=\"\" kindref=\"compound\">system.fabric.StateReplicator#getReplicationStream()</ref>) die Sequenznummer ist identisch, die das primäre Replikat, die von erhält <ref refid=\"\" kindref=\"compound\">system.fabric.StateReplicator#replicateAsync (OperationData SequenceNumber, system.fabric.CancellationToken)</ref> Methode. </p>"
    syntax: &ref_1
      content: public long getSequenceNumber()
      return:
        type: 0364520f
        description: <p>Long-Wert. </p>
references:
  - uid: system.fabric._operation.getOperationType*
    name: getOperationType
    nameWithType: Operation.getOperationType
    fullName: OperationType system.fabric.Operation.getOperationType
    package: system.fabric
  - uid: 0364520f
    spec.java:
      - name: long
        fullName: long
  - uid: system.fabric._operation.getSequenceNumber*
    name: getSequenceNumber
    nameWithType: Operation.getSequenceNumber
    fullName: long system.fabric.Operation.getSequenceNumber
    package: system.fabric
  - uid: system.fabric._operation.getAtomicGroupId*
    name: getAtomicGroupId
    nameWithType: Operation.getAtomicGroupId
    fullName: long system.fabric.Operation.getAtomicGroupId
    package: system.fabric
  - uid: system.fabric._operation.getData*
    name: getData
    nameWithType: Operation.getData
    fullName: OperationData system.fabric.Operation.getData
    package: system.fabric
  - uid: system.fabric._operation.acknowledge*
    name: acknowledge
    nameWithType: Operation.acknowledge
    fullName: void system.fabric.Operation.acknowledge
    package: system.fabric
  - uid: system.fabric._j_operation
  - uid: system.fabric._operation_type
    parent: system.fabric
    href: system.fabric._operation_type.yml
    name: OperationType
    nameWithType: OperationType
    fullName: system.fabric.OperationType
    type: Enum
    syntax:
      content: public enum OperationType
  - uid: system.fabric._operation.getSequenceNumber()
    parent: system.fabric._operation
    href: system.fabric._operation.yml
    name: getSequenceNumber()
    nameWithType: Operation.getSequenceNumber()
    fullName: long system.fabric.Operation.getSequenceNumber()
    type: Method
    summary: "<p>Ruft die Sequenznummer dieses Vorgangs ab.</p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>die Sequenznummer wird bereitgestellt, als Teil der <xref href=\"system.fabric._operation.getSequenceNumber()\" data-throw-if-not-resolved=\"false\"></xref> für Vorgänge, die von der Replikationsstream empfangen (<ref refid=\"\" kindref=\"compound\">system.fabric.StateReplicator#getReplicationStream()</ref>) die Sequenznummer ist identisch, die das primäre Replikat, die von erhält <ref refid=\"\" kindref=\"compound\">system.fabric.StateReplicator#replicateAsync (OperationData SequenceNumber, system.fabric.CancellationToken)</ref> Methode. </p>"
    syntax: *ref_1
  - uid: system.fabric._operation_data
    parent: system.fabric
    href: system.fabric._operation_data.yml
    name: OperationData
    nameWithType: OperationData
    fullName: system.fabric.OperationData
    type: Class
    syntax:
      content: public class OperationData
  - uid: system.fabric._fabric_replicator
    parent: system.fabric
    href: system.fabric._fabric_replicator.yml
    name: FabricReplicator
    nameWithType: FabricReplicator
    fullName: system.fabric.FabricReplicator
    type: Class
    summary: "<p>Repliziert den Status für hohe Verfügbarkeit und Zuverlässigkeit. </p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>stellt die Standardimplementierung von der <xref href=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"system.fabric._replicator\" data-throw-if-not-resolved=\"false\"></xref>, und <xref href=\"system.fabric._primary_replicator\" data-throw-if-not-resolved=\"false\"></xref> Schnittstellen, die Benutzerdienste werden, zusammen mit ihrer Implementierung von verwendet können der <xref href=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\"></xref> Schnittstelle. Eine Instanz von der <ref refid=\"\" kindref=\"compound\">system.fabric.FabricReplicator</ref> Klasse abgerufen wird, über die <xref href=\"system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\"></xref> -Methode, die in umgewandelt werden kann <xref href=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\"></xref> für die Verwendung. </p>"
    syntax:
      content: public class FabricReplicator implements Replicator
  - uid: system.fabric._replicator_settings.isRequireServiceAck()
    parent: system.fabric._replicator_settings
    href: system.fabric._replicator_settings.yml
    name: isRequireServiceAck()
    nameWithType: ReplicatorSettings.isRequireServiceAck()
    fullName: boolean system.fabric.ReplicatorSettings.isRequireServiceAck()
    type: Method
    summary: "<p>Verhindert, dass die optimistische Bestätigung von Vorgängen in nicht persistente Dienste durch das anfordern, die der Dienst ruft <xref href=\"system.fabric._operation.acknowledge()\" data-throw-if-not-resolved=\"false\"></xref> , bevor er den nächsten Vorgang ruft.</p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>nicht persistenter Dienste, die explizite Bestätigung erforderlich ist können diese Eigenschaft auf \"true\" festlegen, um zu verhindern, dass bei der optimistischen Bestätigung der Vorgänge von den <xref href=\"system.fabric._replicator\" data-throw-if-not-resolved=\"false\"></xref>. Diese Einstellung wirkt sich nicht bei beständigen Diensten aus. Der Standardwert ist „false“. </p>"
    syntax:
      content: public boolean isRequireServiceAck()
      return:
        type: 4fc6e284
        description: '<p>True, wenn die vollständige Bestätigung von Vorgängen in nicht persistente Dienste; andernfalls "false". </p>'