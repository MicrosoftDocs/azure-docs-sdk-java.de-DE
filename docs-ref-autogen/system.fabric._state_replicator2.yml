### YamlMime:ManagedReference
items:
  - uid: system.fabric._state_replicator2
    id: _state_replicator2
    parent: system.fabric
    children:
      - system.fabric._state_replicator2.getReplicatorSettings()
    href: system.fabric._state_replicator2.yml
    langs:
      - java
    name: StateReplicator2
    nameWithType: StateReplicator2
    fullName: system.fabric.StateReplicator2
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/system.fabric/src/system/fabric/StateReplicator2.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/system.fabric/src/system/fabric/StateReplicator2.java
      startLine: 6
    package: system.fabric
    summary: '<p>Macht Funktionen im Zusammenhang mit Replikation, von der <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref> Klasse, mit denen <xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">system.fabric.StateProvider</xref> zum Replizieren von Zustand, um hohe Verfügbarkeit sicherzustellen. </p>'
    syntax:
      content: public interface StateReplicator2 extends StateReplicator
    inheritedMembers:
      - system.fabric._state_replicator.getCopyStream()
      - system.fabric._state_replicator.getReplicationStream()
      - 'system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)'
      - system.fabric._state_replicator.updateReplicatorSettings(ReplicatorSettings)
  - uid: system.fabric._state_replicator2.getReplicatorSettings()
    id: getReplicatorSettings()
    parent: system.fabric._state_replicator2
    href: system.fabric._state_replicator2.yml
    langs:
      - java
    name: getReplicatorSettings()
    nameWithType: StateReplicator2.getReplicatorSettings()
    fullName: ReplicatorSettings system.fabric.StateReplicator2.getReplicatorSettings()
    overload: system.fabric._state_replicator2.getReplicatorSettings*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StateReplicator2.java
      startLine: 13
    package: system.fabric
    summary: |-
      <p>Ruft die Einstellungen der Replikator während der Laufzeit ab.</p>
      <p></p>
    syntax:
      content: public ReplicatorSettings getReplicatorSettings()
      return:
        type: system.fabric._replicator_settings
        description: <p>Die aktuelle <xref uid="system.fabric._replicator_settings" data-throw-if-not-resolved="false">system.fabric.ReplicatorSettings</xref> aus der Service Fabric-Laufzeit. </p>
references:
  - uid: system.fabric._state_replicator2.getReplicatorSettings*
    name: getReplicatorSettings
    nameWithType: StateReplicator2.getReplicatorSettings
    fullName: ReplicatorSettings system.fabric.StateReplicator2.getReplicatorSettings
    package: system.fabric
  - uid: system.fabric._state_replicator.getCopyStream()
    parent: system.fabric._state_replicator
    href: system.fabric._state_replicator.yml
    name: getCopyStream()
    nameWithType: StateReplicator.getCopyStream()
    fullName: OperationStream system.fabric.StateReplicator.getCopyStream()
    type: Method
    summary: <p>Ruft kopieren stream </p>
    syntax:
      content: public OperationStream getCopyStream()
      return:
        type: system.fabric._operation_stream
        description: '<p>Enthält die zurückgegebene CopyStream <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> Objekten implementiert, <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Vorgang</xref>. Die <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> -Objekte werden abgerufen, von der CopyState <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">OperationDataStream</xref> , die das primäre Replikat zurückgibt <xref uid="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false">StateProvider #GetCopyState(SequenceNumber, OperationDataStream)</xref>. Wenn ein Replikat erstellt und auf den aktuellen Stand ist, erhalten die CopyStream und sollte beginnen zu senden, anwenden und bestätigen das Kopieren von Objekten, die implementieren <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Vorgang</xref>. Parallel, reagiert das Replikat auf den entsprechenden <xref uid="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false">StateProvider#getCopyContext()</xref> und <xref uid="" data-throw-if-not-resolved="false">OperationDataStream#getNextAsync(CancellationToken)</xref>aufrufen. Der Datenstrom ist leer, wenn das zurückgegebene <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Vorgang</xref> Methode ist null. </p>'
  - uid: system.fabric._state_replicator.getReplicationStream()
    parent: system.fabric._state_replicator
    href: system.fabric._state_replicator.yml
    name: getReplicationStream()
    nameWithType: StateReplicator.getReplicationStream()
    fullName: OperationStream system.fabric.StateReplicator.getReplicationStream()
    type: Method
    summary: <p>Ruft die replikationsdatenstrom ab. </p>
    syntax:
      content: public OperationStream getReplicationStream()
      return:
        type: system.fabric._operation_stream
        description: '<p>Implementiert die ReplicationStream <xref uid="system.fabric._operation_stream" data-throw-if-not-resolved="false">OperationStream</xref>. Enthält die ReplicationStream <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> Objekten implementiert, <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Vorgang</xref>. Die Objekte werden vom primären Replikat über bereitgestellt <xref uid="system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false">StateReplicator #ReplicateAsync(OperationData, SequenceNumber, CancellationToken)</xref>. Im Allgemeinen sollte ein sekundäres Replikat senden <xref uid="" data-throw-if-not-resolved="false">OperationStream#getOperationAsync(CancellationToken)</xref>. Service Fabric Services dazu nicht notwendig, in der Regel Dienste sollten alle übertragen <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> Objekten aus der Kopie zuerst zu streamen, übertragen und dann Vorgänge aus dem replikationsdatenstrom. Die Übertragung von beide Kopien parallel wird unterstützt, aber erhöht die Komplexität des Anwendens der Zustand ordnungsgemäß aktualisiert und wird nur für erweiterte Dienste empfohlen. Der Datenstrom ist leer, wenn das zurückgegebene <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Vorgang</xref> Methode ist null. </p>'
  - uid: 'system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)'
    parent: system.fabric._state_replicator
    href: system.fabric._state_replicator.yml
    name: 'replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)'
    nameWithType: 'StateReplicator.replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<SequenceNumber> system.fabric.StateReplicator.replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)'
    type: Method
    summary: '<p>Zustandsänderungen aus dem primären Replikat an die sekundären Replikate repliziert und empfängt eine Quorum-Bestätigung, dass diese Änderungen angewendet wurden. </p>'
    syntax:
      content: 'public CompletableFuture<SequenceNumber> replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)'
      parameters:
        - id: operationData
          type: system.fabric._operation_data
          description: '<p>Stellt die Änderung des Zustands, die das primäre Replikat repliziert werden sollen. </p>'
        - id: sequenceNumber
          type: system.fabric._sequence_number
          description: '<p>Lange, die LSN des Vorgangs. Beachten Sie, dass dies der gleiche Wert zurückgegeben, von der Aufgabe. Bereitstellen als Out-Parameter ist nützlich für Dienste, die vorzubereitenden lokalen Schreibzugriffs auf übertragen, wenn die Aufgabe abgeschlossen ist. </p>'
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: '<p>Ein Schreibvorgang Quorum der Replikate, die verloren gegangen sein. Es kann verwendet werden, um eine Benachrichtigung zu senden, dass der Vorgang abgebrochen werden soll. Beachten Sie, dass der Abbruch advisory ist und weiterhin der Vorgang abgeschlossen werden kann, selbst wenn er abgebrochen wird. </p>'
      return:
        type: 9cdf14d0system.fabric._sequence_numbera08ddfce
        description: '<p>Gibt die completable Zukunft vom Typ long, die LSN des Vorgangs zurück. </p>'
  - uid: system.fabric._state_replicator.updateReplicatorSettings(ReplicatorSettings)
    parent: system.fabric._state_replicator
    href: system.fabric._state_replicator.yml
    name: updateReplicatorSettings(ReplicatorSettings settings)
    nameWithType: StateReplicator.updateReplicatorSettings(ReplicatorSettings settings)
    fullName: void system.fabric.StateReplicator.updateReplicatorSettings(ReplicatorSettings settings)
    type: Method
    summary: '<p>Ermöglicht die Änderung der Replikator Einstellungen während der Laufzeit. Die einzige Einstellung, die geändert werden kann, ist die Sicherheitsanmeldeinformationen. </p>'
    syntax:
      content: public void updateReplicatorSettings(ReplicatorSettings settings)
      parameters:
        - id: settings
          type: system.fabric._replicator_settings
          description: <p>Die neue <xref uid="system.fabric._replicator_settings" data-throw-if-not-resolved="false">ReplicatorSettings</xref> mit Anmeldeinformationen aktualisiert. </p>
  - uid: system.fabric._state_replicator
    parent: system.fabric
    href: system.fabric._state_replicator.yml
    name: StateReplicator
    nameWithType: StateReplicator
    fullName: system.fabric.StateReplicator
    type: Interface
    summary: '<p>Macht replikationsbezogener-Funktionen von der <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref> Klasse, mit denen <xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">StateProvider</xref> zum Replizieren von Zustand, um hohe Verfügbarkeit sicherzustellen. </p>'
    syntax:
      content: public interface StateReplicator
  - uid: system.fabric._replicator_settings
    parent: system.fabric
    href: system.fabric._replicator_settings.yml
    name: ReplicatorSettings
    nameWithType: ReplicatorSettings
    fullName: system.fabric.ReplicatorSettings
    type: Class
    syntax:
      content: public class ReplicatorSettings
  - uid: system.fabric._fabric_replicator
    parent: system.fabric
    href: system.fabric._fabric_replicator.yml
    name: FabricReplicator
    nameWithType: FabricReplicator
    fullName: system.fabric.FabricReplicator
    type: Class
    summary: "<p>Repliziert den Status für hohe Verfügbarkeit und Zuverlässigkeit. </p>\n<p>\r\n\r\n  <b>Hinweise:</b>stellt die Standardimplementierung von der <xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref>, <xref uid=\"system.fabric._replicator\" data-throw-if-not-resolved=\"false\">system.fabric.Replicator</xref>, und <xref uid=\"system.fabric._primary_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.PrimaryReplicator </xref> Schnittstellen, die Benutzerdienste werden, zusammen mit ihrer Implementierung von verwendet können der <xref uid=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider</xref> Schnittstelle. Eine Instanz von der <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref> Klasse abgerufen wird, über die <xref uid=\"system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\">system.fabric.StatefulServicePartition#createReplicator (system.fabric.StateProvider, system.fabric.ReplicatorSettings) </xref> -Methode, die in umgewandelt werden kann <xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref> für die Verwendung. </p>"
    syntax:
      content: public class FabricReplicator implements Replicator
  - uid: system.fabric._state_provider
    parent: system.fabric
    href: system.fabric._state_provider.yml
    name: StateProvider
    nameWithType: StateProvider
    fullName: system.fabric.StateProvider
    type: Interface
    summary: '<p>Definiert das Verhalten, das ein Dienst implementieren muss, um die Interaktion mit der <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref>. </p>'
    syntax:
      content: public interface StateProvider