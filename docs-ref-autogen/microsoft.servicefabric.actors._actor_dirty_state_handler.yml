### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.actors._actor_dirty_state_handler
    id: _actor_dirty_state_handler
    parent: microsoft.servicefabric.actors
    children:
      - microsoft.servicefabric.actors._actor_dirty_state_handler.handle(ActorBase)
    href: microsoft.servicefabric.actors._actor_dirty_state_handler.yml
    langs:
      - java
    name: ActorDirtyStateHandler
    nameWithType: ActorDirtyStateHandler
    fullName: microsoft.servicefabric.actors.ActorDirtyStateHandler
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorDirtyStateHandler.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorDirtyStateHandler.java
      startLine: 8
    package: microsoft.servicefabric.actors
    summary: '<p>Wenn der Status des Akteurs geändert wurde, muss er verarbeitet werden, bevor ein Aufruf auf ihn nicht zulässig ist </p>'
    syntax:
      content: public interface ActorDirtyStateHandler
  - uid: microsoft.servicefabric.actors._actor_dirty_state_handler.handle(ActorBase)
    id: handle(ActorBase)
    parent: microsoft.servicefabric.actors._actor_dirty_state_handler
    href: microsoft.servicefabric.actors._actor_dirty_state_handler.yml
    langs:
      - java
    name: handle(ActorBase actor)
    nameWithType: ActorDirtyStateHandler.handle(ActorBase actor)
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorDirtyStateHandler.handle(ActorBase actor)
    overload: microsoft.servicefabric.actors._actor_dirty_state_handler.handle*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorDirtyStateHandler.java
      startLine: 10
    package: microsoft.servicefabric.actors
    syntax:
      content: public CompletableFuture<?> handle(ActorBase actor)
      parameters:
        - id: actor
          type: microsoft.servicefabric.actors._actor_base
      return:
        type: 16409f84
references:
  - uid: 16409f84
    spec.java:
      - name: CompletableFuture<?>
        fullName: CompletableFuture<?>
  - uid: microsoft.servicefabric.actors._actor_dirty_state_handler.handle*
    name: handle
    nameWithType: ActorDirtyStateHandler.handle
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorDirtyStateHandler.handle
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_base
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_base.yml
    name: ActorBase
    nameWithType: ActorBase
    fullName: microsoft.servicefabric.actors.ActorBase
    type: Class
    summary: "<p>Stellt die Basisklasse für Akteure. <xref href=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\"></xref></p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>Dies ist ein Basistyp für Akteur, bietet die Funktionalität, die durch Ableiten von Akteur implementiert Akteure gemeinsam ist <xref href=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\"></xref> der Zustand in den Garbage Collections der Akteur und Fail-Failover beibehalten wird. Speichern und Abrufen des Zustands wird von der Akteur-State-Anbieter bereitgestellt <xref href=\"microsoft.servicefabric.actors._actor_state_provider\" data-throw-if-not-resolved=\"false\"></xref>. </p>"
    syntax:
      content: public class ActorBase