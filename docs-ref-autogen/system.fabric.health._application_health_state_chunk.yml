### YamlMime:ManagedReference
items:
  - uid: system.fabric.health._application_health_state_chunk
    id: _application_health_state_chunk
    parent: system.fabric.health
    children:
      - system.fabric.health._application_health_state_chunk.getApplicationName()
      - system.fabric.health._application_health_state_chunk.getApplicationTypeName()
      - system.fabric.health._application_health_state_chunk.getDeployedApplicationHealthStateChunks()
      - system.fabric.health._application_health_state_chunk.getHealthState()
      - system.fabric.health._application_health_state_chunk.getServiceHealthStateChunks()
      - system.fabric.health._application_health_state_chunk.toString()
    href: system.fabric.health._application_health_state_chunk.yml
    langs:
      - java
    name: ApplicationHealthStateChunk
    nameWithType: ApplicationHealthStateChunk
    fullName: system.fabric.health.ApplicationHealthStateChunk
    type: Class
    source:
      remote: &ref_0
        path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealthStateChunk.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealthStateChunk.java
      startLine: 8
    package: system.fabric.health
    summary: '<p>Stellt eine Anwendung Health Status Segment, das grundlegende Zustandsinformationen zur Anwendung enthält. </p>'
    syntax:
      content: public class ApplicationHealthStateChunk
    inheritance:
      - java.lang.Object
  - uid: system.fabric.health._application_health_state_chunk.getApplicationName()
    id: getApplicationName()
    parent: system.fabric.health._application_health_state_chunk
    href: system.fabric.health._application_health_state_chunk.yml
    langs:
      - java
    name: getApplicationName()
    nameWithType: ApplicationHealthStateChunk.getApplicationName()
    fullName: URI system.fabric.health.ApplicationHealthStateChunk.getApplicationName()
    overload: system.fabric.health._application_health_state_chunk.getApplicationName*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealthStateChunk.java
      startLine: 84
    package: system.fabric.health
    summary: |-
      <p>Ruft den Namen der Anwendung ab.</p>
      <p></p>
    syntax:
      content: public URI getApplicationName()
      return:
        type: '62304784'
        description: <p>Der Anwendungsname. </p>
  - uid: system.fabric.health._application_health_state_chunk.getApplicationTypeName()
    id: getApplicationTypeName()
    parent: system.fabric.health._application_health_state_chunk
    href: system.fabric.health._application_health_state_chunk.yml
    langs:
      - java
    name: getApplicationTypeName()
    nameWithType: ApplicationHealthStateChunk.getApplicationTypeName()
    fullName: String system.fabric.health.ApplicationHealthStateChunk.getApplicationTypeName()
    overload: system.fabric.health._application_health_state_chunk.getApplicationTypeName*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealthStateChunk.java
      startLine: 75
    package: system.fabric.health
    summary: |-
      <p>Ruft den Typnamen der Anwendung ab.</p>
      <p></p>
    syntax:
      content: public String getApplicationTypeName()
      return:
        type: '26831127'
        description: <p>Der Name des Anwendungstyps. </p>
  - uid: system.fabric.health._application_health_state_chunk.getDeployedApplicationHealthStateChunks()
    id: getDeployedApplicationHealthStateChunks()
    parent: system.fabric.health._application_health_state_chunk
    href: system.fabric.health._application_health_state_chunk.yml
    langs:
      - java
    name: getDeployedApplicationHealthStateChunks()
    nameWithType: ApplicationHealthStateChunk.getDeployedApplicationHealthStateChunks()
    fullName: DeployedApplicationHealthStateChunkList system.fabric.health.ApplicationHealthStateChunk.getDeployedApplicationHealthStateChunks()
    overload: system.fabric.health._application_health_state_chunk.getDeployedApplicationHealthStateChunks*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealthStateChunk.java
      startLine: 41
    package: system.fabric.health
    summary: "<p>Ruft die Liste der bereitgestellten Anwendung Health Status Blöcke, die die Eingabefilter berücksichtigen.</p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold> keine untergeordneten Elemente sind standardmäßig in Ergebnissen enthalten. Benutzer können anfordern, einige untergeordnete Elemente basierend auf den gewünschten Zustand oder andere Informationen einschließen. Beispielsweise können Benutzer auf alle bereitgestellte Anwendungen enthalten ist, Status Integritätsfehler anfordern. Unabhängig von den Filterwert werden alle untergeordneten Elemente aggregiert Anwendungsintegrität berechnet verwendet. </p>"
    syntax:
      content: public DeployedApplicationHealthStateChunkList getDeployedApplicationHealthStateChunks()
      return:
        type: system.fabric.health._deployed_application_health_state_chunk_list
        description: '<p>Die Liste der bereitgestellten Anwendung Health Status Blöcke, die die Eingabefilter berücksichtigen. </p>'
  - uid: system.fabric.health._application_health_state_chunk.getHealthState()
    id: getHealthState()
    parent: system.fabric.health._application_health_state_chunk
    href: system.fabric.health._application_health_state_chunk.yml
    langs:
      - java
    name: getHealthState()
    nameWithType: ApplicationHealthStateChunk.getHealthState()
    fullName: HealthState system.fabric.health.ApplicationHealthStateChunk.getHealthState()
    overload: system.fabric.health._application_health_state_chunk.getHealthState*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealthStateChunk.java
      startLine: 66
    package: system.fabric.health
    summary: |-
      <p>Ruft die Anwendung Integritätsstatus, berechnet aggregiert basierend auf alle gemeldeten integritätsereignisse, die untergeordneten Elemente und einer anwendungsintegritäts-Richtlinie.</p>
      <p></p>
    syntax:
      content: public HealthState getHealthState()
      return:
        type: system.fabric.health._health_state
        description: <p>Der Integritätsstatus der Anwendung aggregiert. </p>
  - uid: system.fabric.health._application_health_state_chunk.getServiceHealthStateChunks()
    id: getServiceHealthStateChunks()
    parent: system.fabric.health._application_health_state_chunk
    href: system.fabric.health._application_health_state_chunk.yml
    langs:
      - java
    name: getServiceHealthStateChunks()
    nameWithType: ApplicationHealthStateChunk.getServiceHealthStateChunks()
    fullName: ServiceHealthStateChunkList system.fabric.health.ApplicationHealthStateChunk.getServiceHealthStateChunks()
    overload: system.fabric.health._application_health_state_chunk.getServiceHealthStateChunks*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealthStateChunk.java
      startLine: 56
    package: system.fabric.health
    summary: "<p>Ruft die Liste der dienstintegrität Zustand Segmente, die die Eingabefilter berücksichtigen.</p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold> keine untergeordneten Elemente sind standardmäßig in Ergebnissen enthalten. Benutzer können anfordern, einige untergeordnete Elemente basierend auf den gewünschten Zustand oder andere Informationen einschließen. Beispielsweise können Benutzer auf alle Dienste enthalten ist, Status Integritätsfehler anfordern. Unabhängig von den Filterwert werden alle untergeordneten Elemente aggregiert Anwendungsintegrität berechnet verwendet. </p>"
    syntax:
      content: public ServiceHealthStateChunkList getServiceHealthStateChunks()
      return:
        type: system.fabric.health._service_health_state_chunk_list
        description: '<p>Die Liste der Service Health Status Blöcke, die die Eingabefilter berücksichtigen. </p>'
  - uid: system.fabric.health._application_health_state_chunk.toString()
    id: toString()
    parent: system.fabric.health._application_health_state_chunk
    href: system.fabric.health._application_health_state_chunk.yml
    langs:
      - java
    name: toString()
    nameWithType: ApplicationHealthStateChunk.toString()
    fullName: String system.fabric.health.ApplicationHealthStateChunk.toString()
    overload: system.fabric.health._application_health_state_chunk.toString*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealthStateChunk.java
      startLine: 89
    package: system.fabric.health
    syntax:
      content: public String toString()
      return:
        type: '26831127'
references:
  - uid: system.fabric.health._application_health_state_chunk.getDeployedApplicationHealthStateChunks*
    name: getDeployedApplicationHealthStateChunks
    nameWithType: ApplicationHealthStateChunk.getDeployedApplicationHealthStateChunks
    fullName: DeployedApplicationHealthStateChunkList system.fabric.health.ApplicationHealthStateChunk.getDeployedApplicationHealthStateChunks
    package: system.fabric.health
  - uid: system.fabric.health._application_health_state_chunk.getServiceHealthStateChunks*
    name: getServiceHealthStateChunks
    nameWithType: ApplicationHealthStateChunk.getServiceHealthStateChunks
    fullName: ServiceHealthStateChunkList system.fabric.health.ApplicationHealthStateChunk.getServiceHealthStateChunks
    package: system.fabric.health
  - uid: system.fabric.health._application_health_state_chunk.getHealthState*
    name: getHealthState
    nameWithType: ApplicationHealthStateChunk.getHealthState
    fullName: HealthState system.fabric.health.ApplicationHealthStateChunk.getHealthState
    package: system.fabric.health
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: system.fabric.health._application_health_state_chunk.getApplicationTypeName*
    name: getApplicationTypeName
    nameWithType: ApplicationHealthStateChunk.getApplicationTypeName
    fullName: String system.fabric.health.ApplicationHealthStateChunk.getApplicationTypeName
    package: system.fabric.health
  - uid: '62304784'
    spec.java:
      - name: URI
        fullName: URI
  - uid: system.fabric.health._application_health_state_chunk.getApplicationName*
    name: getApplicationName
    nameWithType: ApplicationHealthStateChunk.getApplicationName
    fullName: URI system.fabric.health.ApplicationHealthStateChunk.getApplicationName
    package: system.fabric.health
  - uid: system.fabric.health._application_health_state_chunk.toString*
    name: toString
    nameWithType: ApplicationHealthStateChunk.toString
    fullName: String system.fabric.health.ApplicationHealthStateChunk.toString
    package: system.fabric.health
  - uid: system.fabric.health._health_state
    parent: system.fabric.health
    href: system.fabric.health._health_state.yml
    name: HealthState
    nameWithType: HealthState
    fullName: system.fabric.health.HealthState
    type: Enum
    syntax:
      content: public enum HealthState
  - uid: system.fabric.health._service_health_state_chunk_list
    parent: system.fabric.health
    href: system.fabric.health._service_health_state_chunk_list.yml
    name: ServiceHealthStateChunkList
    nameWithType: ServiceHealthStateChunkList
    fullName: system.fabric.health.ServiceHealthStateChunkList
    type: Class
    summary: "<p>Stellt eine Liste mit <xref href=\"system.fabric.health._service_health_state_chunk\" data-throw-if-not-resolved=\"false\"></xref> Elemente. </p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold>die Liste kann über integritätsabfragen Status-Blocks abgerufen werden. Abfragen können als Ergebnis Segmente aufweisen, die eine Nachricht eingefügt werden kann. In diesem Fall die Liste der Elemente, die die Nachricht wird zurückgegeben, sowie eine Anzahl, die zeigt, wie viele gesamtelemente sind verfügbar. </p>"
    syntax:
      content: public class ServiceHealthStateChunkList
  - uid: system.fabric.health._deployed_application_health_state_chunk_list
    parent: system.fabric.health
    href: system.fabric.health._deployed_application_health_state_chunk_list.yml
    name: DeployedApplicationHealthStateChunkList
    nameWithType: DeployedApplicationHealthStateChunkList
    fullName: system.fabric.health.DeployedApplicationHealthStateChunkList
    type: Class
    summary: "<p>Stellt eine Liste mit <xref href=\"system.fabric.health._deployed_application_health_state_chunk\" data-throw-if-not-resolved=\"false\"></xref> Elemente. </p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold>die Liste kann über integritätsabfragen Status-Blocks abgerufen werden. Abfragen können als Ergebnis Segmente aufweisen, die eine Nachricht eingefügt werden kann. In diesem Fall die Liste der Elemente, die die Nachricht wird zurückgegeben, sowie eine Anzahl, die zeigt, wie viele gesamtelemente sind verfügbar. </p>"
    syntax:
      content: public class DeployedApplicationHealthStateChunkList