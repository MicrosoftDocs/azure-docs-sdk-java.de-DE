### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.services._service_type_information
    id: _service_type_information
    parent: microsoft.servicefabric.services
    children:
      - microsoft.servicefabric.services._service_type_information.get(Class<?>)
      - microsoft.servicefabric.services._service_type_information.getImplementationType()
      - microsoft.servicefabric.services._service_type_information.getInterfaceTypes()
      - microsoft.servicefabric.services._service_type_information.isAbstract()
      - microsoft.servicefabric.services._service_type_information.tryGet(Class<?>)
    href: microsoft.servicefabric.services._service_type_information.yml
    langs:
      - java
    name: ServiceTypeInformation
    nameWithType: ServiceTypeInformation
    fullName: microsoft.servicefabric.services.ServiceTypeInformation
    type: Class
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/ServiceTypeInformation.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/ServiceTypeInformation.java
      startLine: 13
    package: microsoft.servicefabric.services
    summary: '<p><span data-ttu-id="e9aac-101">Gibt die Klasse, die von der ServiceRemoting verwendet, um die vom Dienst implementierten Schnittstellen zu suchen.</span><span class="sxs-lookup"><span data-stu-id="e9aac-101">Specifies the class used by the ServiceRemoting to lookup the interfaces implemented by the service.</span></span> </p>'
    syntax: &ref_1
      content: public class ServiceTypeInformation
    inheritance:
      - java.lang.Object
  - uid: microsoft.servicefabric.services._service_type_information.get(Class<?>)
    id: get(Class<?>)
    parent: microsoft.servicefabric.services._service_type_information
    href: microsoft.servicefabric.services._service_type_information.yml
    langs:
      - java
    name: get(Class<?> serviceType)
    nameWithType: ServiceTypeInformation.get(Class<?> serviceType)
    fullName: static ServiceTypeInformation microsoft.servicefabric.services.ServiceTypeInformation.get(Class<?> serviceType)
    overload: microsoft.servicefabric.services._service_type_information.get*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/ServiceTypeInformation.java
      startLine: 31
    package: microsoft.servicefabric.services
    summary: <p><span data-ttu-id="e9aac-102">Factory-Methode erstellt eine <xref uid="microsoft.servicefabric.services._service_type_information" data-throw-if-not-resolved="false">ServiceTypeInformation</xref> Objekt vom angegebenen Typ</span><span class="sxs-lookup"><span data-stu-id="e9aac-102">Factory method that constructs a <xref uid="microsoft.servicefabric.services._service_type_information" data-throw-if-not-resolved="false">ServiceTypeInformation</xref> object from the given type</span></span> </p>
    syntax:
      content: public static ServiceTypeInformation get(Class<?> serviceType)
      parameters:
        - id: serviceType
          type: a19781f8
      return:
        type: microsoft.servicefabric.services._service_type_information
        description: "<p><span data-ttu-id=\"e9aac-103\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.services._service_type_information\" data-throw-if-not-resolved=\"false\">ServiceTypeInformation</xref>\r\n\r\n</span><span class=\"sxs-lookup\"><span data-stu-id=\"e9aac-103\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.services._service_type_information\" data-throw-if-not-resolved=\"false\">ServiceTypeInformation</xref>\r\n\r\n</span></span></p>"
  - uid: microsoft.servicefabric.services._service_type_information.getImplementationType()
    id: getImplementationType()
    parent: microsoft.servicefabric.services._service_type_information
    href: microsoft.servicefabric.services._service_type_information.yml
    langs:
      - java
    name: getImplementationType()
    nameWithType: ServiceTypeInformation.getImplementationType()
    fullName: Class<?> microsoft.servicefabric.services.ServiceTypeInformation.getImplementationType()
    overload: microsoft.servicefabric.services._service_type_information.getImplementationType*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/ServiceTypeInformation.java
      startLine: 58
    package: microsoft.servicefabric.services
    summary: <p><span data-ttu-id="e9aac-104">Typ der Klasse ruft die Dienstschnittstelle implementiert werden.</span><span class="sxs-lookup"><span data-stu-id="e9aac-104">Gets type of the class implementing the service interface.</span></span> </p>
    syntax:
      content: public Class<?> getImplementationType()
      return:
        type: a19781f8
        description: '<p><span data-ttu-id="e9aac-105">Der Typ der Klasse, die Dienstschnittstelle implementiert.</span><span class="sxs-lookup"><span data-stu-id="e9aac-105">Type of the class implementing the service interface.</span></span> </p>'
  - uid: microsoft.servicefabric.services._service_type_information.getInterfaceTypes()
    id: getInterfaceTypes()
    parent: microsoft.servicefabric.services._service_type_information
    href: microsoft.servicefabric.services._service_type_information.yml
    langs:
      - java
    name: getInterfaceTypes()
    nameWithType: ServiceTypeInformation.getInterfaceTypes()
    fullName: List<Class<?>> microsoft.servicefabric.services.ServiceTypeInformation.getInterfaceTypes()
    overload: microsoft.servicefabric.services._service_type_information.getInterfaceTypes*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/ServiceTypeInformation.java
      startLine: 51
    package: microsoft.servicefabric.services
    summary: <p><span data-ttu-id="e9aac-106">Die Schnittstellentypen implementiert</span><span class="sxs-lookup"><span data-stu-id="e9aac-106">The interface types implemented</span></span> </p>
    syntax:
      content: public List<Class<?>> getInterfaceTypes()
      return:
        type: 0e0b5418
        description: <p><span data-ttu-id="e9aac-107">Liste der Schnittstellentypen</span><span class="sxs-lookup"><span data-stu-id="e9aac-107">List of interface types</span></span> </p>
  - uid: microsoft.servicefabric.services._service_type_information.isAbstract()
    id: isAbstract()
    parent: microsoft.servicefabric.services._service_type_information
    href: microsoft.servicefabric.services._service_type_information.yml
    langs:
      - java
    name: isAbstract()
    nameWithType: ServiceTypeInformation.isAbstract()
    fullName: boolean microsoft.servicefabric.services.ServiceTypeInformation.isAbstract()
    overload: microsoft.servicefabric.services._service_type_information.isAbstract*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/ServiceTypeInformation.java
      startLine: 66
    package: microsoft.servicefabric.services
    summary: '<p><span data-ttu-id="e9aac-108">Ruft ab, wenn die Schnittstelle implementierende Klasse abstrakt ist.</span><span class="sxs-lookup"><span data-stu-id="e9aac-108">Gets if class implementing service interface is abstract.</span></span> </p>'
    syntax:
      content: public boolean isAbstract()
      return:
        type: 4fc6e284
        description: '<p><span data-ttu-id="e9aac-109">"true", wenn die Schnittstelle implementierende Klasse ist abstrakt, andernfalls "false".</span><span class="sxs-lookup"><span data-stu-id="e9aac-109">true if class implementing service interface is abstract, otherwise false.</span></span> </p>'
  - uid: microsoft.servicefabric.services._service_type_information.tryGet(Class<?>)
    id: tryGet(Class<?>)
    parent: microsoft.servicefabric.services._service_type_information
    href: microsoft.servicefabric.services._service_type_information.yml
    langs:
      - java
    name: tryGet(Class<?> serviceType)
    nameWithType: ServiceTypeInformation.tryGet(Class<?> serviceType)
    fullName: static ServiceTypeInformation microsoft.servicefabric.services.ServiceTypeInformation.tryGet(Class<?> serviceType)
    overload: microsoft.servicefabric.services._service_type_information.tryGet*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/ServiceTypeInformation.java
      startLine: 18
    package: microsoft.servicefabric.services
    syntax:
      content: public static ServiceTypeInformation tryGet(Class<?> serviceType)
      parameters:
        - id: serviceType
          type: a19781f8
      return:
        type: microsoft.servicefabric.services._service_type_information
references:
  - uid: a19781f8
    spec.java:
      - name: Class<?>
        fullName: Class<?>
  - uid: microsoft.servicefabric.services._service_type_information.tryGet*
    name: tryGet
    nameWithType: ServiceTypeInformation.tryGet
    fullName: static ServiceTypeInformation microsoft.servicefabric.services.ServiceTypeInformation.tryGet
    package: microsoft.servicefabric.services
  - uid: microsoft.servicefabric.services._service_type_information.get*
    name: get
    nameWithType: ServiceTypeInformation.get
    fullName: static ServiceTypeInformation microsoft.servicefabric.services.ServiceTypeInformation.get
    package: microsoft.servicefabric.services
  - uid: 0e0b5418
    spec.java:
      - name: List<Class<?>>
        fullName: List<Class<?>>
  - uid: microsoft.servicefabric.services._service_type_information.getInterfaceTypes*
    name: getInterfaceTypes
    nameWithType: ServiceTypeInformation.getInterfaceTypes
    fullName: List<Class<?>> microsoft.servicefabric.services.ServiceTypeInformation.getInterfaceTypes
    package: microsoft.servicefabric.services
  - uid: microsoft.servicefabric.services._service_type_information.getImplementationType*
    name: getImplementationType
    nameWithType: ServiceTypeInformation.getImplementationType
    fullName: Class<?> microsoft.servicefabric.services.ServiceTypeInformation.getImplementationType
    package: microsoft.servicefabric.services
  - uid: 4fc6e284
    spec.java:
      - name: boolean
        fullName: boolean
  - uid: microsoft.servicefabric.services._service_type_information.isAbstract*
    name: isAbstract
    nameWithType: ServiceTypeInformation.isAbstract
    fullName: boolean microsoft.servicefabric.services.ServiceTypeInformation.isAbstract
    package: microsoft.servicefabric.services
  - uid: microsoft.servicefabric.services._service_type_information
    parent: microsoft.servicefabric.services
    href: microsoft.servicefabric.services._service_type_information.yml
    name: ServiceTypeInformation
    nameWithType: ServiceTypeInformation
    fullName: microsoft.servicefabric.services.ServiceTypeInformation
    type: Class
    summary: '<p><span data-ttu-id="e9aac-110">Gibt die Klasse, die von der ServiceRemoting verwendet, um die vom Dienst implementierten Schnittstellen zu suchen.</span><span class="sxs-lookup"><span data-stu-id="e9aac-110">Specifies the class used by the ServiceRemoting to lookup the interfaces implemented by the service.</span></span> </p>'
    syntax: *ref_1