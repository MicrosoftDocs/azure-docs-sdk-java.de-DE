### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.actors._actor_service_remoting_dispatcher
    id: _actor_service_remoting_dispatcher
    parent: microsoft.servicefabric.actors
    children:
      - microsoft.servicefabric.actors._actor_service_remoting_dispatcher.ActorServiceRemotingDispatcher(FabricActorService)
      - 'microsoft.servicefabric.actors._actor_service_remoting_dispatcher.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    href: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.yml
    langs:
      - java
    name: ActorServiceRemotingDispatcher
    nameWithType: ActorServiceRemotingDispatcher
    fullName: microsoft.servicefabric.actors.ActorServiceRemotingDispatcher
    type: Class
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceRemotingDispatcher.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceRemotingDispatcher.java
      startLine: 22
    package: microsoft.servicefabric.actors
    summary: '<p>Stellt eine Implementierung von <xref uid="" data-throw-if-not-resolved="false">ServiceRemotingMessageHandler</xref> können, die dispatch-Nachrichten mit einem Akteur-Dienst und den Akteuren, die in der Dienst gehostet. </p>'
    syntax: &ref_1
      content: public class ActorServiceRemotingDispatcher extends ServiceRemotingDispatcher
    inheritance:
      - java.lang.Object
      - microsoft.servicefabric.services.remoting._service_remoting_message_handler
      - microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher
    inheritedMembers:
      - 'microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.handleOneWay(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
      - 'microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.ServiceRemotingDispatcher(ServiceContext,Service)'
  - uid: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.ActorServiceRemotingDispatcher(FabricActorService)
    id: ActorServiceRemotingDispatcher(FabricActorService)
    parent: microsoft.servicefabric.actors._actor_service_remoting_dispatcher
    href: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.yml
    langs:
      - java
    name: ActorServiceRemotingDispatcher(FabricActorService actorService)
    nameWithType: ActorServiceRemotingDispatcher.ActorServiceRemotingDispatcher(FabricActorService actorService)
    fullName: microsoft.servicefabric.actors.ActorServiceRemotingDispatcher.ActorServiceRemotingDispatcher(FabricActorService actorService)
    overload: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.ActorServiceRemotingDispatcher*
    type: Constructor
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceRemotingDispatcher.java
      startLine: 34
    package: microsoft.servicefabric.actors
    summary: |-
      <p>Instanziiert die <xref uid="microsoft.servicefabric.actors._actor_service_remoting_dispatcher" data-throw-if-not-resolved="false">ActorServiceRemotingDispatcher</xref> können, die dispatch-Nachrichten mit einem Akteur-Dienst und den Akteuren, die in der Dienst gehostet.</p>
      <p></p>
    syntax:
      content: public ActorServiceRemotingDispatcher(FabricActorService actorService)
      parameters:
        - id: actorService
          type: microsoft.servicefabric.actors._fabric_actor_service
          description: <p>Ein Akteur-Dienstinstanz. </p>
  - uid: 'microsoft.servicefabric.actors._actor_service_remoting_dispatcher.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    id: 'requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    parent: microsoft.servicefabric.actors._actor_service_remoting_dispatcher
    href: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.yml
    langs:
      - java
    name: 'requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    nameWithType: 'ActorServiceRemotingDispatcher.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    fullName: 'CompletableFuture<byte[]> microsoft.servicefabric.actors.ActorServiceRemotingDispatcher.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    overload: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.requestResponseAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceRemotingDispatcher.java
      startLine: 59
    package: microsoft.servicefabric.actors
    summary: |-
      <p>Sendet die Nachrichten an die Webdienstmethoden Akteur oder der Akteur Methoden vom Client empfangen.</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<byte[]> requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
      parameters:
        - id: requestContext
          type: microsoft.servicefabric.services.remoting._service_remoting_request_context
          description: '<p>-Anforderungskontext, die ermöglicht, den Rückrufkanal abrufen, falls erforderlich. </p>'
        - id: messageHeaders
          type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
          description: <p>Dienst-Remoting-Nachrichtenheader </p>
        - id: requestBody
          type: ccd9418d
          description: <p>serialisiert die Anforderungstext der Nachricht Remoting. </p>
      return:
        type: 5fe2dfa4
        description: <p>die ausstehenden Vorgang darstellt. Das Ergebnis der <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> ist der serialisierten Antworttext. </p>
    overridden: 'microsoft.servicefabric.services.remoting._service_remoting_message_handler.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
references:
  - uid: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.ActorServiceRemotingDispatcher*
    name: ActorServiceRemotingDispatcher
    nameWithType: ActorServiceRemotingDispatcher.ActorServiceRemotingDispatcher
    fullName: microsoft.servicefabric.actors.ActorServiceRemotingDispatcher.ActorServiceRemotingDispatcher
    package: microsoft.servicefabric.actors
  - uid: ccd9418d
    spec.java:
      - name: 'byte []'
        fullName: 'byte []'
  - uid: 5fe2dfa4
    spec.java:
      - name: 'CompletableFuture<byte[]>'
        fullName: 'CompletableFuture<byte[]>'
  - uid: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.requestResponseAsync*
    name: requestResponseAsync
    nameWithType: ActorServiceRemotingDispatcher.requestResponseAsync
    fullName: 'CompletableFuture<byte[]> microsoft.servicefabric.actors.ActorServiceRemotingDispatcher.requestResponseAsync'
    package: microsoft.servicefabric.actors
  - uid: 'microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.handleOneWay(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    parent: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher
    href: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.yml
    name: 'handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    nameWithType: 'ServiceRemotingDispatcher.handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    fullName: 'void microsoft.servicefabric.services.remoting.runtime.ServiceRemotingDispatcher.handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    type: Method
    summary: |-
      <p>Eine unidirektionale Nachricht vom Client verarbeitet.</p>
      <p></p>
    syntax:
      content: 'public void handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
      parameters:
        - id: requestContext
          type: microsoft.servicefabric.services.remoting._service_remoting_request_context
          description: <p>Anforderungskontext - enthält zusätzliche Informationen zur Anforderung </p>
        - id: messageHeaders
          type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
          description: <p>Anforderungsnachrichtenheadern </p>
        - id: requestBody
          type: ccd9418d
          description: <p>Nachrichtentext </p>
  - uid: 'microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.ServiceRemotingDispatcher(ServiceContext,Service)'
    parent: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher
    href: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.yml
    name: 'ServiceRemotingDispatcher(ServiceContext serviceContext, Service service)'
    nameWithType: 'ServiceRemotingDispatcher.ServiceRemotingDispatcher(ServiceContext serviceContext, Service service)'
    fullName: 'microsoft.servicefabric.services.remoting.runtime.ServiceRemotingDispatcher.ServiceRemotingDispatcher(ServiceContext serviceContext, Service service)'
    type: Constructor
    syntax:
      content: 'public ServiceRemotingDispatcher(ServiceContext serviceContext, Service service)'
      parameters:
        - id: serviceContext
          type: system.fabric._service_context
        - id: service
          type: microsoft.servicefabric.services.remoting._service
  - uid: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher
    parent: microsoft.servicefabric.services.remoting.runtime
    href: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.yml
    name: ServiceRemotingDispatcher
    nameWithType: ServiceRemotingDispatcher
    fullName: microsoft.servicefabric.services.remoting.runtime.ServiceRemotingDispatcher
    type: Class
    syntax:
      content: public class ServiceRemotingDispatcher
  - uid: microsoft.servicefabric.actors._fabric_actor_service
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._fabric_actor_service.yml
    name: FabricActorService
    nameWithType: FabricActorService
    fullName: microsoft.servicefabric.actors.FabricActorService
    type: Class
    summary: "<p>Stellt die Basisklasse für Microsoft Service Fabric-basierten zuverlässige Akteure Dienst dar. </p>\n<p>\r\n\r\n  <b>Beschreibung:</b>Ableiten von dieser Klasse, die einen eigenen benutzerdefinierten Akteur-Dienst zu implementieren, wenn Sie alle Verhalten des Diensts für die Akteure außer Kraft setzen möchten. </p>"
    syntax:
      content: public class FabricActorService
  - uid: microsoft.servicefabric.actors._actor_service_remoting_dispatcher
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.yml
    name: ActorServiceRemotingDispatcher
    nameWithType: ActorServiceRemotingDispatcher
    fullName: microsoft.servicefabric.actors.ActorServiceRemotingDispatcher
    type: Class
    summary: '<p>Stellt eine Implementierung von <xref uid="" data-throw-if-not-resolved="false">ServiceRemotingMessageHandler</xref> können, die dispatch-Nachrichten mit einem Akteur-Dienst und den Akteuren, die in der Dienst gehostet. </p>'
    syntax: *ref_1
  - uid: 'microsoft.servicefabric.services.remoting._service_remoting_message_handler.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    parent: microsoft.servicefabric.services.remoting._service_remoting_message_handler
    href: microsoft.servicefabric.services.remoting._service_remoting_message_handler.yml
    name: 'requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    nameWithType: 'ServiceRemotingMessageHandler.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    fullName: 'CompletableFuture<byte[]> microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    type: Method
    summary: |-
      <p>Verarbeitet eine Nachricht vom Client, der eine Antwort vom Dienst erforderlich sind.</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<byte[]> requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
      parameters:
        - id: requestContext
          type: microsoft.servicefabric.services.remoting._service_remoting_request_context
          description: <p>Anforderungskontext - enthält zusätzliche Informationen zur Anforderung </p>
        - id: messageHeaders
          type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
          description: <p>Anforderungsnachrichtenheadern </p>
        - id: requestBody
          type: ccd9418d
          description: <p>Nachrichtentext </p>
      return:
        type: 5fe2dfa4
        description: <p>Antworttext </p>
  - uid: microsoft.servicefabric.services.remoting._service_remoting_request_context
    parent: microsoft.servicefabric.services.remoting
    href: microsoft.servicefabric.services.remoting._service_remoting_request_context.yml
    name: ServiceRemotingRequestContext
    nameWithType: ServiceRemotingRequestContext
    fullName: microsoft.servicefabric.services.remoting.ServiceRemotingRequestContext
    type: Interface
    summary: '<p>Definiert die Schnittstelle, die implementiert werden muss, um die Anforderungskontext für die IServiceRemotingMessageHandler bereitzustellen. </p>'
    syntax:
      content: public interface ServiceRemotingRequestContext
  - uid: microsoft.servicefabric.services.remoting._service_remoting_message_headers
    parent: microsoft.servicefabric.services.remoting
    href: microsoft.servicefabric.services.remoting._service_remoting_message_headers.yml
    name: ServiceRemotingMessageHeaders
    nameWithType: ServiceRemotingMessageHeaders
    fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders
    type: Class
    summary: '<p>Gibt die Header an, die zusammen mit einer Meldung ServiceRemoting gesendet werden. </p>'
    syntax:
      content: public class ServiceRemotingMessageHeaders
  - uid: system.fabric._service_context
    parent: system.fabric
    href: system.fabric._service_context.yml
    name: ServiceContext
    nameWithType: ServiceContext
    fullName: system.fabric.ServiceContext
    type: Class
    summary: '<p>Stellt den Kontext, in denen der Dienst unter dar. </p>'
    syntax:
      content: public class ServiceContext
  - uid: microsoft.servicefabric.actors._actor_message_headers
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_message_headers.yml
    name: ActorMessageHeaders
    nameWithType: ActorMessageHeaders
    fullName: microsoft.servicefabric.actors.ActorMessageHeaders
    type: Class
    summary: <p>Der Header für die Akteur-Nachrichten. </p>
    syntax:
      content: public class ActorMessageHeaders
  - uid: system.fabric._cancellation_token
    parent: system.fabric
    href: system.fabric._cancellation_token.yml
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: system.fabric.CancellationToken
    type: Class
    summary: '<p>Ein <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">CancellationToken</xref> wird verwendet, um die Benachrichtigung verteilt wird, dass Vorgänge abgebrochen werden sollen. Sie erstellen ein Abbruchtoken, das durch die Instanziierung einer <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref> -Objekt, das Abbruchtoken verwaltet entnommen seine <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken() </xref> Methode. Übergeben Sie dann das Abbruchtoken, das auf eine beliebige Anzahl von Vorgängen, die Nachricht vom Abbruch erhalten soll. Das Token kann nicht verwendet werden, um den Abbruch zu initiieren. Wenn das besitzende Objekt aufruft <xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>, auf das Abbruchtoken, das die abgebrochene Eigenschaft festgelegt ist auf "true". Die Objekte, die die Benachrichtigung empfangen können Antworten Verfolgungsinformationen geeignet ist. </p>'
    syntax:
      content: public class CancellationToken