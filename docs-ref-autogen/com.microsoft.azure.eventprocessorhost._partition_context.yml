### YamlMime:ManagedReference
items:
  - uid: com.microsoft.azure.eventprocessorhost._partition_context
    id: _partition_context
    parent: com.microsoft.azure.eventprocessorhost
    children:
      - com.microsoft.azure.eventprocessorhost._partition_context.checkpoint()
      - com.microsoft.azure.eventprocessorhost._partition_context.checkpoint(EventData)
      - com.microsoft.azure.eventprocessorhost._partition_context.getConsumerGroupName()
      - com.microsoft.azure.eventprocessorhost._partition_context.getEventHubPath()
      - com.microsoft.azure.eventprocessorhost._partition_context.getOwner()
      - com.microsoft.azure.eventprocessorhost._partition_context.getPartitionId()
      - com.microsoft.azure.eventprocessorhost._partition_context.getRuntimeInformation()
    href: com.microsoft.azure.eventprocessorhost._partition_context.yml
    langs:
      - java
    name: PartitionContext
    nameWithType: PartitionContext
    fullName: com.microsoft.azure.eventprocessorhost.PartitionContext
    type: Class
    source:
      remote: &ref_0
        path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
        branch: master
        repo: 'https://github.com/Azure/azure-event-hubs-java'
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
      startLine: 16
    package: com.microsoft.azure.eventprocessorhost
    syntax:
      content: public class PartitionContext
    inheritance:
      - java.lang.Object
  - uid: com.microsoft.azure.eventprocessorhost._partition_context.checkpoint()
    id: checkpoint()
    parent: com.microsoft.azure.eventprocessorhost._partition_context
    href: com.microsoft.azure.eventprocessorhost._partition_context.yml
    langs:
      - java
    name: checkpoint()
    nameWithType: PartitionContext.checkpoint()
    fullName: void com.microsoft.azure.eventprocessorhost.PartitionContext.checkpoint()
    overload: com.microsoft.azure.eventprocessorhost._partition_context.checkpoint*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
      startLine: 139
    package: com.microsoft.azure.eventprocessorhost
    summary: <p>Schreibt den aktuellen Offset und SequenceNumber auf den Prüfpunkt Store über die Checkpoint-Manager. </p>
    syntax:
      content: public void checkpoint()
    exceptions:
      - type: 3c87bd19
        description: <p>Wenn this.sequenceNumber kleiner als der letzte Wert des geprüften ist </p>
      - type: f25e3dc2
      - type: 8256ba40
  - uid: com.microsoft.azure.eventprocessorhost._partition_context.checkpoint(EventData)
    id: checkpoint(EventData)
    parent: com.microsoft.azure.eventprocessorhost._partition_context
    href: com.microsoft.azure.eventprocessorhost._partition_context.yml
    langs:
      - java
    name: checkpoint(EventData event)
    nameWithType: PartitionContext.checkpoint(EventData event)
    fullName: void com.microsoft.azure.eventprocessorhost.PartitionContext.checkpoint(EventData event)
    overload: com.microsoft.azure.eventprocessorhost._partition_context.checkpoint*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
      startLine: 160
    package: com.microsoft.azure.eventprocessorhost
    summary: |-
      <p>Speichert den Offset und SequenceNumber aus der angegebenen empfangenen EventData-Instanz, und klicken Sie dann diese Werte in den Prüfpunkt Store über die Checkpoint-Manager schreibt.</p>
      <p></p>
    syntax:
      content: public void checkpoint(EventData event)
      parameters:
        - id: event
          type: com.microsoft.azure.eventhubs._event_data
          description: <p>Eine empfangene EventData mit gültigen Offset und einer sequenceNumber </p>
    exceptions:
      - type: 3c87bd19
        description: <p>Wenn die SequenceNumber in das angegebene Ereignis kleiner als der letzte Wert des geprüften ist </p>
      - type: f25e3dc2
      - type: 8256ba40
  - uid: com.microsoft.azure.eventprocessorhost._partition_context.getConsumerGroupName()
    id: getConsumerGroupName()
    parent: com.microsoft.azure.eventprocessorhost._partition_context
    href: com.microsoft.azure.eventprocessorhost._partition_context.yml
    langs:
      - java
    name: getConsumerGroupName()
    nameWithType: PartitionContext.getConsumerGroupName()
    fullName: String com.microsoft.azure.eventprocessorhost.PartitionContext.getConsumerGroupName()
    overload: com.microsoft.azure.eventprocessorhost._partition_context.getConsumerGroupName*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
      startLine: 38
    package: com.microsoft.azure.eventprocessorhost
    syntax:
      content: public String getConsumerGroupName()
      return:
        type: '26831127'
  - uid: com.microsoft.azure.eventprocessorhost._partition_context.getEventHubPath()
    id: getEventHubPath()
    parent: com.microsoft.azure.eventprocessorhost._partition_context
    href: com.microsoft.azure.eventprocessorhost._partition_context.yml
    langs:
      - java
    name: getEventHubPath()
    nameWithType: PartitionContext.getEventHubPath()
    fullName: String com.microsoft.azure.eventprocessorhost.PartitionContext.getEventHubPath()
    overload: com.microsoft.azure.eventprocessorhost._partition_context.getEventHubPath*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
      startLine: 43
    package: com.microsoft.azure.eventprocessorhost
    syntax:
      content: public String getEventHubPath()
      return:
        type: '26831127'
  - uid: com.microsoft.azure.eventprocessorhost._partition_context.getOwner()
    id: getOwner()
    parent: com.microsoft.azure.eventprocessorhost._partition_context
    href: com.microsoft.azure.eventprocessorhost._partition_context.yml
    langs:
      - java
    name: getOwner()
    nameWithType: PartitionContext.getOwner()
    fullName: String com.microsoft.azure.eventprocessorhost.PartitionContext.getOwner()
    overload: com.microsoft.azure.eventprocessorhost._partition_context.getOwner*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
      startLine: 48
    package: com.microsoft.azure.eventprocessorhost
    syntax:
      content: public String getOwner()
      return:
        type: '26831127'
  - uid: com.microsoft.azure.eventprocessorhost._partition_context.getPartitionId()
    id: getPartitionId()
    parent: com.microsoft.azure.eventprocessorhost._partition_context
    href: com.microsoft.azure.eventprocessorhost._partition_context.yml
    langs:
      - java
    name: getPartitionId()
    nameWithType: PartitionContext.getPartitionId()
    fullName: String com.microsoft.azure.eventprocessorhost.PartitionContext.getPartitionId()
    overload: com.microsoft.azure.eventprocessorhost._partition_context.getPartitionId*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
      startLine: 88
    package: com.microsoft.azure.eventprocessorhost
    syntax:
      content: public String getPartitionId()
      return:
        type: '26831127'
  - uid: com.microsoft.azure.eventprocessorhost._partition_context.getRuntimeInformation()
    id: getRuntimeInformation()
    parent: com.microsoft.azure.eventprocessorhost._partition_context
    href: com.microsoft.azure.eventprocessorhost._partition_context.yml
    langs:
      - java
    name: getRuntimeInformation()
    nameWithType: PartitionContext.getRuntimeInformation()
    fullName: ReceiverRuntimeInformation com.microsoft.azure.eventprocessorhost.PartitionContext.getRuntimeInformation()
    overload: com.microsoft.azure.eventprocessorhost._partition_context.getRuntimeInformation*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
      startLine: 53
    package: com.microsoft.azure.eventprocessorhost
    syntax:
      content: public ReceiverRuntimeInformation getRuntimeInformation()
      return:
        type: com.microsoft.azure.eventhubs._receiver_runtime_information
references:
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: com.microsoft.azure.eventprocessorhost._partition_context.getConsumerGroupName*
    name: getConsumerGroupName
    nameWithType: PartitionContext.getConsumerGroupName
    fullName: String com.microsoft.azure.eventprocessorhost.PartitionContext.getConsumerGroupName
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._partition_context.getEventHubPath*
    name: getEventHubPath
    nameWithType: PartitionContext.getEventHubPath
    fullName: String com.microsoft.azure.eventprocessorhost.PartitionContext.getEventHubPath
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._partition_context.getOwner*
    name: getOwner
    nameWithType: PartitionContext.getOwner
    fullName: String com.microsoft.azure.eventprocessorhost.PartitionContext.getOwner
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._partition_context.getRuntimeInformation*
    name: getRuntimeInformation
    nameWithType: PartitionContext.getRuntimeInformation
    fullName: ReceiverRuntimeInformation com.microsoft.azure.eventprocessorhost.PartitionContext.getRuntimeInformation
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._partition_context.getPartitionId*
    name: getPartitionId
    nameWithType: PartitionContext.getPartitionId
    fullName: String com.microsoft.azure.eventprocessorhost.PartitionContext.getPartitionId
    package: com.microsoft.azure.eventprocessorhost
  - uid: 3c87bd19
    spec.java:
      - name: IllegalArgumentException
        fullName: IllegalArgumentException
  - uid: f25e3dc2
    spec.java:
      - name: ExecutionException
        fullName: ExecutionException
  - uid: 8256ba40
    spec.java:
      - name: InterruptedException
        fullName: InterruptedException
  - uid: com.microsoft.azure.eventprocessorhost._partition_context.checkpoint*
    name: checkpoint
    nameWithType: PartitionContext.checkpoint
    fullName: void com.microsoft.azure.eventprocessorhost.PartitionContext.checkpoint
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._event_processor_host
    parent: com.microsoft.azure.eventprocessorhost
    href: com.microsoft.azure.eventprocessorhost._event_processor_host.yml
    name: EventProcessorHost
    nameWithType: EventProcessorHost
    fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost
    type: Class
    syntax:
      content: public class EventProcessorHost
  - uid: com.microsoft.azure.eventprocessorhost._lease
    parent: com.microsoft.azure.eventprocessorhost
    href: com.microsoft.azure.eventprocessorhost._lease.yml
    name: Lease
    nameWithType: Lease
    fullName: com.microsoft.azure.eventprocessorhost.Lease
    type: Class
    summary: "<p>\r\n\r\n  <xref href=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\"></xref>Klasse ist öffentlich, sodass, dass Sie fortgeschrittene Benutzer implementieren können ein <xref href=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\"></xref>. Es sei denn, Sie implementieren <xref href=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\"></xref> sollte nicht für den Umgang mit Objekte dieser Klasse haben oder abgeleiteten Klassen direkt. </p>\n\n<p>Bei der Implementierung einer <xref href=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\"></xref> es möglicherweise erforderlich sein, leiten Sie von dieser Klasse ausführen, um weitere Informationen und IsExpired zu überschreiben. Die Datenfelder wurde verlassen haben anstelle von privaten geschützt werden, da sie ein breites Spektrum aufweisen der Getter und Setter (mit Ausnahme der PartitionId, das unveränderlich ist) die bieten einen gleichwertigen Zugriff. Wenn AzureBlobLease zu implementieren, z. B. gab es keine Notwendigkeit mehr Zugriff als der Getter und Setter bereitstellen. </p>\n<p>Beachten Sie, dass ein <xref href=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\"></xref> Objekt enthält nur Informationen zu einer Partition Lease. Die entsprechende Funktionalität zum Abrufen/erneuern/Freigabe eine Lease ist alles auf der <xref href=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\"></xref>. </p>"
    syntax:
      content: public class Lease
  - uid: com.microsoft.azure.eventhubs._partition_receiver.START_OF_STREAM()
    parent: com.microsoft.azure.eventhubs._partition_receiver
    href: com.microsoft.azure.eventhubs._partition_receiver.yml
    name: START_OF_STREAM
    nameWithType: PartitionReceiver.START_OF_STREAM
    fullName: final String com.microsoft.azure.eventhubs.PartitionReceiver.START_OF_STREAM
    type: Field
    summary: '<p>Dies ist eine Konstante, die definiert, um den Beginn eines Datenstroms Partition im Event Hub darstellen. </p>'
    syntax:
      content: public static final String START_OF_STREAM= "-1"
      return:
        type: 3d93591e
  - uid: com.microsoft.azure.eventhubs._receiver_runtime_information
    parent: com.microsoft.azure.eventhubs
    href: com.microsoft.azure.eventhubs._receiver_runtime_information.yml
    name: ReceiverRuntimeInformation
    nameWithType: ReceiverRuntimeInformation
    fullName: com.microsoft.azure.eventhubs.ReceiverRuntimeInformation
    type: Class
    summary: <p>Repräsentiert die zeitliche Empfänger Laufzeitinformationen für eine <xref href="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false"></xref>. Aktuelle empfangen <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> und <xref href="com.microsoft.azure.eventhubs._receiver_runtime_information" data-throw-if-not-resolved="false"></xref> Näherungswert für ausstehende Ereignisse finden (der noch nicht verarbeitet) verwendet werden können. </p>
    syntax:
      content: public class ReceiverRuntimeInformation
  - uid: com.microsoft.azure.eventhubs._event_data
    parent: com.microsoft.azure.eventhubs
    href: com.microsoft.azure.eventhubs._event_data.yml
    name: EventData
    nameWithType: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
    type: Class
    summary: |-
      <p>Die Datenstruktur, die das Ereignis wird gesendet an und Empfangen von EventHubs kapseln. Jede Partition EventHubs visualisiert werden kann, als Datenstrom von <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>
      <p>Serialisieren eines empfangenen <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> mit AMQP-Abschnitten als ApplicationProperties (mit primitiven Java-Typen) und Daten der Abschnitt wird nicht unterstützt. </p>
      <p>So sieht wie AMQP-Nachricht-Abschnitten zugeordnet <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. Hier wird der Verweis, der für AMQP 1.0-Spezifikation verwendet: <ulink url="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf">http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf</ulink> <preformatted> ich.   <xref href="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false"></xref>- AMQPMessage.ApplicationProperties Teil Ii.  <xref href="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false"></xref> - AMQPMessage.Body Daten Abschnitt Iii verfügt. <xref href="com.microsoft.azure.eventhubs._event_data.getObject()" data-throw-if-not-resolved="false"></xref> - verfügt AMQPMessage.Body AMQPValue oder AMQPSequence Abschnitte </preformatted> bei der Verwendung von Clientbibliotheken, die von Microsoft Azure EventHubs freigegeben, Abschnitte (i) und (Ii) allein reichen. Abschnitt (Iii) wird verwendet, für erweiterte Szenarien, in denen die sendende Anwendung eines Drittanbieters AMQP-Bibliothek zum Senden der Nachricht an EventHubs verwendet und die empfangende Anwendung verwendet diese Clientbibliothek zum Empfangen von <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>
    syntax:
      content: public class EventData
  - uid: com.microsoft.azure.eventprocessorhost._checkpoint
    parent: com.microsoft.azure.eventprocessorhost
    href: com.microsoft.azure.eventprocessorhost._checkpoint.yml
    name: Checkpoint
    nameWithType: Checkpoint
    fullName: com.microsoft.azure.eventprocessorhost.Checkpoint
    type: Class
    summary: "<p>\r\n\r\n  <xref href=\"com.microsoft.azure.eventprocessorhost._checkpoint\" data-throw-if-not-resolved=\"false\"></xref>Klasse ist öffentlich, sodass, dass Sie fortgeschrittene Benutzer implementieren können ein <xref href=\"com.microsoft.azure.eventprocessorhost._i_checkpoint_manager\" data-throw-if-not-resolved=\"false\"></xref>. Es sei denn, Sie implementieren <xref href=\"com.microsoft.azure.eventprocessorhost._i_checkpoint_manager\" data-throw-if-not-resolved=\"false\"></xref> Sie sollten keine Objekte dieser Klasse direkt behandeln. </p>\n\n<p>Ein <xref href=\"com.microsoft.azure.eventprocessorhost._checkpoint\" data-throw-if-not-resolved=\"false\"></xref> ist im Prinzip nur ein Tupel. Er verfügt über eine feste Partitions-Id, zum Zeitpunkt der Erstellung festgelegt und unveränderlich danach und ordnet, die einen Offset/SequenceNumber-Paar gibt eine Position in der Nachrichten in dieser Partition an. </p>"
    syntax:
      content: public class Checkpoint