### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.services.remoting._method_dispatcher
    id: _method_dispatcher
    parent: microsoft.servicefabric.services.remoting
    children:
      - 'microsoft.servicefabric.services.remoting._method_dispatcher.dispatch(Object,int,Object)'
      - 'microsoft.servicefabric.services.remoting._method_dispatcher.dispatchAsync(Object,int,Object,CancellationToken)'
      - microsoft.servicefabric.services.remoting._method_dispatcher.getInterfaceId()
      - microsoft.servicefabric.services.remoting._method_dispatcher.getMethodName(int)
    href: microsoft.servicefabric.services.remoting._method_dispatcher.yml
    langs:
      - java
    name: MethodDispatcher
    nameWithType: MethodDispatcher
    fullName: microsoft.servicefabric.services.remoting.MethodDispatcher
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
      startLine: 6
    package: microsoft.servicefabric.services.remoting
    syntax:
      content: public interface MethodDispatcher
  - uid: 'microsoft.servicefabric.services.remoting._method_dispatcher.dispatch(Object,int,Object)'
    id: 'dispatch(Object,int,Object)'
    parent: microsoft.servicefabric.services.remoting._method_dispatcher
    href: microsoft.servicefabric.services.remoting._method_dispatcher.yml
    langs:
      - java
    name: 'dispatch(Object objectImplementation, int methodId, Object requestBody)'
    nameWithType: 'MethodDispatcher.dispatch(Object objectImplementation, int methodId, Object requestBody)'
    fullName: 'void microsoft.servicefabric.services.remoting.MethodDispatcher.dispatch(Object objectImplementation, int methodId, Object requestBody)'
    overload: microsoft.servicefabric.services.remoting._method_dispatcher.dispatch*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
      startLine: 12
    package: microsoft.servicefabric.services.remoting
    syntax:
      content: 'public void dispatch(Object objectImplementation, int methodId, Object requestBody)'
      parameters:
        - id: objectImplementation
          type: '79317049'
        - id: methodId
          type: f75371fa
        - id: requestBody
          type: '79317049'
  - uid: 'microsoft.servicefabric.services.remoting._method_dispatcher.dispatchAsync(Object,int,Object,CancellationToken)'
    id: 'dispatchAsync(Object,int,Object,CancellationToken)'
    parent: microsoft.servicefabric.services.remoting._method_dispatcher
    href: microsoft.servicefabric.services.remoting._method_dispatcher.yml
    langs:
      - java
    name: 'dispatchAsync(Object objectImplementation, int methodId, Object requestBody, CancellationToken cancellationToken)'
    nameWithType: 'MethodDispatcher.dispatchAsync(Object objectImplementation, int methodId, Object requestBody, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<Object> microsoft.servicefabric.services.remoting.MethodDispatcher.dispatchAsync(Object objectImplementation, int methodId, Object requestBody, CancellationToken cancellationToken)'
    overload: microsoft.servicefabric.services.remoting._method_dispatcher.dispatchAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
      startLine: 10
    package: microsoft.servicefabric.services.remoting
    syntax:
      content: 'public CompletableFuture<Object> dispatchAsync(Object objectImplementation, int methodId, Object requestBody, CancellationToken cancellationToken)'
      parameters:
        - id: objectImplementation
          type: '79317049'
        - id: methodId
          type: f75371fa
        - id: requestBody
          type: '79317049'
        - id: cancellationToken
          type: system.fabric._cancellation_token
      return:
        type: 55aa5245
  - uid: microsoft.servicefabric.services.remoting._method_dispatcher.getInterfaceId()
    id: getInterfaceId()
    parent: microsoft.servicefabric.services.remoting._method_dispatcher
    href: microsoft.servicefabric.services.remoting._method_dispatcher.yml
    langs:
      - java
    name: getInterfaceId()
    nameWithType: MethodDispatcher.getInterfaceId()
    fullName: int microsoft.servicefabric.services.remoting.MethodDispatcher.getInterfaceId()
    overload: microsoft.servicefabric.services.remoting._method_dispatcher.getInterfaceId*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
      startLine: 8
    package: microsoft.servicefabric.services.remoting
    syntax:
      content: public int getInterfaceId()
      return:
        type: f75371fa
  - uid: microsoft.servicefabric.services.remoting._method_dispatcher.getMethodName(int)
    id: getMethodName(int)
    parent: microsoft.servicefabric.services.remoting._method_dispatcher
    href: microsoft.servicefabric.services.remoting._method_dispatcher.yml
    langs:
      - java
    name: getMethodName(int methodId)
    nameWithType: MethodDispatcher.getMethodName(int methodId)
    fullName: String microsoft.servicefabric.services.remoting.MethodDispatcher.getMethodName(int methodId)
    overload: microsoft.servicefabric.services.remoting._method_dispatcher.getMethodName*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
      startLine: 14
    package: microsoft.servicefabric.services.remoting
    syntax:
      content: public String getMethodName(int methodId)
      parameters:
        - id: methodId
          type: f75371fa
      return:
        type: '26831127'
references:
  - uid: f75371fa
    spec.java:
      - name: int
        fullName: int
  - uid: microsoft.servicefabric.services.remoting._method_dispatcher.getInterfaceId*
    name: getInterfaceId
    nameWithType: MethodDispatcher.getInterfaceId
    fullName: int microsoft.servicefabric.services.remoting.MethodDispatcher.getInterfaceId
    package: microsoft.servicefabric.services.remoting
  - uid: '79317049'
    spec.java:
      - name: Object
        fullName: Object
  - uid: 55aa5245
    spec.java:
      - name: CompletableFuture<Object>
        fullName: CompletableFuture<Object>
  - uid: microsoft.servicefabric.services.remoting._method_dispatcher.dispatchAsync*
    name: dispatchAsync
    nameWithType: MethodDispatcher.dispatchAsync
    fullName: CompletableFuture<Object> microsoft.servicefabric.services.remoting.MethodDispatcher.dispatchAsync
    package: microsoft.servicefabric.services.remoting
  - uid: microsoft.servicefabric.services.remoting._method_dispatcher.dispatch*
    name: dispatch
    nameWithType: MethodDispatcher.dispatch
    fullName: void microsoft.servicefabric.services.remoting.MethodDispatcher.dispatch
    package: microsoft.servicefabric.services.remoting
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: microsoft.servicefabric.services.remoting._method_dispatcher.getMethodName*
    name: getMethodName
    nameWithType: MethodDispatcher.getMethodName
    fullName: String microsoft.servicefabric.services.remoting.MethodDispatcher.getMethodName
    package: microsoft.servicefabric.services.remoting
  - uid: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base
    parent: microsoft.servicefabric.services.remoting.builder
    href: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.yml
    name: MethodDispatcherBase
    nameWithType: MethodDispatcherBase
    fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase
    type: Class
    summary: '<p>Die Basisklasse, die von Remoting-Code-Generator verwendet, um den Typ zu generieren, der Anforderungen vom Client an den richtigen Schnittstelle und die Methode des Remoteobjekts verteilt. </p>'
    syntax:
      content: public class MethodDispatcherBase
  - uid: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.getInterfaceId()
    parent: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base
    href: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.yml
    name: getInterfaceId()
    nameWithType: MethodDispatcherBase.getInterfaceId()
    fullName: int microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.getInterfaceId()
    type: Method
    summary: |-
      <p>Schnittstellen-Id wird verwendet, um Remoting-Schnittstellen zu identifizieren.</p>
      <p></p>
    syntax:
      content: public int getInterfaceId()
      return:
        type: f75371fa
        description: <p>Schnittstellen-Id. </p>
  - uid: 'microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.dispatchAsync(Object,int,Object,CancellationToken)'
    parent: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base
    href: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.yml
    name: 'dispatchAsync(Object objectImplementation, int methodId, Object requestMsgBody, CancellationToken cancellationToken)'
    nameWithType: 'MethodDispatcherBase.dispatchAsync(Object objectImplementation, int methodId, Object requestMsgBody, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<Object> microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.dispatchAsync(Object objectImplementation, int methodId, Object requestMsgBody, CancellationToken cancellationToken)'
    type: Method
    summary: |-
      <p>Diese Methode wird vom Verteiler für die generierte Methode auf dispatch-Anforderung zur angegebenen MethodId der durch das Remoteobjekt implementierten Schnittstelle implementiert.</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<Object> dispatchAsync(Object objectImplementation, int methodId, Object requestMsgBody, CancellationToken cancellationToken)'
      parameters:
        - id: objectImplementation
          type: '79317049'
          description: <p>Die Instanz prozessübergreifendes Remoteobjekt </p>
        - id: methodId
          type: f75371fa
          description: <p>ID der-Methode </p>
        - id: requestMsgBody
          type: '79317049'
          description: <p>Anforderungstext </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
      return:
        type: 55aa5245
        description: '<p>Ein <ref refid="" kindref="compound">java.util.concurrent.CompletableFuture</ref> , ausstehenden Vorgang darstellt. Das Ergebnis des Vorgangs ist der Rückgabewert der Methode. </p>'
  - uid: system.fabric._cancellation_token
    parent: system.fabric
    href: system.fabric._cancellation_token.yml
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: system.fabric.CancellationToken
    type: Class
    summary: '<p>Ein <xref href="system.fabric._cancellation_token" data-throw-if-not-resolved="false"></xref> wird verwendet, um die Benachrichtigung verteilt wird, dass Vorgänge abgebrochen werden sollen. Sie erstellen ein Abbruchtoken, das durch die Instanziierung einer <xref href="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false"></xref> -Objekt, das Abbruchtoken verwaltet entnommen seine <xref href="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false"></xref> Methode. Übergeben Sie dann das Abbruchtoken, das auf eine beliebige Anzahl von Vorgängen, die Nachricht vom Abbruch erhalten soll. Das Token kann nicht verwendet werden, um den Abbruch zu initiieren. Wenn das besitzende Objekt aufruft <xref href="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false"></xref>, auf das Abbruchtoken, das die abgebrochene Eigenschaft festgelegt ist auf "true". Die Objekte, die die Benachrichtigung empfangen können Antworten Verfolgungsinformationen geeignet ist. </p>'
    syntax:
      content: public class CancellationToken
  - uid: 'microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.dispatch(Object,int,Object)'
    parent: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base
    href: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.yml
    name: 'dispatch(Object objectImplementation, int methodId, Object requestMsgBody)'
    nameWithType: 'MethodDispatcherBase.dispatch(Object objectImplementation, int methodId, Object requestMsgBody)'
    fullName: 'void microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.dispatch(Object objectImplementation, int methodId, Object requestMsgBody)'
    type: Method
    summary: |-
      <p>Diese Methode wird verwendet, eine unidirektionale Nachrichten auf der angegebenen MethodId der Schnittstelle implementiert, die vom Remote-Objekt verteilt wird.</p>
      <p></p>
    syntax:
      content: 'public void dispatch(Object objectImplementation, int methodId, Object requestMsgBody)'
      parameters:
        - id: objectImplementation
          type: '79317049'
          description: <p>prozessübergreifendes Remoteobjekt Implementierung. </p>
        - id: methodId
          type: f75371fa
          description: '<p>MethodId der Schnittstelle implementiert, die durch die prozessübergreifendes Remoteobjekt. </p>'
        - id: requestMsgBody
          type: '79317049'
          description: <p>der Nachrichtentext. </p>
  - uid: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.getMethodName(int)
    parent: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base
    href: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.yml
    name: getMethodName(int methodId)
    nameWithType: MethodDispatcherBase.getMethodName(int methodId)
    fullName: String microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.getMethodName(int methodId)
    type: Method
    syntax:
      content: public String getMethodName(int methodId)
      parameters:
        - id: methodId
          type: f75371fa
      return:
        type: '26831127'