### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.actors._actor_proxy
    id: _actor_proxy
    parent: microsoft.servicefabric.actors
    children:
      - microsoft.servicefabric.actors._actor_proxy.getActorId()
      - microsoft.servicefabric.actors._actor_proxy.getActorServicePartitionClient()
    href: microsoft.servicefabric.actors._actor_proxy.yml
    langs:
      - java
    name: ActorProxy
    nameWithType: ActorProxy
    fullName: microsoft.servicefabric.actors.ActorProxy
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxy.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxy.java
      startLine: 5
    package: microsoft.servicefabric.actors
    summary: <p>Stellt eine Schnittstelle zur Implementierung des Proxyzugriffs für Akteur-Dienst. </p>
    syntax:
      content: public interface ActorProxy
  - uid: microsoft.servicefabric.actors._actor_proxy.getActorId()
    id: getActorId()
    parent: microsoft.servicefabric.actors._actor_proxy
    href: microsoft.servicefabric.actors._actor_proxy.yml
    langs:
      - java
    name: getActorId()
    nameWithType: ActorProxy.getActorId()
    fullName: ActorId microsoft.servicefabric.actors.ActorProxy.getActorId()
    overload: microsoft.servicefabric.actors._actor_proxy.getActorId*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxy.java
      startLine: 12
    package: microsoft.servicefabric.actors
    summary: |-
      <p>Ruft <xref href="microsoft.servicefabric.actors._actor_id" data-throw-if-not-resolved="false"></xref> Proxy-Objekt zugeordnet.</p>
      <p></p>
    syntax:
      content: public ActorId getActorId()
      return:
        type: microsoft.servicefabric.actors._actor_id
        description: "<p>\r\n\r\n  <xref href=\"microsoft.servicefabric.actors._actor_id\" data-throw-if-not-resolved=\"false\"></xref>die Proxy-Objekt zugeordnet ist. </p>"
  - uid: microsoft.servicefabric.actors._actor_proxy.getActorServicePartitionClient()
    id: getActorServicePartitionClient()
    parent: microsoft.servicefabric.actors._actor_proxy
    href: microsoft.servicefabric.actors._actor_proxy.yml
    langs:
      - java
    name: getActorServicePartitionClient()
    nameWithType: ActorProxy.getActorServicePartitionClient()
    fullName: ActorServicePartitionClientImpl microsoft.servicefabric.actors.ActorProxy.getActorServicePartitionClient()
    overload: microsoft.servicefabric.actors._actor_proxy.getActorServicePartitionClient*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxy.java
      startLine: 21
    package: microsoft.servicefabric.actors
    summary: |-
      <p>Ruft <ref refid="" kindref="compound">microsoft.servicefabric.actors.ActorServicePartitionClientImpl</ref> , die diesen Proxy für die Kommunikation mit dem Akteur verwendet wird.</p>
      <p></p>
    syntax:
      content: public ActorServicePartitionClientImpl getActorServicePartitionClient()
      return:
        type: ef7224bd
        description: "<p>\r\n\r\n  <ref refid=\"\" kindref=\"compound\">microsoft.servicefabric.actors.ActorServicePartitionClientImpl</ref> , die diesen Proxy für die Kommunikation mit dem Akteur verwendet wird. </p>"
references:
  - uid: microsoft.servicefabric.actors._actor_proxy.getActorId*
    name: getActorId
    nameWithType: ActorProxy.getActorId
    fullName: ActorId microsoft.servicefabric.actors.ActorProxy.getActorId
    package: microsoft.servicefabric.actors
  - uid: ef7224bd
    spec.java:
      - name: ActorServicePartitionClientImpl
        fullName: ActorServicePartitionClientImpl
  - uid: microsoft.servicefabric.actors._actor_proxy.getActorServicePartitionClient*
    name: getActorServicePartitionClient
    nameWithType: ActorProxy.getActorServicePartitionClient
    fullName: ActorServicePartitionClientImpl microsoft.servicefabric.actors.ActorProxy.getActorServicePartitionClient
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_proxy_base
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    name: ActorProxyBase
    nameWithType: ActorProxyBase
    fullName: microsoft.servicefabric.actors.ActorProxyBase
    type: Class
    summary: <p>Stellt die basisimplementierung für den Proxy an den Remoteserver Akteur Objekten IActor Schnittstellen implementieren. </p>
    syntax:
      content: public class ActorProxyBase
  - uid: microsoft.servicefabric.actors._actor_id
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_id.yml
    name: ActorId
    nameWithType: ActorId
    fullName: microsoft.servicefabric.actors.ActorId
    type: Class
    summary: "<p>\r\n\r\n  <xref href=\"microsoft.servicefabric.actors._actor_id\" data-throw-if-not-resolved=\"false\"></xref>die Identität der Akteur innerhalb eines Diensts Akteur. Akteure können festgestellt werden, indem <ref refid=\"\" kindref=\"compound\">java.lang.String</ref>, <ref refid=\"\" kindref=\"compound\">java.util.UUID</ref> oder lang. </p>"
    syntax:
      content: public class ActorId
  - uid: microsoft.servicefabric.actors._actor_proxy_base.getActorId()
    parent: microsoft.servicefabric.actors._actor_proxy_base
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    name: getActorId()
    nameWithType: ActorProxyBase.getActorId()
    fullName: ActorId microsoft.servicefabric.actors.ActorProxyBase.getActorId()
    type: Method
    summary: |-
      <p>Ruft <xref href="microsoft.servicefabric.actors._actor_id" data-throw-if-not-resolved="false"></xref> Proxy-Objekt zugeordnet.</p>
      <p></p>
    syntax:
      content: public ActorId getActorId()
      return:
        type: microsoft.servicefabric.actors._actor_id
        description: "<p>\r\n\r\n  <xref href=\"microsoft.servicefabric.actors._actor_id\" data-throw-if-not-resolved=\"false\"></xref>die Proxy-Objekt zugeordnet ist. </p>"
  - uid: microsoft.servicefabric.actors._actor_proxy_base.getActorServicePartitionClient()
    parent: microsoft.servicefabric.actors._actor_proxy_base
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    name: getActorServicePartitionClient()
    nameWithType: ActorProxyBase.getActorServicePartitionClient()
    fullName: ActorServicePartitionClientImpl microsoft.servicefabric.actors.ActorProxyBase.getActorServicePartitionClient()
    type: Method
    summary: |-
      <p>Ruft <ref refid="" kindref="compound">microsoft.servicefabric.actors.ActorServicePartitionClientImpl</ref> , die diesen Proxy für die Kommunikation mit dem Akteur verwendet wird.</p>
      <p></p>
    syntax:
      content: public ActorServicePartitionClientImpl getActorServicePartitionClient()
      return:
        type: ef7224bd
        description: "<p>\r\n\r\n  <ref refid=\"\" kindref=\"compound\">microsoft.servicefabric.actors.ActorServicePartitionClientImpl</ref> , die diesen Proxy für die Kommunikation mit dem Akteur verwendet wird. </p>"