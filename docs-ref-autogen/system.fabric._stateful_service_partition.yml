### YamlMime:ManagedReference
items:
  - uid: system.fabric._stateful_service_partition
    id: _stateful_service_partition
    parent: system.fabric
    children:
      - 'system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)'
      - system.fabric._stateful_service_partition.getReadStatus()
      - system.fabric._stateful_service_partition.getwriteStatus()
      - system.fabric._stateful_service_partition.reportReplicaHealth(HealthInformation)
    href: system.fabric._stateful_service_partition.yml
    langs:
      - java
    name: StatefulServicePartition
    nameWithType: StatefulServicePartition
    fullName: system.fabric.StatefulServicePartition
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
      startLine: 5
    package: system.fabric
    syntax:
      content: public interface StatefulServicePartition extends ServicePartition
    inheritedMembers:
      - system.fabric._service_partition.getPartitionInfo()
      - system.fabric._service_partition.reportFault(FaultType)
      - system.fabric._service_partition.reportLoad(Collection<LoadMetric>)
      - system.fabric._service_partition.reportMoveCost(MoveCost)
      - system.fabric._service_partition.reportPartitionHealth(HealthInformation)
  - uid: 'system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)'
    id: 'createReplicator(StateProvider,ReplicatorSettings)'
    parent: system.fabric._stateful_service_partition
    href: system.fabric._stateful_service_partition.yml
    langs:
      - java
    name: 'createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)'
    nameWithType: 'StatefulServicePartition.createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)'
    fullName: 'FabricReplicator system.fabric.StatefulServicePartition.createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)'
    overload: system.fabric._stateful_service_partition.createReplicator*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
      startLine: 51
    package: system.fabric
    summary: "<p>Erstellt eine <xref href=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\"></xref> mit den angegebenen Einstellungen und gibt ihn an das Replikat zurück.</p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>zur Erstellung sollte diese Methode verwendet eine <xref href=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\"></xref> Service als die <xref href=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\"></xref> für ein zustandsbehafteter Dienst, der implementiert <xref href=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\"></xref>. </p>"
    syntax:
      content: 'public FabricReplicator createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)'
      parameters:
        - id: stateProvider
          type: system.fabric._state_provider
          description: '<p>Die <xref href="system.fabric._state_provider" data-throw-if-not-resolved="false"></xref> mit dem zurückgegebenen <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref> verknüpft werden sollen. Dies ist häufig das gleiche Objekt, das implementiert <xref href="system.fabric._stateful_service_replica" data-throw-if-not-resolved="false"></xref>, jedoch bestimmte Dienste möglicherweise anders behandelt werden. </p>'
        - id: replicatorSettings
          type: system.fabric._replicator_settings
          description: "<p>\r\n\r\n  <xref href=\"system.fabric._replicator_settings\" data-throw-if-not-resolved=\"false\"></xref>mit dem zurückgegebenen <xref href=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\"></xref> muss konfiguriert werden. </p>"
      return:
        type: system.fabric._fabric_replicator
        description: <p>Gibt <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref>. </p>
  - uid: system.fabric._stateful_service_partition.getReadStatus()
    id: getReadStatus()
    parent: system.fabric._stateful_service_partition
    href: system.fabric._stateful_service_partition.yml
    langs:
      - java
    name: getReadStatus()
    nameWithType: StatefulServicePartition.getReadStatus()
    fullName: PartitionAccessStatus system.fabric.StatefulServicePartition.getReadStatus()
    overload: system.fabric._stateful_service_partition.getReadStatus*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
      startLine: 17
    package: system.fabric
    summary: "<p>Verwendet, um die Bereitschaft des Replikats hinsichtlich Lesevorgänge zu überprüfen.</p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold>der ReadStatus sollte aktiviert sein, bevor das Replikat eine kundenanforderung verarbeitet wird, die ein Lesevorgang ist. </p>"
    syntax:
      content: public PartitionAccessStatus getReadStatus()
      return:
        type: system.fabric._partition_access_status
        description: "<p>\r\n\r\n  <xref href=\"system.fabric._partition_access_status\" data-throw-if-not-resolved=\"false\"></xref>. </p>"
    exceptions:
      - type: system.fabric.exception._fabric_object_closed_exception
        description: '<p>Dies gibt an, dass die Partitionsobjekt geschlossen ist. Die/Replikator/Replikatinstanz entweder geschlossen wurde oder wird jetzt geschlossen werden. </p>'
  - uid: system.fabric._stateful_service_partition.getwriteStatus()
    id: getwriteStatus()
    parent: system.fabric._stateful_service_partition
    href: system.fabric._stateful_service_partition.yml
    langs:
      - java
    name: getwriteStatus()
    nameWithType: StatefulServicePartition.getwriteStatus()
    fullName: PartitionAccessStatus system.fabric.StatefulServicePartition.getwriteStatus()
    overload: system.fabric._stateful_service_partition.getwriteStatus*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
      startLine: 30
    package: system.fabric
    summary: "<p>Verwendet, um die Bereitschaft der Partition hinsichtlich Schreibvorgänge zu überprüfen.</p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold>der WriteStatus sollte aktiviert sein, bevor das Replikat eine kundenanforderung Dienste, von denen ein Schreibvorgang ist. </p>"
    syntax:
      content: public PartitionAccessStatus getwriteStatus()
      return:
        type: system.fabric._partition_access_status
        description: "<p>\r\n\r\n  <xref href=\"system.fabric._partition_access_status\" data-throw-if-not-resolved=\"false\"></xref>. </p>"
    exceptions:
      - type: system.fabric.exception._fabric_object_closed_exception
        description: '<p>Dies gibt an, dass die Partitionsobjekt geschlossen ist. Die/Replikator/Replikatinstanz entweder geschlossen wurde oder wird jetzt geschlossen werden. </p>'
  - uid: system.fabric._stateful_service_partition.reportReplicaHealth(HealthInformation)
    id: reportReplicaHealth(HealthInformation)
    parent: system.fabric._stateful_service_partition
    href: system.fabric._stateful_service_partition.yml
    langs:
      - java
    name: reportReplicaHealth(HealthInformation healthInfo)
    nameWithType: StatefulServicePartition.reportReplicaHealth(HealthInformation healthInfo)
    fullName: void system.fabric.StatefulServicePartition.reportReplicaHealth(HealthInformation healthInfo)
    overload: system.fabric._stateful_service_partition.reportReplicaHealth*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
      startLine: 59
    package: system.fabric
    summary: |-
      <p>Das aktuelle Replikat dieser Partition zugeordnet Integrität gemeldet.</p>
      <p></p>
    syntax:
      content: public void reportReplicaHealth(HealthInformation healthInfo)
      parameters:
        - id: healthInfo
          type: system.fabric.health._health_information
          description: '<p>Zustandsinformationen, die gemeldet werden soll. </p>'
references:
  - uid: system.fabric._stateful_service_partition.getReadStatus*
    name: getReadStatus
    nameWithType: StatefulServicePartition.getReadStatus
    fullName: PartitionAccessStatus system.fabric.StatefulServicePartition.getReadStatus
    package: system.fabric
  - uid: system.fabric._stateful_service_partition.getwriteStatus*
    name: getwriteStatus
    nameWithType: StatefulServicePartition.getwriteStatus
    fullName: PartitionAccessStatus system.fabric.StatefulServicePartition.getwriteStatus
    package: system.fabric
  - uid: system.fabric._stateful_service_partition.createReplicator*
    name: createReplicator
    nameWithType: StatefulServicePartition.createReplicator
    fullName: FabricReplicator system.fabric.StatefulServicePartition.createReplicator
    package: system.fabric
  - uid: system.fabric._stateful_service_partition.reportReplicaHealth*
    name: reportReplicaHealth
    nameWithType: StatefulServicePartition.reportReplicaHealth
    fullName: void system.fabric.StatefulServicePartition.reportReplicaHealth
    package: system.fabric
  - uid: system.fabric._service_partition.getPartitionInfo()
    parent: system.fabric._service_partition
    href: system.fabric._service_partition.yml
    name: getPartitionInfo()
    nameWithType: ServicePartition.getPartitionInfo()
    fullName: ServicePartitionInformation system.fabric.ServicePartition.getPartitionInfo()
    type: Method
    summary: |-
      <p>Ermöglicht den Zugriff auf die <xref href="system.fabric._service_partition_information" data-throw-if-not-resolved="false"></xref> des Diensts, enthält die Partitionstyp und -ID.</p>
      <p></p>
    syntax:
      content: public ServicePartitionInformation getPartitionInfo()
      return:
        type: system.fabric._service_partition_information
        description: <p>Gibt <xref href="system.fabric._service_partition_information" data-throw-if-not-resolved="false"></xref>. </p>
  - uid: system.fabric._service_partition.reportFault(FaultType)
    parent: system.fabric._service_partition
    href: system.fabric._service_partition.yml
    name: reportFault(FaultType faultType)
    nameWithType: ServicePartition.reportFault(FaultType faultType)
    fullName: void system.fabric.ServicePartition.reportFault(FaultType faultType)
    type: Method
    summary: "<p>Meldet die Last für einen Satz von Metriken für den Lastenausgleich. Die Auslastung kann zu einem beliebigen Zeitpunkt über gemeldet werden die <ref refid=\"\" kindref=\"compound\">java.util.Collection</ref> von <xref href=\"system.fabric._load_metric\" data-throw-if-not-resolved=\"false\"></xref> Methode und stellt eine oder mehrere Eigenschaften von der <xref href=\"system.fabric._load_metric\" data-throw-if-not-resolved=\"false\"></xref> Methode.</p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold>ein Fehler wird i. d. r. gemeldet, wenn der Dienstcode erkennt einige ausstellen, von denen nicht wiederhergestellt werden kann. </p>"
    syntax:
      content: public void reportFault(FaultType faultType)
      parameters:
        - id: faultType
          type: system.fabric._fault_type
          description: '<p>Die <xref href="system.fabric._load_metric" data-throw-if-not-resolved="false"></xref> , die der Dienst aufgetreten sind. </p>'
  - uid: system.fabric._service_partition.reportLoad(Collection<LoadMetric>)
    parent: system.fabric._service_partition
    href: system.fabric._service_partition.yml
    name: reportLoad(Collection<LoadMetric> metrics)
    nameWithType: ServicePartition.reportLoad(Collection<LoadMetric> metrics)
    fullName: void system.fabric.ServicePartition.reportLoad(Collection<LoadMetric> metrics)
    type: Method
    summary: "<p>Meldet die Last für einen Satz von Metriken für den Lastenausgleich. Die Auslastung kann zu einem beliebigen Zeitpunkt über gemeldet werden die <ref refid=\"\" kindref=\"compound\">java.util.Collection</ref> von <xref href=\"system.fabric._load_metric\" data-throw-if-not-resolved=\"false\"></xref> Methode und stellt eine oder mehrere Eigenschaften von der <xref href=\"system.fabric._load_metric\" data-throw-if-not-resolved=\"false\"></xref> Methode.</p>\n<p>\r\n\r\n  <bold>\"Hinweise\":</bold>gemeldeten Metriken sollten entsprechen denen, die finden Sie in der <xref href=\"system.fabric._service_load_metric_description\" data-throw-if-not-resolved=\"false\"></xref> als Teil der <xref href=\"system.fabric._service_description\" data-throw-if-not-resolved=\"false\"></xref> , die zum Erstellen des Diensts verwendet wird. Lastmetriken, die nicht in der Beschreibung vorhanden sind, werden ignoriert. Können benutzerdefinierte Metriken Reporting Service Fabric zum Lastenausgleich für Dienste, die zusätzliche benutzerdefinierte Informationen basieren. </p>"
    syntax:
      content: public void reportLoad(Collection<LoadMetric> metrics)
      parameters:
        - id: metrics
          type: 12ebb11asystem.fabric._load_metrica08ddfce
          description: <p>Auflistung von <xref href="system.fabric._load_metric" data-throw-if-not-resolved="false"></xref> um die Last zu melden. </p>
  - uid: system.fabric._service_partition.reportMoveCost(MoveCost)
    parent: system.fabric._service_partition
    href: system.fabric._service_partition.yml
    name: reportMoveCost(MoveCost moveCost)
    nameWithType: ServicePartition.reportMoveCost(MoveCost moveCost)
    fullName: void system.fabric.ServicePartition.reportMoveCost(MoveCost moveCost)
    type: Method
    summary: "<p>Meldet die Move-Kosten für ein Replikat.</p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold>Dienste verschieben Kosten für ein Replikat, das mit dieser Methode können gemeldet werden. Während der Service Fabric-Ressource Bilanzen den besten Kompromiss im Cluster sucht, überprüft es Informationen geladen und Kosten für jedes Replikat verschieben. Ressource Bilanzen, bevorzugen wahrscheinlich Replikate mit niedrigeren Kosten zu verschieben, um einen Lastenausgleich zu erzielen. </p>"
    syntax:
      content: public void reportMoveCost(MoveCost moveCost)
      parameters:
        - id: moveCost
          type: system.fabric._move_cost
          description: <p>Die gemeldete <xref href="system.fabric._move_cost" data-throw-if-not-resolved="false"></xref>. </p>
  - uid: system.fabric._service_partition.reportPartitionHealth(HealthInformation)
    parent: system.fabric._service_partition
    href: system.fabric._service_partition.yml
    name: reportPartitionHealth(HealthInformation healthInfo)
    nameWithType: ServicePartition.reportPartitionHealth(HealthInformation healthInfo)
    fullName: void system.fabric.ServicePartition.reportPartitionHealth(HealthInformation healthInfo)
    type: Method
    summary: |-
      <p>Partitionsintegrität der aktuellen gemeldet.</p>
      <p></p>
    syntax:
      content: public void reportPartitionHealth(HealthInformation healthInfo)
      parameters:
        - id: healthInfo
          type: system.fabric.health._health_information
          description: <p>ist <ref refid="" kindref="compound">HealthInformation</ref></p>
  - uid: system.fabric._service_partition
    parent: system.fabric
    href: system.fabric._service_partition.yml
    name: ServicePartition
    nameWithType: ServicePartition
    fullName: system.fabric.ServicePartition
    type: Interface
    summary: '<p>Enthält Informationen zum Dienst die Partition, zu der sie gehört, und bietet Methoden für den Dienst für die Interaktion mit dem System während der Laufzeit. </p>'
    syntax:
      content: public interface ServicePartition
  - uid: system.fabric._j_stateful_service_partition
  - uid: system.fabric._partition_access_status
    parent: system.fabric
    href: system.fabric._partition_access_status.yml
    name: PartitionAccessStatus
    nameWithType: PartitionAccessStatus
    fullName: system.fabric.PartitionAccessStatus
    type: Enum
    syntax:
      content: public enum PartitionAccessStatus
  - uid: system.fabric.exception._fabric_object_closed_exception
    parent: system.fabric.exception
    href: system.fabric.exception._fabric_object_closed_exception.yml
    name: FabricObjectClosedException
    nameWithType: FabricObjectClosedException
    fullName: system.fabric.exception.FabricObjectClosedException
    type: Class
    syntax:
      content: public class FabricObjectClosedException extends FabricException
  - uid: system.fabric._fabric_replicator
    parent: system.fabric
    href: system.fabric._fabric_replicator.yml
    name: FabricReplicator
    nameWithType: FabricReplicator
    fullName: system.fabric.FabricReplicator
    type: Class
    summary: "<p>Repliziert den Status für hohe Verfügbarkeit und Zuverlässigkeit. </p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>stellt die Standardimplementierung von der <xref href=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"system.fabric._replicator\" data-throw-if-not-resolved=\"false\"></xref>, und <xref href=\"system.fabric._primary_replicator\" data-throw-if-not-resolved=\"false\"></xref> Schnittstellen, die Benutzerdienste werden, zusammen mit ihrer Implementierung von verwendet können der <xref href=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\"></xref> Schnittstelle. Eine Instanz von der <ref refid=\"\" kindref=\"compound\">system.fabric.FabricReplicator</ref> Klasse abgerufen wird, über die <xref href=\"system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\"></xref> -Methode, die in umgewandelt werden kann <xref href=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\"></xref> für die Verwendung. </p>"
    syntax:
      content: public class FabricReplicator implements Replicator
  - uid: system.fabric._state_provider
    parent: system.fabric
    href: system.fabric._state_provider.yml
    name: StateProvider
    nameWithType: StateProvider
    fullName: system.fabric.StateProvider
    type: Interface
    summary: '<p>Definiert das Verhalten, das ein Dienst implementieren muss, um die Interaktion mit der <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref>. </p>'
    syntax:
      content: public interface StateProvider
  - uid: system.fabric._replicator_settings
    parent: system.fabric
    href: system.fabric._replicator_settings.yml
    name: ReplicatorSettings
    nameWithType: ReplicatorSettings
    fullName: system.fabric.ReplicatorSettings
    type: Class
    syntax:
      content: public class ReplicatorSettings
  - uid: system.fabric._stateful_service_replica
    parent: system.fabric
    href: system.fabric._stateful_service_replica.yml
    name: StatefulServiceReplica
    nameWithType: StatefulServiceReplica
    fullName: system.fabric.StatefulServiceReplica
    type: Interface
    summary: "<p>Definiert das Verhalten, die den Lebenszyklus eines Replikats, z. B. starten, Initialisierung, rollenänderungen und Herunterfahren bestimmt. </p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold>zustandsbehaftete Diensttypen müssen diese Schnittstelle implementieren. Die Logik der einen zustandsbehafteten Diensttyp enthält, die auf primären Replikaten aufgerufen wird und Verhalten, die auf sekundären Replikaten aufgerufen wird. Wenn dienstautor vornehmen möchte mithilfe des bereitgestellten <xref href=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\"></xref>, und klicken Sie dann der Dienst, auch implementieren muss <xref href=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\"></xref> verwenden Sie die Implementierung der <xref href=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\"></xref> , die vom bereitgestellt<xref href=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\"></xref></p>"
    syntax:
      content: public interface StatefulServiceReplica
  - uid: system.fabric._state_replicator
    parent: system.fabric
    href: system.fabric._state_replicator.yml
    name: StateReplicator
    nameWithType: StateReplicator
    fullName: system.fabric.StateReplicator
    type: Interface
    syntax:
      content: public interface StateReplicator
  - uid: system.fabric.health._health_information
    parent: system.fabric.health
    href: system.fabric.health._health_information.yml
    name: HealthInformation
    nameWithType: HealthInformation
    fullName: system.fabric.health.HealthInformation
    type: Class
    summary: <p>Enthält die Zustandsinformationen zur Entität. Diese Informationen sind im Integritätsbericht enthalten. Sie wird auch als Teil der integritätsereignis bereitgestellt. </p>
    syntax:
      content: public class HealthInformation