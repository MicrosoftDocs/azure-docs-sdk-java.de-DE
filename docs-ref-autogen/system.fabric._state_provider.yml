### YamlMime:ManagedReference
items:
  - uid: system.fabric._state_provider
    id: _state_provider
    parent: system.fabric
    children:
      - system.fabric._state_provider.getCopyContext()
      - 'system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)'
      - system.fabric._state_provider.getLastCommittedSequenceNumber()
      - system.fabric._state_provider.onDataLossAsync(CancellationToken)
      - 'system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)'
    href: system.fabric._state_provider.yml
    langs:
      - java
    name: StateProvider
    nameWithType: StateProvider
    fullName: system.fabric.StateProvider
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/system.fabric/src/system/fabric/StateProvider.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/system.fabric/src/system/fabric/StateProvider.java
      startLine: 7
    package: system.fabric
    summary: '<p>Definiert das Verhalten, das ein Dienst implementieren muss, um die Interaktion mit der <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref>. </p>'
    syntax:
      content: public interface StateProvider
  - uid: system.fabric._state_provider.getCopyContext()
    id: getCopyContext()
    parent: system.fabric._state_provider
    href: system.fabric._state_provider.yml
    langs:
      - java
    name: getCopyContext()
    nameWithType: StateProvider.getCopyContext()
    fullName: OperationDataStream system.fabric.StateProvider.getCopyContext()
    overload: system.fabric._state_provider.getCopyContext*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StateProvider.java
      startLine: 97
    package: system.fabric
    summary: "<p>Kontext auf einem sekundären Replikat erhält, nachdem es erstellt und geöffnet, um den Kontext mit dem primären Replikat zu senden.</p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>das primäre Replikat analysiert den Kontext und zurücksendet Status über <xref href=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\"></xref> . <xref href=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\"></xref>wird aufgerufen, auf neu erstellt werden, inaktive sekundäre Replikate und bietet einen Mechanismus zum asynchron eine bidirektionale Konversation mit dem primären Replikat hergestellt. Das sekundäre Replikat sendet <xref href=\"system.fabric._operation_data\" data-throw-if-not-resolved=\"false\"></xref> Objekte, die mit dem das primäre Replikat den Status des Sammelns von Kontext auf dem sekundären Replikat bestimmen kann. Das primäre Replikat sendet seinerseits den erforderlichen Zustand zurück. Finden Sie unter <xref href=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\"></xref> an das primäre Replikat für die andere Hälfte des Austausches. Für InMemory-Dienste die <xref href=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\"></xref> Methode wird nicht aufgerufen, da der Status der sekundären Replikate bekannt ist (sie sind leer und benötigen alle Status). </p>"
    syntax: &ref_3
      content: public OperationDataStream getCopyContext()
      return:
        type: system.fabric._operation_data_stream
        description: <p>Gibt <xref href="system.fabric._operation_data_stream" data-throw-if-not-resolved="false"></xref>. </p>
  - uid: 'system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)'
    id: 'getCopyState(SequenceNumber,OperationDataStream)'
    parent: system.fabric._state_provider
    href: system.fabric._state_provider.yml
    langs:
      - java
    name: 'getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    nameWithType: 'StateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    fullName: 'OperationDataStream system.fabric.StateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    overload: system.fabric._state_provider.getCopyState*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StateProvider.java
      startLine: 132
    package: system.fabric
    summary: "<p>Ruft die Status für ein primäres Replikat, das erforderlich sind, um ein sekundäres Replikat zu erstellen.</p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>genauso <xref href=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\"></xref> ermöglicht das sekundäre Replikat das primäre Replikat über Kontext an ein <xref href=\"system.fabric._operation_data_stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\"></xref> ermöglicht das primäre Replikat antwortet ein <xref href=\"system.fabric._operation_data_stream\" data-throw-if-not-resolved=\"false\"></xref>. Der Datenstrom enthält Objekte, die an das sekundäre Replikat über übermittelt werden die <ref refid=\"\" kindref=\"compound\">system.fabric.StateReplicator#getCopyStream()</ref> Methode der <xref href=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\"></xref> Klasse. Implementieren Sie die Objekte <xref href=\"system.fabric._operation\" data-throw-if-not-resolved=\"false\"></xref> und die angegebenen Daten enthalten. Wenn das primäre Replikat dieser Aufruf empfängt, sollte er erstellen und Zurückgeben einer anderen <xref href=\"system.fabric._operation_data_stream\" data-throw-if-not-resolved=\"false\"></xref> enthält <xref href=\"system.fabric._operation_data\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"system.fabric._operation_data\" data-throw-if-not-resolved=\"false\"></xref>der datensynchronisierungsstatus darstellt, die das sekundäre Replikat </p>"
    syntax: &ref_2
      content: 'public OperationDataStream getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
      parameters:
        - id: upToSequenceNumber
          type: system.fabric._sequence_number
          description: '<p>Die maximale letzte Sequenznummer (LSN), die im Stream über Kopiervorgang platziert werden, sollten die <ref refid="" kindref="compound">system.fabric.StateReplicator#getCopyStream()</ref> Methode. LSNs, die größer als diese Zahl werden an das sekundäre Replikat als Teil der replikationsdatenstrom über übermittelt die <ref refid="" kindref="compound">system.fabric.StateReplicator#getReplicationStream()</ref> Methode. </p>'
        - id: copyContext
          type: system.fabric._operation_data_stream
          description: '<p>Ein <xref href="system.fabric._operation_data_stream" data-throw-if-not-resolved="false"></xref> , enthält die <xref href="system.fabric._operation_data" data-throw-if-not-resolved="false"></xref> Objekte, die vom sekundären Replikat erstellt werden. erfordert die Stand </p>'
      return:
        type: system.fabric._operation_data_stream
        description: <p>Gibt <xref href="system.fabric._operation_data_stream" data-throw-if-not-resolved="false"></xref>. </p>
  - uid: system.fabric._state_provider.getLastCommittedSequenceNumber()
    id: getLastCommittedSequenceNumber()
    parent: system.fabric._state_provider
    href: system.fabric._state_provider.yml
    langs:
      - java
    name: getLastCommittedSequenceNumber()
    nameWithType: StateProvider.getLastCommittedSequenceNumber()
    fullName: long system.fabric.StateProvider.getLastCommittedSequenceNumber()
    overload: system.fabric._state_provider.getLastCommittedSequenceNumber*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StateProvider.java
      startLine: 13
    package: system.fabric
    summary: |-
      <p>Ruft die letzte Sequenznummer, die der Dienst ein Commit ausgeführt wurde.</p>
      <p></p>
    syntax:
      content: public long getLastCommittedSequenceNumber()
      return:
        type: 0364520f
        description: <p>Long-Wert. </p>
  - uid: system.fabric._state_provider.onDataLossAsync(CancellationToken)
    id: onDataLossAsync(CancellationToken)
    parent: system.fabric._state_provider
    href: system.fabric._state_provider.yml
    langs:
      - java
    name: onDataLossAsync(CancellationToken cancellationToken)
    nameWithType: StateProvider.onDataLossAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<Boolean> system.fabric.StateProvider.onDataLossAsync(CancellationToken cancellationToken)
    overload: system.fabric._state_provider.onDataLossAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StateProvider.java
      startLine: 74
    package: system.fabric
    summary: "<p>Gibt an, dass ein schreibquorums Replikate in dieser Replikatsatz verloren gegangen ist und daher Datenverlust aufgetreten sind. Die Replikatgruppe besteht aus der Mehrheit der Replikate, die das primäre Replikat enthält.</p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold>bei die Service Fabric-Laufzeit einen Fehler des ein Quorum der Replikate, der das primäre Replikat enthält berücksichtigt, wählt ein neues primäres Replikat und sofort ruft diese Methode auf dem neuen primären Replikat. Ein primäres Replikat, das eines möglichen Datenverlusts informiert ist die Möglichkeit, den Zustand aus einer externen Datenquelle wiederherstellen oder kann weiterhin mit dem Status ausgeführt wird, die derzeit. Wenn der Dienst mit seinem aktuellen Zustand ausgeführt werden weiterhin, sollte es \"false\" von dieser Methode zurückgeben, der gibt an, dass keine Änderung vorgenommen wurde. Wenn es wiederhergestellt oder geändert Datenbankzustands, z. B. unvollständige Arbeit ein Rollback sollte \"true\" zurückgeben. Wenn \"true\" zurückgegeben wird, muss der Status in den anderen Replikaten angenommen werden, falsch zu sein. Aus diesem Grund die Service Fabric-Laufzeit die anderen Replikaten in der Replikatgruppe entfernt und erneut erstellt werden. </p>"
    syntax:
      content: public CompletableFuture<Boolean> onDataLossAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref href=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\"></xref>Objekt, das den Status der Abbruch des Vorgangs anzugeben. </p>"
      return:
        type: 7e53ac82
        description: '<p>Gibt <ref refid="" kindref="compound">CompletableFuture</ref> des Typs <ref refid="" kindref="compound">java.lang.Boolean</ref>, Wert, der angibt, ob die State-Anbieter als Teil der Verarbeitung dieser benachrichtigungs seinen Status geändert wurde </p>'
  - uid: 'system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)'
    id: 'updateEpochAsync(Epoch,SequenceNumber,CancellationToken)'
    parent: system.fabric._state_provider
    href: system.fabric._state_provider.yml
    langs:
      - java
    name: 'updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    nameWithType: 'StateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<?> system.fabric.StateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    overload: system.fabric._state_provider.updateEpochAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StateProvider.java
      startLine: 44
    package: system.fabric
    summary: "<p>Ein Replikat zeigt an, dass die Konfiguration einer Replikatgruppe aufgrund einer Änderung der geändert oder ändern, mit dem primären Replikat versucht. Die Änderung tritt aufgrund eines Fehlers oder Lastenausgleich des vorherigen primären Replikats. <xref href=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\"></xref>Änderungen fungieren als einer Barrier-Klasse, indem Sie segmentieren Vorgänge in die genaue Konfiguration Zeiträume, in denen sie von einem bestimmten primären Replikat gesendet wurden.</p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>die Informationen in der <xref href=\"system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> -Methode ermöglicht dem Dienst um einen Vektor Status aufrecht ist eine Liste der einzelnen Epoche, die das Replikat empfangen hat und die maximale LSN, die sie enthalten. Die Bearbeitung Vektordaten werden zusammen mit den aktuellen angewendeten maximale LSN eignet sich für ein sekundäres Replikat während des Kopiervorgangs zu senden, um den Status des Replikats zu beschreiben. Vergleichen von Fortschritt Vektoren, die während des Kopiervorgangs von sekundären Replikaten empfangen werden kann primäre Replikaten zu bestimmen, ob das sekundäre Replikat auf dem neuesten Stand ist, welchen Status an das sekundäre Replikat gesendet werden muss und gibt an, ob das sekundäre Replikat \"false\" Fortschritt erzielt hat. \"False\" Status bedeutet, dass ein sekundäres Replikat meldet wurde eine LSN in einer vorherigen Epoche größer als die LSN, die das primäre Replikat in seinen Fortschritt Vektor verfügt. </p>"
    syntax: &ref_1
      content: 'public CompletableFuture<?> updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
      parameters:
        - id: epoch
          type: system.fabric._epoch
          description: <p>Die neue <xref href="system.fabric._epoch" data-throw-if-not-resolved="false"></xref>. </p>
        - id: previousEpochLastSequenceNumber
          type: system.fabric._sequence_number
          description: <p>Die maximale Sequenznummer (LSN) in der vorherigen Epoche. </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref href=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\"></xref>Objekt, das den Status der Abbruch des Vorgangs anzugeben. </p>"
      return:
        type: 16409f84
        description: <p>Gibt <ref refid="" kindref="compound">CompletableFuture</ref>. </p>
references:
  - uid: 0364520f
    spec.java:
      - name: long
        fullName: long
  - uid: system.fabric._state_provider.getLastCommittedSequenceNumber*
    name: getLastCommittedSequenceNumber
    nameWithType: StateProvider.getLastCommittedSequenceNumber
    fullName: long system.fabric.StateProvider.getLastCommittedSequenceNumber
    package: system.fabric
  - uid: 16409f84
    spec.java:
      - name: CompletableFuture<?>
        fullName: CompletableFuture<?>
  - uid: system.fabric._state_provider.updateEpochAsync*
    name: updateEpochAsync
    nameWithType: StateProvider.updateEpochAsync
    fullName: CompletableFuture<?> system.fabric.StateProvider.updateEpochAsync
    package: system.fabric
  - uid: 7e53ac82
    spec.java:
      - name: CompletableFuture<Boolean>
        fullName: CompletableFuture<Boolean>
  - uid: system.fabric._state_provider.onDataLossAsync*
    name: onDataLossAsync
    nameWithType: StateProvider.onDataLossAsync
    fullName: CompletableFuture<Boolean> system.fabric.StateProvider.onDataLossAsync
    package: system.fabric
  - uid: system.fabric._state_provider.getCopyContext*
    name: getCopyContext
    nameWithType: StateProvider.getCopyContext
    fullName: OperationDataStream system.fabric.StateProvider.getCopyContext
    package: system.fabric
  - uid: system.fabric._state_provider.getCopyState*
    name: getCopyState
    nameWithType: StateProvider.getCopyState
    fullName: OperationDataStream system.fabric.StateProvider.getCopyState
    package: system.fabric
  - uid: microsoft.servicefabric.actors._null_actor_state_provider
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    name: VolatileActorStateProvider
    nameWithType: VolatileActorStateProvider
    fullName: microsoft.servicefabric.actors.VolatileActorStateProvider
    type: Class
    summary: "<p>\r\n\r\n  <xref href=\"microsoft.servicefabric.actors._actor_state_provider\" data-throw-if-not-resolved=\"false\"></xref>Implementierung für flüchtige Persistenz Einstufige <xref href=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\"></xref>Status ist nur im Arbeitsspeicher beibehalten werden. </p>"
    syntax:
      content: public class VolatileActorStateProvider
  - uid: system.fabric._atomic_group_state_provider
    parent: system.fabric
    href: system.fabric._atomic_group_state_provider.yml
    name: AtomicGroupStateProvider
    nameWithType: AtomicGroupStateProvider
    fullName: system.fabric.AtomicGroupStateProvider
    type: Interface
    syntax:
      content: public interface AtomicGroupStateProvider extends StateProvider
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.getLastCommittedSequenceNumber()
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    name: getLastCommittedSequenceNumber()
    nameWithType: VolatileActorStateProvider.getLastCommittedSequenceNumber()
    fullName: long microsoft.servicefabric.actors.VolatileActorStateProvider.getLastCommittedSequenceNumber()
    type: Method
    summary: "<p>Ruft die letzte Sequenznummer, die der Dienst ein Commit ausgeführt wurde.</p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold>diese Methode wird von einem Dienst aufgerufen, wenn zuerst gestartet wurde, gestartet werden soll, für den Fall, dass sie persistenten Status hat und vermutlich Daten verloren gehen. Beim Start eines zustandsbehafteten dienstreplikats, hat er die Option zum Wiederherstellen von Daten, die beibehalten wurden möglicherweise von früheren Updates. Wenn ein Zustand, der auf diese Weise wiederhergestellt werden, ist seines aktuellen Fortschritts die letzte geschriebene Sequenznummer für diese Daten an. Volatile-Dienst kann einfach 0 zurückgeben. Beachten Sie, dass diese Methode nicht aufgerufen wird, um eine neue primäre Wahl während eines Failovers, zu bestimmen, da der aktuelle Status für die ein Commit ausgeführt wurde bereits bekannt ist die <ref refid=\"\" kindref=\"compound\">FabricReplicator</ref> Klasse zu diesem Zeitpunkt. </p>"
    syntax:
      content: public long getLastCommittedSequenceNumber()
      return:
        type: 0364520f
        description: <p>Long-Wert. </p>
  - uid: 'microsoft.servicefabric.actors._volatile_actor_state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)'
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    name: 'updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    nameWithType: 'VolatileActorStateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    type: Method
    summary: "<p>Ein Replikat zeigt an, dass die Konfiguration einer Replikatgruppe aufgrund einer Änderung der geändert oder ändern, mit dem primären Replikat versucht. Die Änderung tritt aufgrund eines Fehlers oder Lastenausgleich des vorherigen primären Replikats. Epoche Änderungen fungieren als einer Barrier-Klasse, indem Sie segmentieren Vorgänge in die genaue Konfiguration Zeiträume, in denen sie von einem bestimmten primären Replikat gesendet wurden.</p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold>diese Methode wird aufgerufen, weil das primäre Replikat der Replikatgruppe geändert hat, oder eine Änderung Angriffsversuch. Sekundäre Replikate empfangen diese Methode, wenn sie sind im Begriff, das neue primäre Replikat oder, wenn sie nicht zum neuen primären Replikat sind, sie erhalten sie beim Versuch, das neue primäre Replikat aus dem replikationsdatenstrom den ersten Vorgang entnommen werden. Diese Methode möglicherweise von primäre Replikaten gelegentlich angezeigt werden, wenn versucht wird, das primäre Replikat auszutauschen, was nicht gelingt. Die Informationen in der <xref href=\"system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> -Methode ermöglicht dem Dienst um einen Vektor Status aufrecht ist eine Liste der einzelnen Epoche, die das Replikat empfangen hat und die maximale LSN, die sie enthalten. Die Bearbeitung Vektordaten werden zusammen mit den aktuellen angewendeten maximale LSN eignet sich für ein sekundäres Replikat zu beschreiben, wie weit der Vorgang fortgeschritten ist während des Kopiervorgangs zu senden. Vergleichen von Fortschritt Vektoren, die während des Kopiervorgangs von sekundären Replikaten empfangen werden kann primäre Replikaten zu bestimmen, ob das sekundäre Replikat auf dem neuesten Stand ist, welchen Status an das sekundäre Replikat gesendet werden muss und gibt an, ob das sekundäre Replikat \"false\" Fortschritt erzielt hat. \"False\" Status bedeutet, dass es sich bei eine LSN in einer vorherigen Epoche größer als die LSN war, in denen das primäre Replikat empfängt. </p>"
    syntax:
      content: 'public CompletableFuture<?> updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
      parameters:
        - id: epoch
          type: system.fabric._epoch
          description: <p>Die neue <ref refid="" kindref="compound">Epoche</ref>. </p>
        - id: previousEpochLastSequenceNumber
          type: system.fabric._sequence_number
          description: '<p>Die maximale Sequenznummer (LSN), die in der vorherigen Epoche beobachtet wurden sollten. </p>'
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref href=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\"></xref>Objekt, das den Status der Abbruch des Vorgangs anzugeben. </p>"
      return:
        type: 16409f84
        description: <p>Gibt die Aufgabe zurück. </p>
  - uid: system.fabric._epoch
    parent: system.fabric
    href: system.fabric._epoch.yml
    name: Epoch
    nameWithType: Epoch
    fullName: system.fabric.Epoch
    type: Class
    summary: "<p>Stellt die aktuelle Version der Service Fabric-Partition an. </p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>ein <xref href=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\"></xref> ist eine Konfiguration Zahl für die Partition als Ganzes. Beim Festlegen der Konfiguration des Replikats Änderungen, z. B., wenn das primäre Replikat ändert, werden die Vorgänge, die vom neuen primären Replikat repliziert werden als ein neues werden bezeichnet <xref href=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\"></xref> aus. der von dem alten primären Replikat gesendet wurden. Die Tatsache, die dass das primäre geändert hat ist nicht direkt sichtbar auf sekundäre Replikate, die nicht durch einen Fehler in der Regel betroffen sind, die das ursprüngliche primäre Replikat betroffen. Um nachzuverfolgen, dass sich das primäre Replikat geändert wurde, an das sekundäre Replikat übertragen werden. Diese Kommunikation erfolgt über die <xref href=\"system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> Methode. Die meisten Dienste können die Details der inneren Felder ignorieren die <xref href=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\"></xref> wie es in der Regel ausreichend ist zu wissen, dass die <xref href=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\"></xref> wurde geändert und Epochs, um zu bestimmen, relative Reihenfolge der Vorgänge und-Ereignisse im System zu vergleichen. Zu diesem Zweck sind Vergleichsoperationen bereitgestellt. </p>"
    syntax:
      content: public class Epoch
  - uid: system.fabric._sequence_number
    parent: system.fabric
    href: system.fabric._sequence_number.yml
    name: SequenceNumber
    nameWithType: SequenceNumber
    fullName: system.fabric.SequenceNumber
    type: Class
    syntax:
      content: public class SequenceNumber
  - uid: system.fabric._cancellation_token
    parent: system.fabric
    href: system.fabric._cancellation_token.yml
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: system.fabric.CancellationToken
    type: Class
    summary: '<p>Ein <xref href="system.fabric._cancellation_token" data-throw-if-not-resolved="false"></xref> wird verwendet, um die Benachrichtigung verteilt wird, dass Vorgänge abgebrochen werden sollen. Sie erstellen ein Abbruchtoken, das durch die Instanziierung einer <xref href="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false"></xref> -Objekt, das Abbruchtoken verwaltet entnommen seine <xref href="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false"></xref> Methode. Übergeben Sie dann das Abbruchtoken, das auf eine beliebige Anzahl von Vorgängen, die Nachricht vom Abbruch erhalten soll. Das Token kann nicht verwendet werden, um den Abbruch zu initiieren. Wenn das besitzende Objekt aufruft <xref href="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false"></xref>, auf das Abbruchtoken, das die abgebrochene Eigenschaft festgelegt ist auf "true". Die Objekte, die die Benachrichtigung empfangen können Antworten Verfolgungsinformationen geeignet ist. </p>'
    syntax:
      content: public class CancellationToken
  - uid: 'system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)'
    parent: system.fabric._state_provider
    href: system.fabric._state_provider.yml
    name: 'updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    nameWithType: 'StateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<?> system.fabric.StateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    type: Method
    summary: "<p>Ein Replikat zeigt an, dass die Konfiguration einer Replikatgruppe aufgrund einer Änderung der geändert oder ändern, mit dem primären Replikat versucht. Die Änderung tritt aufgrund eines Fehlers oder Lastenausgleich des vorherigen primären Replikats. <xref href=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\"></xref>Änderungen fungieren als einer Barrier-Klasse, indem Sie segmentieren Vorgänge in die genaue Konfiguration Zeiträume, in denen sie von einem bestimmten primären Replikat gesendet wurden.</p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>die Informationen in der <xref href=\"system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> -Methode ermöglicht dem Dienst um einen Vektor Status aufrecht ist eine Liste der einzelnen Epoche, die das Replikat empfangen hat und die maximale LSN, die sie enthalten. Die Bearbeitung Vektordaten werden zusammen mit den aktuellen angewendeten maximale LSN eignet sich für ein sekundäres Replikat während des Kopiervorgangs zu senden, um den Status des Replikats zu beschreiben. Vergleichen von Fortschritt Vektoren, die während des Kopiervorgangs von sekundären Replikaten empfangen werden kann primäre Replikaten zu bestimmen, ob das sekundäre Replikat auf dem neuesten Stand ist, welchen Status an das sekundäre Replikat gesendet werden muss und gibt an, ob das sekundäre Replikat \"false\" Fortschritt erzielt hat. \"False\" Status bedeutet, dass ein sekundäres Replikat meldet wurde eine LSN in einer vorherigen Epoche größer als die LSN, die das primäre Replikat in seinen Fortschritt Vektor verfügt. </p>"
    syntax: *ref_1
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.onDataLossAsync(CancellationToken)
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    name: onDataLossAsync(CancellationToken cancellationToken)
    nameWithType: VolatileActorStateProvider.onDataLossAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<Boolean> microsoft.servicefabric.actors.VolatileActorStateProvider.onDataLossAsync(CancellationToken cancellationToken)
    type: Method
    summary: "<p>Gibt an, dass ein schreibquorums Replikate in dieser Replikatsatz verloren gegangen ist und daher Datenverlust aufgetreten sind. Die Replikatgruppe besteht aus der Mehrheit der Replikate, die das primäre Replikat enthält.</p>\n<p>\r\n\r\n  <bold>Beschreibung:</bold>bei die Service Fabric-Laufzeit einen Fehler des ein Quorum der Replikate, der das primäre Replikat enthält berücksichtigt, wählt ein neues primäres Replikat und sofort ruft diese Methode auf dem neuen primären Replikat. Ein primäres Replikat, das eines möglichen Datenverlusts informiert ist die Möglichkeit, den Zustand aus einer externen Datenquelle wiederherstellen oder kann weiterhin mit dem Status ausgeführt wird, die derzeit. Wenn der Dienst mit seinem aktuellen Zustand ausgeführt werden weiterhin, sollte es \"false\" von dieser Methode zurückgeben, der gibt an, dass keine Änderung vorgenommen wurde. Wenn es wiederhergestellt oder geändert Datenbankzustands, z. B. unvollständige Arbeit ein Rollback sollte \"true\" zurückgeben. Wenn \"true\" zurückgegeben wird, muss der Status in den anderen Replikaten angenommen werden, falsch zu sein. Aus diesem Grund die Service Fabric-Laufzeit die anderen Replikaten in der Replikatgruppe entfernt und erneut erstellt werden. </p>"
    syntax:
      content: public CompletableFuture<Boolean> onDataLossAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref href=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\"></xref>Objekt, das den Status der Abbruch des Vorgangs anzugeben. </p>"
      return:
        type: 7e53ac82
        description: '<p>Gibt <ref refid="" kindref="compound">java.util.concurrent.CompletableFuture</ref> des Typs <ref refid="" kindref="compound">java.lang.Boolean</ref>, Wert, der angibt, ob der Zustand geändert hat. Die Methode gibt "true", falls es sich ändert, oder wenn es nicht geändert hat, gibt die Methode "false" zurück. </p>'
  - uid: system.fabric._operation_data_stream
    parent: system.fabric
    href: system.fabric._operation_data_stream.yml
    name: OperationDataStream
    nameWithType: OperationDataStream
    fullName: system.fabric.OperationDataStream
    type: Interface
    syntax:
      content: public interface OperationDataStream
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.getCopyContext()
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    name: getCopyContext()
    nameWithType: VolatileActorStateProvider.getCopyContext()
    fullName: OperationDataStream microsoft.servicefabric.actors.VolatileActorStateProvider.getCopyContext()
    type: Method
    summary: "<p>Kontext auf einem sekundären Replikat erhält, nachdem es erstellt und geöffnet, um den Kontext mit dem primären Replikat zu senden.</p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>das primäre Replikat analysiert den Kontext und zurücksendet Status über <xref href=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\"></xref>wird aufgerufen, auf neu erstellt werden, inaktive sekundäre Replikate und bietet einen Mechanismus zum asynchron eine bidirektionale Konversation mit dem primären Replikat hergestellt. Das sekundäre Replikat sendet <ref refid=\"\" kindref=\"compound\">OperationData</ref> Objekte, die mit dem das primäre Replikat den Status des Sammelns von Kontext auf dem sekundären Replikat bestimmen kann. Das primäre Replikat sendet seinerseits den erforderlichen Zustand zurück. Finden Sie unter <xref href=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\"></xref> an das primäre Replikat für die andere Hälfte des Austausches. Für InMemory-Dienste die <xref href=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\"></xref> Methode wird nicht aufgerufen, da der Status der sekundären Replikate bekannt ist (sie sind leer und benötigen alle Status). </p>"
    syntax:
      content: public OperationDataStream getCopyContext()
      return:
        type: system.fabric._operation_data_stream
        description: <p>Gibt <ref refid="" kindref="compound">OperationDataStream</ref>. </p>
  - uid: 'system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)'
    parent: system.fabric._state_provider
    href: system.fabric._state_provider.yml
    name: 'getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    nameWithType: 'StateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    fullName: 'OperationDataStream system.fabric.StateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    type: Method
    summary: "<p>Ruft die Status für ein primäres Replikat, das erforderlich sind, um ein sekundäres Replikat zu erstellen.</p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>genauso <xref href=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\"></xref> ermöglicht das sekundäre Replikat das primäre Replikat über Kontext an ein <xref href=\"system.fabric._operation_data_stream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\"></xref> ermöglicht das primäre Replikat antwortet ein <xref href=\"system.fabric._operation_data_stream\" data-throw-if-not-resolved=\"false\"></xref>. Der Datenstrom enthält Objekte, die an das sekundäre Replikat über übermittelt werden die <ref refid=\"\" kindref=\"compound\">system.fabric.StateReplicator#getCopyStream()</ref> Methode der <xref href=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\"></xref> Klasse. Implementieren Sie die Objekte <xref href=\"system.fabric._operation\" data-throw-if-not-resolved=\"false\"></xref> und die angegebenen Daten enthalten. Wenn das primäre Replikat dieser Aufruf empfängt, sollte er erstellen und Zurückgeben einer anderen <xref href=\"system.fabric._operation_data_stream\" data-throw-if-not-resolved=\"false\"></xref> enthält <xref href=\"system.fabric._operation_data\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"system.fabric._operation_data\" data-throw-if-not-resolved=\"false\"></xref>der datensynchronisierungsstatus darstellt, die das sekundäre Replikat </p>"
    syntax: *ref_2
  - uid: system.fabric._state_provider.getCopyContext()
    parent: system.fabric._state_provider
    href: system.fabric._state_provider.yml
    name: getCopyContext()
    nameWithType: StateProvider.getCopyContext()
    fullName: OperationDataStream system.fabric.StateProvider.getCopyContext()
    type: Method
    summary: "<p>Kontext auf einem sekundären Replikat erhält, nachdem es erstellt und geöffnet, um den Kontext mit dem primären Replikat zu senden.</p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>das primäre Replikat analysiert den Kontext und zurücksendet Status über <xref href=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\"></xref> . <xref href=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\"></xref>wird aufgerufen, auf neu erstellt werden, inaktive sekundäre Replikate und bietet einen Mechanismus zum asynchron eine bidirektionale Konversation mit dem primären Replikat hergestellt. Das sekundäre Replikat sendet <xref href=\"system.fabric._operation_data\" data-throw-if-not-resolved=\"false\"></xref> Objekte, die mit dem das primäre Replikat den Status des Sammelns von Kontext auf dem sekundären Replikat bestimmen kann. Das primäre Replikat sendet seinerseits den erforderlichen Zustand zurück. Finden Sie unter <xref href=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\"></xref> an das primäre Replikat für die andere Hälfte des Austausches. Für InMemory-Dienste die <xref href=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\"></xref> Methode wird nicht aufgerufen, da der Status der sekundären Replikate bekannt ist (sie sind leer und benötigen alle Status). </p>"
    syntax: *ref_3
  - uid: system.fabric._operation_data
    parent: system.fabric
    href: system.fabric._operation_data.yml
    name: OperationData
    nameWithType: OperationData
    fullName: system.fabric.OperationData
    type: Class
    syntax:
      content: public class OperationData
  - uid: 'microsoft.servicefabric.actors._volatile_actor_state_provider.getCopyState(SequenceNumber,OperationDataStream)'
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    name: 'getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    nameWithType: 'VolatileActorStateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    fullName: 'OperationDataStream microsoft.servicefabric.actors.VolatileActorStateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    type: Method
    summary: "<p>Ruft die Status für ein primäres Replikat, das erforderlich sind, um ein sekundäres Replikat zu erstellen.</p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>genauso <xref href=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\"></xref> ermöglicht das sekundäre Replikat das primäre Replikat über Kontext an ein <ref refid=\"\" kindref=\"compound\">OperationDataStream</ref>, <xref href=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\"></xref> ermöglicht das primäre Replikat antwortet ein <ref refid=\"\" kindref=\"compound\">OperationDataStream</ref>. Der Datenstrom enthält Objekte, die an das sekundäre Replikat über übermittelt werden die <ref refid=\"\" kindref=\"compound\">StateReplicator#getCopyStream()</ref> Methode der <ref refid=\"\" kindref=\"compound\">FabricReplicator</ref> Klasse. Implementieren Sie die Objekte <ref refid=\"\" kindref=\"compound\">Vorgang</ref> und die angegebenen Daten enthalten. Wenn das primäre Replikat dieser Aufruf empfängt, sollte er erstellen und Zurückgeben einer anderen <ref refid=\"\" kindref=\"compound\">OperationDataStream</ref> enthält <ref refid=\"\" kindref=\"compound\">OperationData</ref>. <ref refid=\"\" kindref=\"compound\">OperationData</ref> des datensynchronisierungsstatus darstellt, die das sekundäre Replikat </p>"
    syntax:
      content: 'public OperationDataStream getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
      parameters:
        - id: upToSequenceNumber
          type: system.fabric._sequence_number
          description: '<p>Die maximale letzte Sequenznummer (LSN), die im Stream über Kopiervorgang platziert werden, sollten die <ref refid="" kindref="compound">StateReplicator#getCopyStream()</ref> Methode. LSNs, die größer als diese Zahl werden an das sekundäre Replikat als Teil der replikationsdatenstrom über übermittelt die <ref refid="" kindref="compound">StateReplicator#getReplicationStream()</ref> Methode. </p>'
        - id: copyContext
          type: system.fabric._operation_data_stream
          description: '<p>Ein <ref refid="" kindref="compound">OperationDataStream</ref> , enthält die <ref refid="" kindref="compound">OperationData</ref> Objekte, die vom sekundären Replikat erstellt werden. erfordert die Stand </p>'
      return:
        type: system.fabric._operation_data_stream
        description: <p>Gibt <ref refid="" kindref="compound">OperationDataStream</ref>. </p>
  - uid: system.fabric._fabric_replicator
    parent: system.fabric
    href: system.fabric._fabric_replicator.yml
    name: FabricReplicator
    nameWithType: FabricReplicator
    fullName: system.fabric.FabricReplicator
    type: Class
    summary: "<p>Repliziert den Status für hohe Verfügbarkeit und Zuverlässigkeit. </p>\n<p>\r\n\r\n  <bold>Hinweise:</bold>stellt die Standardimplementierung von der <xref href=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"system.fabric._replicator\" data-throw-if-not-resolved=\"false\"></xref>, und <xref href=\"system.fabric._primary_replicator\" data-throw-if-not-resolved=\"false\"></xref> Schnittstellen, die Benutzerdienste werden, zusammen mit ihrer Implementierung von verwendet können der <xref href=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\"></xref> Schnittstelle. Eine Instanz von der <ref refid=\"\" kindref=\"compound\">system.fabric.FabricReplicator</ref> Klasse abgerufen wird, über die <xref href=\"system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\"></xref> -Methode, die in umgewandelt werden kann <xref href=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\"></xref> für die Verwendung. </p>"
    syntax:
      content: public class FabricReplicator implements Replicator
  - uid: system.fabric._operation
    parent: system.fabric
    href: system.fabric._operation.yml
    name: Operation
    nameWithType: Operation
    fullName: system.fabric.Operation
    type: Interface
    summary: "<p>\r\n\r\n  <bold>Hinweise:</bold>\r\n\r\n  <ref refid=\"\" kindref=\"compound\">system.fabric.Operation</ref> ist die Basisschnittstelle, die Änderungen beschreibt, die an ein sekundäres Replikat übermittelt werden. Sie enthalten die <ref refid=\"\" kindref=\"compound\">system.fabric.StateReplicator#replicateAsync (OperationData SequenceNumber, system.fabric.CancellationToken)</ref> und identifizieren Sie die Sequenznummer und andere Informationen. </p>"
    syntax:
      content: public interface Operation