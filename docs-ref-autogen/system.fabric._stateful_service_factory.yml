### YamlMime:ManagedReference
items:
  - uid: system.fabric._stateful_service_factory
    id: _stateful_service_factory
    parent: system.fabric
    children:
      - 'system.fabric._stateful_service_factory.createReplica(String,URI,byte [],UUID,long)'
    href: system.fabric._stateful_service_factory.yml
    langs:
      - java
    name: StatefulServiceFactory
    nameWithType: StatefulServiceFactory
    fullName: system.fabric.StatefulServiceFactory
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServiceFactory.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServiceFactory.java
      startLine: 14
    package: system.fabric
    summary: '<p>Stellt eine zustandsbehaftete dienstfactory, die für das Erstellen von Replikaten, der einen bestimmten Typ von einem zustandsbehafteten Dienst zuständig ist. Mit einem zustandsbehafteten Dienst Factorys registriert sind die <xref uid="system.fabric._fabric_runtime" data-throw-if-not-resolved="false">system.fabric.FabricRuntime</xref> von Diensthosts über <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricRuntime#registerStatefulServiceFactory (java.lang.String, system.fabric.StatefulServiceFactory)</xref> oder <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricRuntime#registerStatefulServiceFactoryAsync(java.lang.String,system.fabric.StatefulServiceFactory,java.time.Duration)</xref></p>'
    syntax:
      content: public interface StatefulServiceFactory
  - uid: 'system.fabric._stateful_service_factory.createReplica(String,URI,byte [],UUID,long)'
    id: 'createReplica(String,URI,byte [],UUID,long)'
    parent: system.fabric._stateful_service_factory
    href: system.fabric._stateful_service_factory.yml
    langs:
      - java
    name: 'createReplica(String serviceTypeName, URI serviceName, byte[] initializationData, UUID partitionId, long replicaId)'
    nameWithType: 'StatefulServiceFactory.createReplica(String serviceTypeName, URI serviceName, byte[] initializationData, UUID partitionId, long replicaId)'
    fullName: 'StatefulServiceReplica system.fabric.StatefulServiceFactory.createReplica(String serviceTypeName, URI serviceName, byte[] initializationData, UUID partitionId, long replicaId)'
    overload: system.fabric._stateful_service_factory.createReplica*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServiceFactory.java
      startLine: 35
    package: system.fabric
    summary: |-
      <p>Von Service Fabric zum Erstellen eines zustandsbehafteten dienstreplikats für einen bestimmten Dienst aufgerufen.</p>
      <p></p>
    syntax:
      content: 'public StatefulServiceReplica createReplica(String serviceTypeName, URI serviceName, byte[] initializationData, UUID partitionId, long replicaId)'
      parameters:
        - id: serviceTypeName
          type: '26831127'
          description: '<p>Der Diensttyp, den Service Fabric anfordert, erstellt werden. </p>'
        - id: serviceName
          type: '62304784'
          description: '<p>Der Fabric: / name (Uri) des Diensts, der dieses Replikat zugeordnet ist. </p>'
        - id: initializationData
          type: ccd9418d
          description: '<p>Ein Bytearray, das die Initialisierungsdaten enthält, die als Teil dieser Dienste ursprünglich übergeben wurde <xref uid="system.fabric._service_description" data-throw-if-not-resolved="false">system.fabric.ServiceDescription</xref>. </p>'
        - id: partitionId
          type: add9545a
          description: '<p>Die Partitions-ID des Typs, der eine GUID, die dieses Replikat zugeordnet ist. </p>'
        - id: replicaId
          type: 0364520f
          description: <p>Die Replikat-ID vom Typ long für dieses Replikat. </p>
      return:
        type: system.fabric._stateful_service_replica
        description: <p>Gibt <xref uid="system.fabric._stateful_service_replica" data-throw-if-not-resolved="false">system.fabric.StatefulServiceReplica</xref>. </p>
    exceptions:
      - type: 84fa3863
        description: <p>Bei der instanzerstellung </p>
      - type: '81e09942'
        description: <p>Für den Zugriff voilation </p>
references:
  - uid: 84fa3863
    spec.java:
      - name: InstantiationException
        fullName: InstantiationException
  - uid: '81e09942'
    spec.java:
      - name: IllegalAccessException
        fullName: IllegalAccessException
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: '62304784'
    spec.java:
      - name: URI
        fullName: URI
  - uid: ccd9418d
    spec.java:
      - name: 'byte []'
        fullName: 'byte []'
  - uid: add9545a
    spec.java:
      - name: UUID
        fullName: UUID
  - uid: 0364520f
    spec.java:
      - name: long
        fullName: long
  - uid: system.fabric._stateful_service_factory.createReplica*
    name: createReplica
    nameWithType: StatefulServiceFactory.createReplica
    fullName: StatefulServiceReplica system.fabric.StatefulServiceFactory.createReplica
    package: system.fabric
  - uid: microsoft.servicefabric.services.runtime._stateful_service_replica_factory
  - uid: system.fabric._default_service_factory
  - uid: system.fabric._stateful_service_replica
    parent: system.fabric
    href: system.fabric._stateful_service_replica.yml
    name: StatefulServiceReplica
    nameWithType: StatefulServiceReplica
    fullName: system.fabric.StatefulServiceReplica
    type: Interface
    summary: "<p>Definiert das Verhalten, die den Lebenszyklus eines Replikats, z. B. starten, Initialisierung, rollenänderungen und Herunterfahren bestimmt. </p>\n<p>\r\n\r\n  <b>Beschreibung:</b>zustandsbehaftete Diensttypen müssen diese Schnittstelle implementieren. Die Logik der einen zustandsbehafteten Diensttyp enthält, die auf primären Replikaten aufgerufen wird und Verhalten, die auf sekundären Replikaten aufgerufen wird. Wenn dienstautor vornehmen möchte mithilfe des bereitgestellten <xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>, und klicken Sie dann der Dienst, auch implementieren muss <xref uid=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider</xref> verwenden Sie die Implementierung der <xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref> , die vom bereitgestellt <xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref></p>"
    syntax:
      content: public interface StatefulServiceReplica
  - uid: system.fabric._service_description
    parent: system.fabric
    href: system.fabric._service_description.yml
    name: ServiceDescription
    nameWithType: ServiceDescription
    fullName: system.fabric.ServiceDescription
    type: Class
    summary: '<p>Ein <xref uid="system.fabric._service_description" data-throw-if-not-resolved="false">ServiceDescription</xref> enthält alle Informationen, die zum Erstellen eines Diensts erforderlich sind. </p>'
    syntax:
      content: public class ServiceDescription
  - uid: system.fabric._fabric_runtime
    parent: system.fabric
    href: system.fabric._fabric_runtime.yml
    name: FabricRuntime
    nameWithType: FabricRuntime
    fullName: system.fabric.FabricRuntime
    type: Class
    summary: '<p>Können benutzerdefinierte Hosts erhalten ihre <xref uid="system.fabric._code_package_activation_context" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext</xref>, auch auf den erforderlichen Dienst Factorys registrieren [ <xref uid="system.fabric._stateless_service_factory" data-throw-if-not-resolved="false">system.fabric.StatelessServiceFactory</xref>, <xref uid="system.fabric._stateful_service_factory" data-throw-if-not-resolved="false">system.fabric.StatefulServiceFactory</xref> ] oder direkt Diensttypen. </p>'
    syntax:
      content: public class FabricRuntime