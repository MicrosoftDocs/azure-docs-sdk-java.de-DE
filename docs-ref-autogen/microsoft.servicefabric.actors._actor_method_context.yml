### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.actors._actor_method_context
    id: _actor_method_context
    parent: microsoft.servicefabric.actors
    children:
      - microsoft.servicefabric.actors._actor_method_context.getCallType()
      - microsoft.servicefabric.actors._actor_method_context.getMethodName()
    href: microsoft.servicefabric.actors._actor_method_context.yml
    langs:
      - java
    name: ActorMethodContext
    nameWithType: ActorMethodContext
    fullName: microsoft.servicefabric.actors.ActorMethodContext
    type: Class
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorMethodContext.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorMethodContext.java
      startLine: 8
    package: microsoft.servicefabric.actors
    summary: '<p>Ein <xref uid="microsoft.servicefabric.actors._actor_method_context" data-throw-if-not-resolved="false">ActorMethodContext</xref> enthält Informationen über die Methode, die vom Akteur Laufzeit aufgerufen wird, und wird als Argument übergeben <xref uid="microsoft.servicefabric.actors._actor_base.onPreActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false">ActorBase#onPreActorMethodAsync(ActorMethodContext)</xref> und <xref uid="microsoft.servicefabric.actors._actor_base.onPostActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false">ActorBase#onPostActorMethodAsync(ActorMethodContext)</xref>. </p>'
    syntax: &ref_1
      content: public class ActorMethodContext
    inheritance:
      - java.lang.Object
  - uid: microsoft.servicefabric.actors._actor_method_context.getCallType()
    id: getCallType()
    parent: microsoft.servicefabric.actors._actor_method_context
    href: microsoft.servicefabric.actors._actor_method_context.yml
    langs:
      - java
    name: getCallType()
    nameWithType: ActorMethodContext.getCallType()
    fullName: ActorCallType microsoft.servicefabric.actors.ActorMethodContext.getCallType()
    overload: microsoft.servicefabric.actors._actor_method_context.getCallType*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorMethodContext.java
      startLine: 43
    package: microsoft.servicefabric.actors
    summary: |-
      <p>Der Typ des Aufrufs von Akteur-Laufzeit (z. B. Schnittstellenmethode Akteur, Zeitgeberrückruf usw.).</p>
      <p></p>
    syntax:
      content: public ActorCallType getCallType()
      return:
        type: microsoft.servicefabric.actors._actor_call_type
        description: <p>Ein <xref uid="microsoft.servicefabric.actors._actor_call_type" data-throw-if-not-resolved="false">ActorCallType</xref> der Aufruftyp darstellt. </p>
  - uid: microsoft.servicefabric.actors._actor_method_context.getMethodName()
    id: getMethodName()
    parent: microsoft.servicefabric.actors._actor_method_context
    href: microsoft.servicefabric.actors._actor_method_context.yml
    langs:
      - java
    name: getMethodName()
    nameWithType: ActorMethodContext.getMethodName()
    fullName: String microsoft.servicefabric.actors.ActorMethodContext.getMethodName()
    overload: microsoft.servicefabric.actors._actor_method_context.getMethodName*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorMethodContext.java
      startLine: 34
    package: microsoft.servicefabric.actors
    summary: |-
      <p>Name der Methode, die vom Akteur Laufzeit aufgerufen.</p>
      <p></p>
    syntax:
      content: public String getMethodName()
      return:
        type: '26831127'
        description: '<p>Eine Zeichenfolge, die den Namen der Methode darstellt. </p>'
references:
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: microsoft.servicefabric.actors._actor_method_context.getMethodName*
    name: getMethodName
    nameWithType: ActorMethodContext.getMethodName
    fullName: String microsoft.servicefabric.actors.ActorMethodContext.getMethodName
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_method_context.getCallType*
    name: getCallType
    nameWithType: ActorMethodContext.getCallType
    fullName: ActorCallType microsoft.servicefabric.actors.ActorMethodContext.getCallType
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_call_type
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_call_type.yml
    name: ActorCallType
    nameWithType: ActorCallType
    fullName: microsoft.servicefabric.actors.ActorCallType
    type: Enum
    summary: "<p>Stellt den Aufruf-Typ der Methode aufgerufen, indem Akteur-Laufzeit zugeordnet. </p>\n<p>\r\n\r\n  <b>Hinweise:</b>Dies erfolgt im Rahmen des <xref uid=\"microsoft.servicefabric.actors._actor_method_context\" data-throw-if-not-resolved=\"false\">ActorMethodContext</xref> der als Argument übergeben wird <xref uid=\"microsoft.servicefabric.actors._actor_base.onPreActorMethodAsync(ActorMethodContext)\" data-throw-if-not-resolved=\"false\">ActorBase#onPreActorMethodAsync(ActorMethodContext)</xref> und <xref uid=\"microsoft.servicefabric.actors._actor_base.onPostActorMethodAsync(ActorMethodContext)\" data-throw-if-not-resolved=\"false\"> ActorBase#onPostActorMethodAsync(ActorMethodContext)</xref>. </p>"
    syntax:
      content: public enum ActorCallType
  - uid: microsoft.servicefabric.actors._actor_method_context
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_method_context.yml
    name: ActorMethodContext
    nameWithType: ActorMethodContext
    fullName: microsoft.servicefabric.actors.ActorMethodContext
    type: Class
    summary: '<p>Ein <xref uid="microsoft.servicefabric.actors._actor_method_context" data-throw-if-not-resolved="false">ActorMethodContext</xref> enthält Informationen über die Methode, die vom Akteur Laufzeit aufgerufen wird, und wird als Argument übergeben <xref uid="microsoft.servicefabric.actors._actor_base.onPreActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false">ActorBase#onPreActorMethodAsync(ActorMethodContext)</xref> und <xref uid="microsoft.servicefabric.actors._actor_base.onPostActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false">ActorBase#onPostActorMethodAsync(ActorMethodContext)</xref>. </p>'
    syntax: *ref_1
  - uid: microsoft.servicefabric.actors._actor_base.onPreActorMethodAsync(ActorMethodContext)
    parent: microsoft.servicefabric.actors._actor_base
    href: microsoft.servicefabric.actors._actor_base.yml
    name: onPreActorMethodAsync(ActorMethodContext actorMethodContext)
    nameWithType: ActorBase.onPreActorMethodAsync(ActorMethodContext actorMethodContext)
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorBase.onPreActorMethodAsync(ActorMethodContext actorMethodContext)
    type: Method
    summary: |-
      <p>Diese Methode wird von Akteur Laufzeit aufgerufen, unmittelbar vor eine Akteur-Methode aufrufen. Überschreiben Sie diese Methode zum Ausführen von Maßnahmen, die vor einem Akteur-Methode aufgerufen wird.</p>
      <p></p>
    syntax:
      content: protected CompletableFuture<?> onPreActorMethodAsync(ActorMethodContext actorMethodContext)
      parameters:
        - id: actorMethodContext
          type: microsoft.servicefabric.actors._actor_method_context
          description: '<p>Ein <xref uid="microsoft.servicefabric.actors._actor_method_context" data-throw-if-not-resolved="false">ActorMethodContext</xref> beschreiben die Methode, die vom Akteur Common Language Runtime nach Abschluss dieser Methode aufgerufen wird. </p>'
      return:
        type: 16409f84
        description: |-
          <p>Ein <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> , actor--Methode Vorgang darstellt. <verbatim>    &lt;b&gt;"Hinweise":&lt;/b&gt;diese Methode wird aufgerufen, indem Akteur zur Laufzeit vor:

              &lt;ul&gt;

              &lt;li&gt;Invoking an actor interface method when a client request comes.&lt;/li&gt;

              &lt;li&gt;Invoking a method on {@link Remindable} interface when a reminder fires.&lt;/li&gt;

              &lt;li&gt;Invoking a timer callback when timer fires.&lt;/li&gt;

              &lt;/ul&gt;</verbatim></p>
  - uid: microsoft.servicefabric.actors._actor_base.onPostActorMethodAsync(ActorMethodContext)
    parent: microsoft.servicefabric.actors._actor_base
    href: microsoft.servicefabric.actors._actor_base.yml
    name: onPostActorMethodAsync(ActorMethodContext actorMethodContext)
    nameWithType: ActorBase.onPostActorMethodAsync(ActorMethodContext actorMethodContext)
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorBase.onPostActorMethodAsync(ActorMethodContext actorMethodContext)
    type: Method
    summary: |-
      <p>Diese Methode wird aufgerufen, von Akteur Runtime eine Akteur-Methode Ausführung beendet wurde. Überschreiben Sie diese Methode für eine Aktion ausgeführt, nachdem eine Akteur-Methode die Ausführung beendet ist.</p>
      <p></p>
    syntax:
      content: protected CompletableFuture<?> onPostActorMethodAsync(ActorMethodContext actorMethodContext)
      parameters:
        - id: actorMethodContext
          type: microsoft.servicefabric.actors._actor_method_context
          description: '<p>Ein <xref uid="microsoft.servicefabric.actors._actor_method_context" data-throw-if-not-resolved="false">ActorMethodContext</xref> beschreiben die Methode, die vom Akteur-Laufzeit, bevor Sie diese Methode aufgerufen wurde. </p>'
      return:
        type: 16409f84
        description: |-
          <p>Ein <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> , post, actor-Method-Vorgang darstellt. <verbatim>    &lt;b&gt;"Hinweise":&lt;/b&gt; diese Methode wird aufgerufen, indem Akteur zur Laufzeit vor:

              &lt;ul&gt;

              &lt;li&gt;Invoking an actor interface method when a client request comes.&lt;/li&gt;

              &lt;li&gt;Invoking a method on {@link Remindable} interface when a reminder fires.&lt;/li&gt;

              &lt;li&gt;Invoking a timer callback when timer fires.&lt;/li&gt;

              &lt;/ul&gt;</verbatim></p>